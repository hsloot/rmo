on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

name: continuous-benchmarks

jobs:
  continuous-benchmarks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout base
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.base_ref || github.event.before }}
          path: base

      - name: Checkout HEAD
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.event.after }}
          path: head

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - name: Install dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: |
            bench
            remotes
            readr
            dplyr
            tidyr
          needs: bench
          working-directory: head

      - name: Debug
        run: |
          pwd
          ls -la

      - name: Run benchmarks
        run: |
          mark <- function(...) {
            tryCatch({
              out <- bench::mark(...)
              in_file <- getOption("benchmark_file_in")
              out_file <- getOption("benchmark_file_out")
              summary(out, filter_gc = FALSE) |>
                mutate(file = in_file) |>
                select(file, expression, min, median, mem_alloc) |>
                mutate(across(c(min, median, mem_alloc), as.character)) |>
                write_tsv(
                  file = out_file, append = file.exists(out_file),
                  col_names = !file.exists(out_file)
                )
              out
            }, error = function(e) {
              message(paste("Error in benchmark", in_file, ":", e$message))
            })
          }

          run_benchmarks <- function(
            bench_files, ref_dir = c("head", "base")) {
            ref_dir <- match.arg(ref_dir)
            old_dir <- setwd(ref_dir)
            on.exit(setwd(old_dir))
            pkgname <- c(read.dcf("DESCRIPTION", fields = "Package"))
            temp_dir <- tempdir()
            on.exit(unlink(file.path(temp_dir, pkgname), recursive = TRUE))
            install_local(
              ".", lib = temp_dir, force = TRUE, upgrade = FALSE)
            library(pkgname, lib.loc = temp_dir, character.only = TRUE)
            options(benchmark_file_out = file.path("bench", "benchmarks.tsv"))
            for (file in bench_files) {
              options(benchmark_file_in = basename(file))
              source(file)
            }
          }

          bench_files <- list.files(
            file.path("head", "bench"),  pattern = "\\.R$",
            full.names = TRUE) |>
            normalizePath()
          if (length(bench_files) == 0) {
            stop("No benchmarks found in base")
          }

          run_benchmarks(bench_files, ref_dir = "base")
          run_benchmarks(bench_files, ref_dir = "head")
        shell: Rscript --default-packages=methods,bench,remotes,readr,dplyr {0}

      - name: Calculate differences
        run: |
          read_tsv(file.path("base", "bench", "benchmarks.tsv")) |>
            mutate(ref = "BASE") |>
            bind_rows(
              read_tsv(file.path("head", "bench", "benchmarks.tsv")) |>
                mutate(ref = "HEAD")
            ) |>
            complete(file, expression, ref, fill = list(min = NA, median = NA, mem_alloc = NA)) |>
            mutate(across(c(min, median), as_bench_time)) |>
            mutate(across(mem_alloc, as_bench_bytes)) |>
            select(ref, file, expression, min, median, mem_alloc) |>
            arrange(file, expression) |>
            group_by(file, expression) |>
            arrange(ref) |>
            summarise(
              across(c(min, median, mem_alloc),
                ~paste0(
                  as.character(.[[2]]),
                  " (", format(
                    (as.numeric(.[[2]]) / as.numeric(.[[1]]) - 1) * 1e2,
                    digits = 2, nsmall = 2), "%)")
               )
            ) |>
            write_tsv("benchmark-comparisons.tsv")
        shell: Rscript --default-arguments=bench,readr,dplyr,tidyr {0}

      - name: Upload benchmarks
        uses: actions/upload-artifact@v2
        with:
          name: benchmarks
          path: |
            benchmark-comparisons.tsv
            base/bench/benchmarks.tsv
            head/bench/benchmarks.tsv

      - name: Comment PR
        if: github.event_name == 'pull_request'
        run: |
          df <- read_tsv("benchmark-comparisons.tsv")

          comment <- paste0(
            "## Benchmark summary\n\n",
            "File | Expression | Min time | Median time | Mem. alloc\n",
            "---- | ---------- | -------- | ----------- | ----------\n",
            paste0(
              df$file, " | ",
              df$expression, " | ",
              df$min, " | ",
              df$median, " | ",
              df$mem_alloc,
              collapse = "\n"
            )
          )

          writeLines(comment, "comment.md")
        shell: Rscript --default-packages=readr,dplyr {0}

      - name: Post comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('comment.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
