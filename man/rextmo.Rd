% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sample.R
\name{rextmo}
\alias{rextmo}
\title{Sample from an extendible Marshall--Olkin distribution}
\usage{
rextmo(n, d, bf, method = c("MDCM", "AM", "ESM"))
}
\arguments{
\item{n}{an integer for the number of samples.}

\item{d}{an integer for the dimension of the sample.}

\item{bf}{a \linkS4class{BernsteinFunction}  with the Bernstein function of the extendible
Marshall--Olkin distribution.}

\item{method}{a character vector indicating which sampling algorithm should be used.
Use "MDCM" for the \emph{Markovian death-counting model}, "AM" for the \emph{Arnold model},
and "ESM" for the \emph{exogenous shock model}.}
}
\value{
\code{rextmo} is a wrapper arround \code{\link[=rexmo]{rexmo()}} for extendible Marshall--Olkin distributions and returns
an  \eqn{n \times d}{n x d} numeric matrix with the rows corresponding to independent and
identically distributed samples of a \eqn{d} variate extendible Marshall-Olkin distribution
with Bernstein function \code{bf}.
}
\description{
Draws \code{n} independent samples from a \code{d}-variate extendible Marshall--Olkin distribution with
Bernstein function \code{bf} using a wrapper of \code{\link[=rexmo]{rexmo()}}.
}
\details{
\strong{Parametrization}:
Extendible Marshall--Olkin distributions are parametrized by Bernstein functions \eqn{\psi} such that the
exchangeable shock-size arrival intensities are
\deqn{
  \eta_{i}
     = \binom{d}{i} {(-1)}^{i-1} \Delta{ \psi{(d-i)} } , \quad i \in {[d]} .
}
}
\examples{
rextmo(10, 2, AlphaStableBernsteinFunction(alpha = log2(2  - 0.5)))
rextmo(10, 2, LinearBernsteinFunction(scale = 1))                    # independence
rextmo(10, 2, ConstantBernsteinFunction(constant = 1))               # comonotone

rextmo(10, 2, AlphaStableBernsteinFunction(alpha = log2(2  - 0.5)), method = "AM")
rextmo(10, 2, LinearBernsteinFunction(scale = 1), method = "AM")                    # independence
rextmo(10, 2, ConstantBernsteinFunction(constant = 1), method = "AM")               # comonotone

rextmo(10, 2, AlphaStableBernsteinFunction(alpha = log2(2  - 0.5)), method = "ESM")
rextmo(10, 2, LinearBernsteinFunction(scale = 1), method = "ESM")                    # independence
rextmo(10, 2, ConstantBernsteinFunction(constant = 1), method = "ESM")               # comonotone

}
\concept{smapling-algorithms}
