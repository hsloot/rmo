% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/s4-calcMDCMGeneratorMatrix.R
\name{calcMDCMGeneratorMatrix}
\alias{calcMDCMGeneratorMatrix}
\title{Calculate the MDCM Markovian generator matrix}
\usage{
calcMDCMGeneratorMatrix(object, d, cscale = 1, ...)
}
\arguments{
\item{object}{An object deriving from the class \linkS4class{BernsteinFunction}.}

\item{d}{A positive integer, larger than two, for the \emph{dimension}.}

\item{cscale}{A positive number for the \emph{composite scaling factor}.}

\item{...}{pass-through parameter.}
}
\description{
Calculates the \emph{infinitesimal Markov generator matrix} of the corresponding
(Markovian) default-counting process, used internally by \code{\link[=rexmo]{rexmo()}}.
}
\details{
For a given Bernstein function, the Markov generator matrix is defined as the
upper triangular matrix with elements
\deqn{
  q_{i, j}^\ast
    = \binom{d-i}{j-i} \begin{cases}
      -\psi{(d-i)} & \text{if } i = j , \\
      {(-1)}^{j-i-1} \Delta^{j-i}{ \psi{(d-i)} } & \text{if } i < j , \\
     0 & \text{otherwise} .
   \end{cases}
}
The calculation of the Markov generator matrix using this formula is usually
not numerically stable. Consequently, the various alternative approaches are
used dependent on the class of the Bernstein function.

The (upper triangular) infinitesimal Markov generator of the associated
death-counting process is calculated recursively:
\deqn{
  q_{0, i}^\ast
    = \eta_{i} ,
      \quad i \in {\{ 1 , \ldots , d \}} ,
}
and
\deqn{
  q_{i+1, j+1}^\ast
    = \frac{d-j}{d-i} q_{i,j}^\ast + \frac{j+1-i}{d-i} q_{i, j+1}^\ast ,
     \quad 0 \leq i < j \leq d .
}
}
\examples{
bf <- AlphaStableBernsteinFunction(alpha = 0.7)
calcMDCMGeneratorMatrix(bf, 3)
}
\seealso{
\code{\link[=rexmo]{rexmo()}}

Other Bernstein function generics: 
\code{\link{calcExShockArrivalIntensities}()},
\code{\link{calcExShockSizeArrivalIntensities}()},
\code{\link{calcIterativeDifference}()},
\code{\link{calcShockArrivalIntensities}()},
\code{\link{getDefaultMethodString}()},
\code{\link{getLevyDensity}()},
\code{\link{getStieltjesDensity}()},
\code{\link{valueOf0}()}
}
\concept{Bernstein function generics}
