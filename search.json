[{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to rmo","title":"Contributing to rmo","text":"outlines propose change rmo package.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to rmo","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. fixing typos, please make sure describe change commit message. example ⚠️ edit roxygen comment .R file R/ .Rd file man/.","code":"docs: fix typo in the introduction section"},{"path":"/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to rmo","text":"make substantial pull request, always file issue make sure maintainers agree ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"/CONTRIBUTING.html","id":"coding-style","dir":"","previous_headings":"","what":"Coding style","title":"Contributing to rmo","text":"ensure consistent coding style, utilize following tools style enforcement: EditorConfig maintaining consistent whitespace usage. lintr enforcing R coding style. ClangFormat maintaining consistent C++ coding style.","code":""},{"path":"/CONTRIBUTING.html","id":"commit-guidelines","dir":"","previous_headings":"","what":"Commit guidelines","title":"Contributing to rmo","text":"use conventional commits specification commit messages. means commit message structured follows: information, see conventional commits specification.","code":"<type>[optional scope]: <description>  [optional body]  [optional footer]"},{"path":"/CONTRIBUTING.html","id":"branching-strategy","dir":"","previous_headings":"","what":"Branching strategy","title":"Contributing to rmo","text":"use GitHub Flow branching strategy. means feature bug fix developed separate branch. working new feature fixing bug, create new branch main branch. changes complete, submit pull request merge branch back main branch. pull request reviewed maintainers merging. approach allows better collaboration ensures changes thoroughly reviewed merged main codebase.","code":""},{"path":"/CONTRIBUTING.html","id":"testing-and-code-coverage","dir":"","previous_headings":"","what":"Testing and code coverage","title":"Contributing to rmo","text":"use packages testthat unit testing covr checking code coverage. Run tests following command: Check code coverage following command:","code":"devtools::test() covr::package_coverage()"},{"path":"/CONTRIBUTING.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Contributing to rmo","text":"recommend create Git branch pull request (PR). New code follow tidyverse style guide pass lintr::lint_package() without errors. can use styler package apply styles, please don’t restyle code nothing PR. information static code analysis tool lintr, see https://lintr.r-lib.org. changes C++ backend, use ClangFormat. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to rmo","text":"Please note rmo project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Henrik Sloot  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. rmo Copyright (C) 2019 Henrik Sloot This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with rmo","title":"Getting help with rmo","text":"Thanks using rmo. filing issue, places explore pieces put together make process smooth possible. Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site. Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed. right place, need file issue, please review contributing document. Thanks help!","code":""},{"path":"/articles/rmo.html","id":"simple-usage","dir":"Articles","previous_headings":"","what":"Simple usage","title":"Using `rmo`","text":"Sampling one integrated family extendible Marshall–Olkin distributions simple. example, following code generates sample size 10 trivariate extendible Marshall–Olkin distribution -called \\(\\alpha\\)-stable family parameter \\(\\alpha = 0.4\\): jump distribution parameter eta usually allows range possible depenence structures.","code":"rpextmo(10, 3, eta = 0.4, family = \"AlphaStable\") #>             [,1]       [,2]       [,3] #>  [1,] 1.76166384 1.76166384 1.76166384 #>  [2,] 2.29274538 1.65792149 3.41241836 #>  [3,] 0.83385548 0.83385548 0.83385548 #>  [4,] 0.32498008 0.32498008 0.32498008 #>  [5,] 1.58113094 1.58113094 1.58113094 #>  [6,] 1.96768969 1.96768969 0.31779119 #>  [7,] 0.02560441 0.02560441 0.02560441 #>  [8,] 0.52896593 2.44176858 0.52896593 #>  [9,] 0.08884174 0.79477742 0.08884174 #> [10,] 1.65539156 1.65539156 1.65539156"},{"path":"/articles/rmo.html","id":"extended-usage","dir":"Articles","previous_headings":"","what":"Extended usage","title":"Using `rmo`","text":"integrated family extendible Marshall–Olkin distributions additional parameters (default: 0) killing rate, b (default: 0) * drift*, gamma (default: 1) intensity scaling parameter. cite (Sloot 2022) better understanding parameters: , recall can characterize every ext. MO distribution Bernstein function \\(\\psi\\), defines law (potentially killed) Lévy subordinator. Components corresponding ext. MO distributed random vector killed subordinator passes individual unit exponential barrier values. compound Poisson subordinators, distinguish subordinator laws jump intensity jump size distribution: jump intensity translates overall speed subordinator surpasses barrier values. Thus, corresponds random vector’s marginal rate. distribution jump sizes predefines chances subordinator simultaneously surpassing multiple barrier values, therefore, corresponds random vector’s dependence structure. Simply put, high probability larger jumps increases chance simultaneous deaths, high probability smaller jumps increases likelihood individual deaths. logic culminates pure-drift pure-killing corner cases, corresponding independence comonotonicity, respectively, pure-jump Lévy subordinators infinite activity, can approximated compound Poisson processes, convex combinations . following code generates sample size 10 trivariate extendible Marshall–Olkin distribution (extended) \\(\\alpha\\)-stable family parameter \\(\\alpha = 0.4\\), killing rate \\(= 0.1\\), drift \\(b = 0.2\\), intensity scaling parameter \\(\\gamma = 0.5\\):","code":"rpextmo(   10, 3,   a = 0.1, b = 0.2, gamma = 0.5,   eta = 0.4, family = \"AlphaStable\", ) #>            [,1]      [,2]      [,3] #>  [1,] 5.7394990 2.6272176 3.6620668 #>  [2,] 1.1123593 1.7227713 1.7227713 #>  [3,] 2.7849008 2.7849008 2.7849008 #>  [4,] 0.3664178 0.6315217 0.6315217 #>  [5,] 1.7496377 1.7496377 0.8216942 #>  [6,] 0.2419438 0.2419438 0.2419438 #>  [7,] 0.2198191 0.2198191 0.2198191 #>  [8,] 0.6055010 4.3828162 1.6956795 #>  [9,] 0.2372185 0.2372185 0.2372185 #> [10,] 3.2767102 1.9154214 0.9063151"},{"path":"/articles/rmo.html","id":"advance-usage","dir":"Articles","previous_headings":"","what":"Advance usage","title":"Using `rmo`","text":"Aside integrated families, rmo package also provides tools create custom extendible Marshall–Olkin distributions via -called Bernstein functions. example, following code generates Bernstein function associated \\(\\alpha\\)-stable family parameter \\(\\alpha = 0.4\\) simple example : class Bernstein functions closed addition, scalar multiplication, composite scalar multiplication. allows recombinations implemented Bernstein functions create new ones. example, following code creates Bernstein function associated \\(\\alpha\\)-stable family parameter \\(\\alpha = 0.4\\), killing rate \\(= 0.1\\), drift \\(b = 0.2\\), intensity scaling parameter \\(\\gamma = 0.5\\): generate sample custom extendible Marshall–Olkin distribution, use rextmo function:","code":"AlphaStableBernsteinFunction(0.4) #> An object of class \"AlphaStableBernsteinFunction\" #> - alpha: 0.4 SumOfBernsteinFunctions(   SumOfBernsteinFunctions(     ConstantBernsteinFunction(0.1),     LinearBernsteinFunction(0.2)   ),   ScaledBernsteinFunction(     0.5,     AlphaStableBernsteinFunction(0.4)   ) ) #> An object of class \"SumOfBernsteinFunctions\" #> - first: #>  An object of class \"SumOfBernsteinFunctions\" #>  - first: #>      An object of class \"ConstantBernsteinFunction\" #>      - constant: 0.1 #>  - second: #>      An object of class \"LinearBernsteinFunction\" #>      - scale: 0.2 #> - second: #>  An object of class \"ScaledBernsteinFunction\" #>  - scale: 0.5 #>  - original: #>      An object of class \"AlphaStableBernsteinFunction\" #>      - alpha: 0.4 rextmo(10, 3,   SumOfBernsteinFunctions(     SumOfBernsteinFunctions(       ConstantBernsteinFunction(0.1),       LinearBernsteinFunction(0.2)     ),     ScaledBernsteinFunction(       0.5,       AlphaStableBernsteinFunction(0.4)     )   ) ) #>             [,1]       [,2]       [,3] #>  [1,] 1.89291113 0.73199879 2.11799065 #>  [2,] 0.11377987 0.04674430 0.11377987 #>  [3,] 0.03386182 0.03386182 0.03386182 #>  [4,] 0.08256332 0.44866035 0.44866035 #>  [5,] 0.31735915 0.06744323 0.31735915 #>  [6,] 0.08547364 0.40515098 0.40515098 #>  [7,] 0.32959507 0.32959507 0.32959507 #>  [8,] 0.07251348 0.07251348 0.07251348 #>  [9,] 0.37937632 2.72986765 1.41231581 #> [10,] 1.36677394 0.96929648 0.96929648"},{"path":"/articles/rmo.html","id":"extending-rmo","dir":"Articles","previous_headings":"","what":"Extending rmo","title":"Using `rmo`","text":"rmo package designed easily extensible. Consider following Bernstein function: \\[   \\psi(x)     = \\log{\\frac{b {(x + )}}{{(x + b)}}},       0 < < b. \\] complete Bernstein function Lévy density \\(\\nu\\): \\[   \\nu{(u)}     = {\\left[ e^{-u} - e^{-b u} \\right]} / {u},       u > 0 , \\] Stieljtes density \\(\\sigma\\): \\[   \\sigma{(u)}     = 1_{(, b)}{(u)} / {u},       u > 0 . \\] implemented package, can added follows: Now can create custom Bernstein function object generate samples :","code":"CustomBernsteinFunction <- setClass( # nolint   \"CustomBernsteinFunction\",   contains = \"CompleteBernsteinFunction\",   slots = c(a = \"numeric\", b = \"numeric\"),   validity = function(object) {     if (object@a <= 0) {       stop(\"a must be positive\")     }     if (object@b <= 0) {       stop(\"b must be positive\")     }     if (object@a >= object@b) {       stop(\"a must be less than b\")     }      invisible(TRUE)   } )  setMethod(   \"initialize\",   signature(.Object = \"CustomBernsteinFunction\"),   function(.Object, a, b) { # nolint     if (!missing(a) && !missing(b)) {       .Object@a <- a # nolint       .Object@b <- b # nolint       validObject(.Object)     }      invisible(.Object)   } )  setMethod(   \"show\",   \"CustomBernsteinFunction\",   function(object) {     cat(sprintf(\"An object of class %s\\n\", classLabel(class(object))))     if (isTRUE(validObject(object, test = TRUE))) {       cat(sprintf(\"- a: %s\\n\", format(object@a)))       cat(sprintf(\"- b: %s\\n\", format(object@b)))     } else {       cat(\"invalid or not initialized object\\n\")     }      invisible(NULL)   } )  setMethod(   \"levyDensity\",   \"CustomBernsteinFunction\",   function(object) {     structure(       function(u) {         (exp(-object@a * u) - exp(-object@b * u)) / u       },       lower = 0, upper = Inf, type = \"continuous\"     )   } )  setMethod(   \"stieltjesDensity\",   \"CustomBernsteinFunction\",   function(object) {     structure(       function(u) {         ifelse(u > object@a & u < object@b, 1 / u, 0)       },       lower = object@a, upper = object@b, type = \"continuous\"     )   } ) bf <- CustomBernsteinFunction(a = 0.5, b = 2) rextmo(10, 3, bf) #>            [,1]      [,2]      [,3] #>  [1,] 4.5124306 0.6776867 0.6776867 #>  [2,] 1.6510005 1.6510005 1.7551740 #>  [3,] 0.8254936 0.8254936 0.6441104 #>  [4,] 1.3517013 1.3517013 1.3517013 #>  [5,] 2.5269475 2.5269475 1.9062638 #>  [6,] 4.5057099 2.4365320 1.7672876 #>  [7,] 1.6811601 1.6811601 1.6811601 #>  [8,] 0.1955646 0.3424441 0.3424441 #>  [9,] 0.5672961 0.5672961 0.5672961 #> [10,] 1.9118335 3.3807612 1.9118335 rexmo(10, 3, exIntensities(bf, 3, method = \"levy\")) #>              [,1]        [,2]        [,3] #>  [1,] 0.621524066 3.576891392 0.621524066 #>  [2,] 1.725156021 0.711134685 0.711134685 #>  [3,] 0.041547469 0.518341738 0.041547469 #>  [4,] 0.431265509 0.431265509 0.431265509 #>  [5,] 0.009924545 0.009924545 0.009924545 #>  [6,] 3.788789729 3.788789729 3.788789729 #>  [7,] 0.868756834 0.930285358 0.930285358 #>  [8,] 0.828216388 0.828216388 1.246066232 #>  [9,] 0.041924976 0.041924976 0.041924976 #> [10,] 1.212388226 1.498387190 1.212388226 rexmo(10, 3, exIntensities(bf, 3, method = \"stieltjes\")) #>            [,1]      [,2]      [,3] #>  [1,] 3.5263329 2.7646248 4.7625102 #>  [2,] 0.3084601 0.7489434 0.7489434 #>  [3,] 1.6212391 0.6477563 1.6212391 #>  [4,] 0.1090898 0.1090898 0.1090898 #>  [5,] 0.7484761 0.7484761 0.7484761 #>  [6,] 0.1174769 0.1174769 0.1174769 #>  [7,] 0.8045211 2.2488587 1.8485112 #>  [8,] 0.6993002 0.6993002 0.6993002 #>  [9,] 3.1630755 3.1630755 3.1630755 #> [10,] 3.7058646 3.7058646 3.7058646"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Henrik Sloot. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sloot H (2024). rmo: package Marshall-Olkin distribution. R package version 0.8.7, https://github.com/hsloot/rmo.","code":"@Manual{,   title = {rmo: A package for the Marshall-Olkin distribution},   author = {Henrik Sloot},   year = {2024},   note = {R package version 0.8.7},   url = {https://github.com/hsloot/rmo}, }"},{"path":"/index.html","id":"rmo","dir":"","previous_headings":"","what":"A package for the Marshall-Olkin distribution","title":"A package for the Marshall-Olkin distribution","text":"R package constructing simulating high-dimensional Marshall-Olkin (MO) distributions, making simple fun use research real-world applications. Read simulating high-dimensional MO distributions (Sloot 2022).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A package for the Marshall-Olkin distribution","text":"can install development version GitHub using devtools package :","code":"# install.packages(\"devtools\") devtools::install_github(\"hsloot/rmo\")"},{"path":"/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"A package for the Marshall-Olkin distribution","text":"Simulating high-dimensional Marshall–Olkin distributions made simple rpextmo() function. basic example:","code":"rpextmo(   n = 10,                # number of samples   d = 3,                 # dimension   eta = log2(2 - 0.5),   # distribution family parameter   family = \"AlphaStable\" # distribution family ) #>             [,1]      [,2]       [,3] #>  [1,] 1.43771730 1.4377173 1.43771730 #>  [2,] 2.05209628 1.3530518 1.91148856 #>  [3,] 0.57433836 1.3811189 1.90247610 #>  [4,] 0.75080505 1.1922738 0.54154504 #>  [5,] 1.71072303 1.7107230 0.25935362 #>  [6,] 0.50637200 0.5063720 0.50637200 #>  [7,] 1.70689790 1.7068979 0.43169613 #>  [8,] 0.07250493 0.7784406 0.07250493 #>  [9,] 1.83458658 1.3509871 1.83458658 #> [10,] 2.57508782 0.1130284 0.91314202"},{"path":"/index.html","id":"advanced-usage","dir":"","previous_headings":"","what":"Advanced usage","title":"A package for the Marshall-Olkin distribution","text":"parametric families linked -called Bernstein functions. class Bernstein functions closed addition, scaling, composite scaling. can create new Bernstein functions simulate . example:","code":"# Create a custom Bernstein function parametrization alpha <- log2(2 - 0.5) x0 <- 5e-4 bf <- SumOfBernsteinFunctions(   first = LinearBernsteinFunction(     scale = alpha * x0^(1 - alpha) / (1 - alpha) / gamma(1 - alpha)   ),   second = ScaledBernsteinFunction(     scale = x0^(-alpha) / gamma(1 - alpha),     original = ParetoBernsteinFunction(       alpha = alpha,       x0 = x0     )   ) )  # Simulate from the custom Bernstein function parametrization rextmo(n = 10, d = 3, bf = bf) #>            [,1]      [,2]      [,3] #>  [1,] 0.8633888 1.3353381 1.3353381 #>  [2,] 2.1615788 2.1615788 2.1615788 #>  [3,] 0.2844054 0.4893745 0.4893745 #>  [4,] 1.3552345 1.3552345 0.6377810 #>  [5,] 0.1877915 0.1877915 0.1877915 #>  [6,] 0.1706188 0.1706188 0.1706188 #>  [7,] 0.4699766 3.4625694 1.3128645 #>  [8,] 0.1841238 0.1841238 0.1841238 #>  [9,] 2.5726964 1.4836676 0.7034619 #> [10,] 1.4657382 0.5681614 1.6458015"},{"path":"/index.html","id":"words-of-caution","dir":"","previous_headings":"","what":"Word(s) of caution","title":"A package for the Marshall-Olkin distribution","text":"package extensively tested, numerical issues may arise high-dimensional simulations due small large numbers. recommend performing statistical tests suitable use-case ensure validity. guidance, refer statistical unit tests submit issue report encounter statistical problems. Additionally, note package reached certain level stability, still active development. aim keep interface primary function rpextmo() backwards compatible, implementation may undergo changes.","code":""},{"path":"/index.html","id":"api-documentation","dir":"","previous_headings":"","what":"API documentation","title":"A package for the Marshall-Olkin distribution","text":"package documented using roxygen2 pkgdown. can find documentation project website.","code":""},{"path":"/index.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"A package for the Marshall-Olkin distribution","text":"package tested using testthat. can run tests using following command checking repository:","code":"devtools::test()"},{"path":"/index.html","id":"changelog","dir":"","previous_headings":"","what":"Changelog","title":"A package for the Marshall-Olkin distribution","text":"changelog available NEWS.md file.","code":""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"A package for the Marshall-Olkin distribution","text":"Contributions rmo welcome! contribution can improving documentation, writing tests, raising issues feature requests, implementing feature requests, fixing bugs. Check contribution guide get started.","code":""},{"path":[]},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"A package for the Marshall-Olkin distribution","text":"GPL-3 Henrik Sloot","code":""},{"path":"/pull_request_template.html","id":"related-issues","dir":"","previous_headings":"","what":"Related issues","title":"NA","text":"Closes/Fixes #…","code":""},{"path":"/pull_request_template.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist","title":"NA","text":"R CMD CHECK successful Tests included Documentation included updated Commit messages follow commit guidelines new refactored algorithms: Include benchmarks (comparison previous version) Optional, recommended: Code passes lintr::lint_package() without errors","code":""},{"path":"/pull_request_template.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"NA","text":"Proposed changes:","code":""},{"path":[]},{"path":"/pull_request_template.html","id":"mentions-for-review","dir":"","previous_headings":"","what":"Mentions for review","title":"NA","text":"@mention1, @mention2","code":""},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"\\(\\alpha\\)-stable Lévy subordinator \\(0 < \\alpha < 1\\), corresponding Bernstein function power function exponent \\(\\alpha\\), .e. $$   \\psi(x) = x^\\alpha, \\quad x>0. $$","code":""},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"\\(\\alpha\\)-stable Bernstein function, higher order alternating iterated forward differences known closed form evaluated numerically without danger loss significance. can use numerical integration (: stats::integrate()) approximate following representation: $$   {(-1)}^{k-1} \\Delta^k \\psi(x)    = \\int_0^\\infty e^{-ux} (1-e^{-u})^k      \\alpha \\frac{1}{\\Gamma(1-\\alpha) u^{1+\\alpha}} du, x>0, k>0 . $$ Bernstein function . 1 list complete Bernstein functions Chp. 16 (Schilling et al. 2012) . \\(\\alpha\\)-stable Bernstein function Lévy density \\(\\nu\\): $$   \\nu(du)     = \\frac{\\alpha}{\\Gamma(1-\\alpha)} u^{-1 - \\alpha} , \\quad u > 0 , $$ Stieltjes density \\(\\sigma\\): $$   \\sigma(du)     = \\frac{\\sin(\\alpha \\pi)}{\\pi} u^{\\alpha - 1}, \\quad u > 0 . $$","code":""},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"alpha index \\(\\alpha\\).","code":""},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"Schilling RL, Song R, Vondracek Z (2012). Bernstein functions, 2 edition. De Gruyter. doi:10.1515/9783110269338 .","code":""},{"path":[]},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"","code":"# Create an object of class AlphaStableBernsteinFunction AlphaStableBernsteinFunction() #> An object of class \"AlphaStableBernsteinFunction\" #> \t (invalid or not initialized) AlphaStableBernsteinFunction(alpha = 0.5) #> An object of class \"AlphaStableBernsteinFunction\" #> - alpha: 0.5  # Create a Lévy density bf <- AlphaStableBernsteinFunction(alpha = 0.7) levy_density <- levyDensity(bf) integrate(   function(x) pmin(1, x) * levy_density(x),   lower = attr(levy_density, \"lower\"),   upper = attr(levy_density, \"upper\") ) #> 1.114243 with absolute error < 1.4e-05  # Create a Stieltjes density bf <- AlphaStableBernsteinFunction(alpha = 0.5) stieltjes_density <- stieltjesDensity(bf) integrate(   function(x) 1/(1 + x) * stieltjes_density(x),   lower = attr(stieltjes_density, \"lower\"),   upper = attr(stieltjes_density, \"upper\") ) #> 1 with absolute error < 8.4e-06  # Evaluate the Bernstein function bf <- AlphaStableBernsteinFunction(alpha = 0.3) valueOf(bf, 1:5) #> [1] 1.000000 1.231144 1.390389 1.515717 1.620657  # Calculate shock-arrival intensities bf <- AlphaStableBernsteinFunction(alpha = 0.8) intensities(bf, 3) #> [1] 0.66712356 0.66712356 0.07397757 0.66712356 0.07397757 0.07397757 0.18492131 intensities(bf, 3, method = \"stieltjes\") #> [1] 0.66712356 0.66712356 0.07397757 0.66712356 0.07397757 0.07397757 0.18492131 intensities(bf, 3, tolerance = 1e-4) #> [1] 0.66712356 0.66712356 0.07397757 0.66712356 0.07397757 0.07397757 0.18492130  # Calculate exchangeable shock-arrival intensities bf <- AlphaStableBernsteinFunction(alpha = 0.4) uexIntensities(bf, 3) #> [1] 0.23233766 0.08717025 0.59332184 uexIntensities(bf, 3, method = \"stieltjes\") #> [1] 0.23233766 0.08717025 0.59332184 uexIntensities(bf, 3, tolerance = 1e-4) #> [1] 0.23233766 0.08717027 0.59332185  # Calculate exchangeable shock-size arrival intensities bf <- AlphaStableBernsteinFunction(alpha = 0.2) exIntensities(bf, 3) #> [1] 0.2910978 0.1549973 0.7996359 exIntensities(bf, 3, method = \"stieltjes\") #> [1] 0.2910978 0.1549973 0.7996359 exIntensities(bf, 3, tolerance = 1e-4) #> [1] 0.2910978 0.1549974 0.7996358  # Calculate the Markov generator bf <- AlphaStableBernsteinFunction(alpha = 0.6) exQMatrix(bf, 3) #>           [,1]      [,2]       [,3]      [,4] #> [1,] -1.933182  1.252396  0.2947533 0.3860323 #> [2,]  0.000000 -1.515717  1.0314331 0.4842834 #> [3,]  0.000000  0.000000 -1.0000000 1.0000000 #> [4,]  0.000000  0.000000  0.0000000 0.0000000 exQMatrix(bf, 3, method = \"stieltjes\") #>           [,1]      [,2]       [,3]      [,4] #> [1,] -1.933182  1.252396  0.2947533 0.3860323 #> [2,]  0.000000 -1.515717  1.0314331 0.4842834 #> [3,]  0.000000  0.000000 -1.0000000 1.0000000 #> [4,]  0.000000  0.000000  0.0000000 0.0000000 exQMatrix(bf, 3, tolerance = 1e-4) #>           [,1]      [,2]       [,3]      [,4] #> [1,] -1.933182  1.252396  0.2947533 0.3860323 #> [2,]  0.000000 -1.515717  1.0314331 0.4842834 #> [3,]  0.000000  0.000000 -1.0000000 1.0000000 #> [4,]  0.000000  0.000000  0.0000000 0.0000000"},{"path":"/reference/BernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Virtual superclass for Bernstein function objects — BernsteinFunction-class","title":"Virtual superclass for Bernstein function objects — BernsteinFunction-class","text":"Bernstein functions parametrize extendible Marshall--Olkin distributions. closed addition, scalar multiplication, composite scalar multiplication, consequently also convex recombination: Pass Bernstein function object rextmo() simulate associated extendible MO distribution. Use SumOfBernsteinFunctions adding two Bernstein functions, Use ScaledBernsteinFunction scalar multiplication Bernstein function, Use CompositeScaledBernsteinFunction composite scalar multiplication Bernstein function, Use ConvexCombinationOfBernsteinFunctions convex recombination Bernstein functions.","code":""},{"path":[]},{"path":"/reference/BernsteinFunction-class.html","id":"mathematical-definition","dir":"Reference","previous_headings":"","what":"Mathematical definition","title":"Virtual superclass for Bernstein function objects — BernsteinFunction-class","text":"Bernstein function nonnegative, nondecreasing, infinitely often differentiable function whose recursive finite forward differences alternating signs: $$     {(-1)}^{-1} \\Delta^{}{ \\psi{(x)} }         \\geq 0 ,             \\quad \\forall  \\\\mathbb{N}, x \\geq 0 . $$","code":""},{"path":"/reference/BernsteinFunction-class.html","id":"l-vy-khintchine-representation","dir":"Reference","previous_headings":"","what":"Lévy-Khintchine representation","title":"Virtual superclass for Bernstein function objects — BernsteinFunction-class","text":"Bernstein functions -called Lévy-Khintchine representation: $$    \\psi{(x)}        = x + b          + \\int_{0}^{\\infty}{              {\\left[ 1 - e^{-x y} \\right]} {\\nu{(dy)}}            } ,          \\quad x \\geq 0 , $$ nonnegative constants \\(\\) \\(b\\) Lévy measure \\(\\nu\\). Lévy measure measure Borel sets nonnegative real line satisfies following properties: $$   \\int_{0}^{\\infty}{     \\min{\\{ 1 , y \\}} {\\nu{(dy)}} < \\infty .   } $$","code":""},{"path":"/reference/BernsteinFunction-class.html","id":"l-vy-frailty-model-and-ext-mo-distributions","dir":"Reference","previous_headings":"","what":"Lévy-frailty model and ext. MO distributions","title":"Virtual superclass for Bernstein function objects — BernsteinFunction-class","text":"Bernstein functions uniquely linked extendible Marshall--Olkin distributions via Lévy-frailty model. First, Bernstein functions uniquely linked Lévy subordinator via Lévy-Khintchine representation: $$   \\Lambda{(t)}     = \\begin{cases}       b t + \\Lambda_{\\nu}{(t)} , & \\text{} t < \\epsilon , \\\\       \\infty , & \\text{otherwise} ,     \\end{cases} $$ \\(\\Lambda_{\\nu}{(t)}\\) Lévy subordinator associated Lévy measure \\(\\nu\\) \\(\\epsilon\\) independently exponentially distributed random variable rate \\(\\). \\(\\nu\\) finite measure, Lévy subordinator compound Poisson process intensity \\(\\nu{(0, \\infty)}\\) jump sizes \\(\\nu{(dy)} / \\nu{((0, \\infty))} \\). Second, Lévy subordinator unique linked extendible Marshall--Olkin distribution via stochastic representation: $$   \\tau_{}     = \\inf{\\left \\{ t \\geq 0 : \\Lambda{(t)} > E_{} \\right \\}} ,       \\quad 1 \\leq \\leq d , $$ independently unit exponentially distributed random variables \\(E_{}\\).","code":""},{"path":"/reference/BernsteinFunction-class.html","id":"ext-mo-parameter-interpretation","dir":"Reference","previous_headings":"","what":"Ext. MO parameter interpretation","title":"Virtual superclass for Bernstein function objects — BernsteinFunction-class","text":"Lévy-frailty model motivates following interpretation parameters ext. MO distributions: killing rate, b drift, gamma scaling factor total shock-arrival intensity, family name pure-jump Lévy measure, eta pure-jump family parameters. understand influence parameters extendible Marshall–Olkin distribution's dependence properties, following considerations helpful: pure-killing Bernstein function (.e., \\(> 0\\), \\(b = 0\\), \\(\\nu \\equiv 0\\)) corresponds complete comononotonicity. pure-drift Bernstein function (.e., \\(= 0\\), \\(b > 0\\), \\(\\nu \\equiv 0\\)) corresponds independence. pure-jump Bernstein function (.e., \\(= 0\\), \\(b = 0\\), \\(\\nu \\\\equiv 0\\)) can model various dependence structures. However, larger jump intensities lead weaker dependendence larger jump sizes lead stronger dependence. Consequently, weighting cases parameters , b, gamma allows flexible modeling dependence structure.","code":""},{"path":"/reference/BernsteinFunction-class.html","id":"ext-mo-marginal-and-dependence-properties","dir":"Reference","previous_headings":"","what":"Ext.MO marginal and dependence properties","title":"Virtual superclass for Bernstein function objects — BernsteinFunction-class","text":"given Bernstein function, marginal rate lower-tail dependence coefficient associated extendible Marshall–Olkin distribution can calculated using follows: $$   \\text{Marginal rate}     = \\psi{(1)} $$ $$   \\text{LTDC}     = 2 - \\psi{(2)} / \\psi{(1)} . $$","code":""},{"path":"/reference/BernsteinFunction-class.html","id":"evaluating-bernstein-functions","dir":"Reference","previous_headings":"","what":"Evaluating Bernstein functions","title":"Virtual superclass for Bernstein function objects — BernsteinFunction-class","text":"context extendible Marshall--Olkin distributions, following expression frequently evaluated: $$   \\binom{n}{k} {(-1)}^{j-1} \\Delta^{j}{ \\psi{( c x )} } ,     \\quad 0 \\leq k \\leq n , j \\\\mathbb{N}, x \\geq 0 . $$ evaluation Bernstein functions using formula usually numerically stable. Consequently, various alternative approaches used dependent class Bernstein function. Use method valueOf() evaluate approximate expression given Bernstein function.","code":""},{"path":"/reference/BernsteinFunction-class.html","id":"exchangeable-marshall-olkin-distributions","dir":"Reference","previous_headings":"","what":"Exchangeable Marshall–Olkin distributions","title":"Virtual superclass for Bernstein function objects — BernsteinFunction-class","text":"alternative stochastic representation exchangeable Marshall–Olkin distributions given -called Markovian death-counting model. defines components' death times randomized order statistics simulated via Markovian death-counting processes infinitesimal generator matrix: $$   q_{, j}^\\ast     = \\binom{d-}{j-} \\begin{cases}       -\\psi{(d-)} , & \\text{} = j , \\\\       {(-1)}^{j--1} \\Delta^{j-}{ \\psi{(d-)} } , & \\text{} < j , \\\\       0 , & \\text{otherwise} .    \\end{cases} $$ evaluation infinitesimal generator matrix using formula usually numerically stable. Consequently, various alternative approaches used dependent class Bernstein function. Use method exQMatrix() evaluate approximate expression given Bernstein function. -alive-state, generator's first row interpretation exchangeable shock-size-arrival intensities: $$   \\eta_{}     = \\binom{d}{} {(-1)}^{-1} \\Delta^{}{ \\psi{(d-)} } ,          \\quad 1 \\leq \\leq d . $$ noted , evaluation usually numerically stable, various alternative approaches used dependent class Bernstein function. Use method exIntensities() evaluate approximate .","code":""},{"path":"/reference/BernsteinFunction-class.html","id":"the-exogeneous-shock-model-and-the-arnold-model","dir":"Reference","previous_headings":"","what":"The Exogeneous shock model and the Arnold model","title":"Virtual superclass for Bernstein function objects — BernsteinFunction-class","text":"Another alternative stochastic representation Marshall–Olkin distributions ","code":""},{"path":"/reference/BernsteinFunction-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Virtual superclass for Bernstein function objects — BernsteinFunction-class","text":"Schilling RL, Song R, Vondracek Z (2012). Bernstein functions, 2 edition. De Gruyter. doi:10.1515/9783110269338 .  Sloot H (2022). “Implementing Markovian models extendible Marshall–Olkin distributions.” Dependence Modeling, 10(1), 308--343. doi:10.1515/demo-2022-0151 , https://doi.org/doi:10.1515/demo-2022-0151.","code":""},{"path":[]},{"path":"/reference/CompleteBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Virtual superclass for complete Bernstein functions — CompleteBernsteinFunction-class","title":"Virtual superclass for complete Bernstein functions — CompleteBernsteinFunction-class","text":"virtual superclass Bernstein functions can represented Stieltjes density (drift killing rate). means exists Stieltjes measure \\(\\sigma\\) $$   \\psi(x) = \\int_0^\\infty \\frac{x}{x + u} \\sigma(du) , x > 0 . $$","code":""},{"path":[]},{"path":"/reference/CompleteBernsteinFunction-class.html","id":"evaluation-of-complete-bernstein-functions","dir":"Reference","previous_headings":"","what":"Evaluation of Complete Bernstein functions","title":"Virtual superclass for complete Bernstein functions — CompleteBernsteinFunction-class","text":"continuous Stieltjes densities, values Bernstein function calculated stats::integrate() using representation $$   \\psi(x)     = \\int_{0}^{\\infty} x \\mathrm{Beta}(1, x + u) \\sigma(du), \\quad x > 0 , $$ values iterated differences calculated using representation $$   (-1)^{j-1} \\Delta^{j} \\psi(x)     = \\int_{0}^{\\infty} u \\mathrm{Beta}(j+1, x + u) \\sigma(du) ,     \\quad x > 0 . $$ discrete Lévy densities \\(\\sigma(du) = \\sum_{} y_i \\delta_{u_i}(du)\\), values Bernstein function calculated using representation $$   \\psi(x)     = \\sum_{} x \\mathrm{Beta}(1, x + u_i) y_i, \\quad x > 0 , $$ values iterated differences calculated using representation $$   (-1)^{j-1} \\Delta^{j} \\psi(x)     = \\sum_{} u_i \\mathrm{Beta}(j+1, x + u_i) y_i ,     \\quad x > 0 . $$","code":""},{"path":[]},{"path":"/reference/CompositeScaledBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for composite scaled Bernstein functions — CompositeScaledBernsteinFunction-class","title":"Class for composite scaled Bernstein functions — CompositeScaledBernsteinFunction-class","text":"Bernstein functions stable composition, .e. \\(\\psi\\) Bernstein function c > 0, $$   x \\mapsto \\psi(c x) $$ also Bernstein function.","code":""},{"path":"/reference/CompositeScaledBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for composite scaled Bernstein functions — CompositeScaledBernsteinFunction-class","text":"cscale scale inner linear Bernstein function composition. original original Bernstein function.","code":""},{"path":[]},{"path":"/reference/CompositeScaledBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for composite scaled Bernstein functions — CompositeScaledBernsteinFunction-class","text":"","code":"# Create an object of class CompositeScaleBernsteinFunction CompositeScaledBernsteinFunction() #> An object of class \"CompositeScaledBernsteinFunction\" #> \t (invalid or not initialized) CompositeScaledBernsteinFunction(   cscale = 0.5,   original = AlphaStableBernsteinFunction(0.5) ) #> An object of class \"CompositeScaledBernsteinFunction\" #> - cscale: 0.5 #> - original: #> \tAn object of class \"AlphaStableBernsteinFunction\" #> \t- alpha: 0.5"},{"path":"/reference/ConstantBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for (almost) constant Bernstein functions — ConstantBernsteinFunction-class","title":"Class for (almost) constant Bernstein functions — ConstantBernsteinFunction-class","text":"constant Bernstein function Bernstein function constant part (\\(x > 0\\)), .e., \\(b = 0\\) \\(\\nu = 0\\). particular, $$   \\psi(x) = , x > 0 $$","code":""},{"path":"/reference/ConstantBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for (almost) constant Bernstein functions — ConstantBernsteinFunction-class","text":"constant nonnegative killing parameter (.e., \\(\\) representation)","code":""},{"path":[]},{"path":"/reference/ConstantBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for (almost) constant Bernstein functions — ConstantBernsteinFunction-class","text":"","code":"# Create an object of class ConstantBernsteinFunction ConstantBernsteinFunction() #> An object of class \"ConstantBernsteinFunction\" #> \t (invalid or not initialized) ConstantBernsteinFunction(constant = 0.2) #> An object of class \"ConstantBernsteinFunction\" #> - constant: 0.2  # Evaluate the Bernstein function bf <- ConstantBernsteinFunction(constant = 0.3) valueOf(bf, 1:5) #> [1] 0.3 0.3 0.3 0.3 0.3  # Calculate shock-arrival intensities bf <- ConstantBernsteinFunction(constant = 0.8) intensities(bf, 3) #> [1] 0.0 0.0 0.0 0.0 0.0 0.0 0.8  # Calculate exchangeable shock-arrival intensities bf <- ConstantBernsteinFunction(constant = 0.4) uexIntensities(bf, 3) #> [1] 0.0 0.0 0.4  # Calculate exchangeable shock-size arrival intensities bf <- ConstantBernsteinFunction(constant = 0.2) exIntensities(bf, 3) #> [1] 0.0 0.0 0.2  # Calculate the Markov generator bf <- ConstantBernsteinFunction(constant = 0.6) exQMatrix(bf, 3) #>      [,1] [,2] [,3] [,4] #> [1,] -0.6  0.0  0.0  0.6 #> [2,]  0.0 -0.6  0.0  0.6 #> [3,]  0.0  0.0 -0.6  0.6 #> [4,]  0.0  0.0  0.0  0.0"},{"path":"/reference/ConvexCombinationOfBernsteinFunctions-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for convex combinations of Bernstein functions — ConvexCombinationOfBernsteinFunctions-class","title":"Class for convex combinations of Bernstein functions — ConvexCombinationOfBernsteinFunctions-class","text":"Bernstein functions stable convex combinations, .e. \\(\\psi_1, \\ldots, \\psi_n\\) Bernstein functions \\(c_1, \\ldots, c_n > 0\\) positive real values, $$   x \\mapsto c_1 \\psi_1(x) + \\cdots + c_n \\psi_n(x) , x>0, $$ also Bernstein function.","code":""},{"path":"/reference/ConvexCombinationOfBernsteinFunctions-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for convex combinations of Bernstein functions — ConvexCombinationOfBernsteinFunctions-class","text":"coefficients Numeric vector positive real values. points List Bernstein functions.","code":""},{"path":[]},{"path":"/reference/ConvexCombinationOfBernsteinFunctions-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for convex combinations of Bernstein functions — ConvexCombinationOfBernsteinFunctions-class","text":"","code":"# Create an object of class ConvexCombinationOfBernsteinFunctions ConvexCombinationOfBernsteinFunctions() #> An object of class \"ConvexCombinationOfBernsteinFunctions\" #> \t (invalid or not initialized) ConvexCombinationOfBernsteinFunctions(   coefficients = c(0.2, 0.5, 0.1),   points = list(     LinearBernsteinFunction(scale = 0.2),     ConstantBernsteinFunction(constant = 0.5),     AlphaStableBernsteinFunction(alpha = 0.5)) ) #> An object of class \"ConvexCombinationOfBernsteinFunctions\" #> - coefficient: 0.2 #> - point: #> \tAn object of class \"LinearBernsteinFunction\" #> \t- scale: 0.2 #> - coefficient: 0.5 #> - point: #> \tAn object of class \"ConstantBernsteinFunction\" #> \t- constant: 0.5 #> - coefficient: 0.1 #> - point: #> \tAn object of class \"AlphaStableBernsteinFunction\" #> \t- alpha: 0.5"},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"Exponential-jump compound Poisson subordinator \\(\\lambda > 0\\), corresponding Bernstein function $$   \\psi(x) = \\frac{x}{x + \\lambda}, x>0. $$","code":""},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"Exponential jump CPP Bernstein function, higher order alternating iterated forward differences known closed form: $$   {(-1)}^{k-1} \\Delta^k \\psi(x)    = \\lambda \\cdot B(k+1, x+\\lambda), x>0, k>0 . $$ Bernstein function . 4 list complete Bernstein functions Chp. 16 (Schilling et al. 2012) . Exponential Bernstein function Lévy density \\(\\nu\\): $$   \\nu(du)     = \\lambda \\operatorname{e}^{-\\lambda u}, \\quad u > 0 , $$ (discrete) Stieltjes density \\(\\sigma\\): $$   \\sigma(du)     = \\delta_{\\{ \\lambda \\}}(du), \\quad u > 0 . $$","code":""},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"lambda index \\(\\lambda\\).","code":""},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"Schilling RL, Song R, Vondracek Z (2012). Bernstein functions, 2 edition. De Gruyter. doi:10.1515/9783110269338 .","code":""},{"path":[]},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"","code":"# Create an object of class ExponentialBernsteinFunction ExponentialBernsteinFunction() #> An object of class \"ExponentialBernsteinFunction\" #> \t (invalid or not initialized) ExponentialBernsteinFunction(lambda = 0.5) #> An object of class \"ExponentialBernsteinFunction\" #> - lambda: 0.5  # Create a Lévy density bf <- ExponentialBernsteinFunction(lambda = 0.7) levy_density <- levyDensity(bf) integrate(   function(x) pmin(1, x) * levy_density(x),   lower = attr(levy_density, \"lower\"),   upper = attr(levy_density, \"upper\") ) #> 0.7191639 with absolute error < 4.4e-06  # Create a Stieltjes density bf <- ExponentialBernsteinFunction(lambda = 0.5) stieltjes_density <- stieltjesDensity(bf) sum(stieltjes_density$y * 1/(1 + stieltjes_density$x)) #> [1] 0.6666667  # Evaluate the Bernstein function bf <- ExponentialBernsteinFunction(lambda = 0.3) valueOf(bf, 1:5) #> [1] 0.7692308 0.8695652 0.9090909 0.9302326 0.9433962  # Calculate shock-arrival intensities bf <- ExponentialBernsteinFunction(lambda = 0.8) intensities(bf, 3) #> [1] 0.07518797 0.07518797 0.08354219 0.07518797 0.08354219 0.08354219 0.31328321 intensities(bf, 3, method = \"levy\") #> [1] 0.07518797 0.07518797 0.08354219 0.07518797 0.08354219 0.08354219 0.31328321 intensities(bf, 3, tolerance = 1e-4) #> [1] 0.07518797 0.07518797 0.08354219 0.07518797 0.08354219 0.08354219 0.31328321  # Calculate exchangeable shock-arrival intensities bf <- ExponentialBernsteinFunction(lambda = 0.4) uexIntensities(bf, 3) #> [1] 0.04901961 0.07002801 0.52521008 uexIntensities(bf, 3, method = \"levy\") #> [1] 0.04901961 0.07002801 0.52521008 uexIntensities(bf, 3, tolerance = 1e-4) #> [1] 0.04901961 0.07002801 0.52521008  # Calculate exchangeable shock-size arrival intensities bf <- ExponentialBernsteinFunction(lambda = 0.2) exIntensities(bf, 3) #> [1] 0.08522727 0.14204545 0.71022727 exIntensities(bf, 3, method = \"levy\") #> [1] 0.08522727 0.14204545 0.71022727 exIntensities(bf, 3, tolerance = 1e-4) #> [1] 0.08522727 0.14204545 0.71022727  # Calculate the Markov generator bf <- ExponentialBernsteinFunction(lambda = 0.6) exQMatrix(bf, 3) #>            [,1]       [,2]       [,3]      [,4] #> [1,] -0.8333333  0.1923077  0.2403846 0.4006410 #> [2,]  0.0000000 -0.7692308  0.2884615 0.4807692 #> [3,]  0.0000000  0.0000000 -0.6250000 0.6250000 #> [4,]  0.0000000  0.0000000  0.0000000 0.0000000 exQMatrix(bf, 3, method = \"levy\") #>            [,1]       [,2]       [,3]      [,4] #> [1,] -0.8333333  0.1923077  0.2403846 0.4006410 #> [2,]  0.0000000 -0.7692308  0.2884615 0.4807692 #> [3,]  0.0000000  0.0000000 -0.6250000 0.6250000 #> [4,]  0.0000000  0.0000000  0.0000000 0.0000000 exQMatrix(bf, 3, tolerance = 1e-4) #>            [,1]       [,2]       [,3]      [,4] #> [1,] -0.8333333  0.1923077  0.2403846 0.4006410 #> [2,]  0.0000000 -0.7692308  0.2884615 0.4807692 #> [3,]  0.0000000  0.0000000 -0.6250000 0.6250000 #> [4,]  0.0000000  0.0000000  0.0000000 0.0000000"},{"path":"/reference/GammaBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"Gamma Bernstein function, Bernstein function subordinator (scaled) Gamma distribution. representation \\(> 0\\) $$   \\psi(x) = \\log(1 + \\frac{x}{}), x > 0. $$","code":""},{"path":"/reference/GammaBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"Bernstein function, higher-order alternating iterated forward differences known closed form evaluated numerically without danger loss significance. can use numerical integration (: stats::integrate()) approximate following representation: $$   {(-1)}^{k-1} \\Delta^{k} \\psi(x)     = \\int_{0}^{\\infty} e^{-ux} {(1 - e^{-u})}^{k}       \\frac{e^{-au}}{u} du, x>0, k>0. $$ Bernstein function . 26 list complete Bernstein functions Chp. 16 (Schilling et al. 2012) . Gamma Bernstein function Lévy density \\(\\nu\\): $$   \\nu(du)     = \\frac{\\operatorname{e}^{-u}}{u}, \\quad u > 0 , $$ Stieltjes density \\(\\sigma\\): $$   \\sigma(du)     = u^{-1} du, u > . $$","code":""},{"path":"/reference/GammaBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"Scale parameter Lévy measure.","code":""},{"path":"/reference/GammaBernsteinFunction-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"Schilling RL, Song R, Vondracek Z (2012). Bernstein functions, 2 edition. De Gruyter. doi:10.1515/9783110269338 .","code":""},{"path":[]},{"path":"/reference/GammaBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"","code":"# Create an object of class GammaBernsteinFunction GammaBernsteinFunction() #> An object of class \"GammaBernsteinFunction\" #> \t (invalid or not initialized) GammaBernsteinFunction(a = 2) #> An object of class \"GammaBernsteinFunction\" #> - a: 2  # Create a Lévy density bf <- GammaBernsteinFunction(a = 0.7) levy_density <- levyDensity(bf) integrate(   function(x) pmin(1, x) * levy_density(x),   lower = attr(levy_density, \"lower\"),   upper = attr(levy_density, \"upper\") ) #> 1.092933 with absolute error < 3.1e-05  # Create a Stieltjes density bf <- GammaBernsteinFunction(a = 0.5) stieltjes_density <- stieltjesDensity(bf) integrate(   function(x) 1/(1 + x) * stieltjes_density(x),   lower = attr(stieltjes_density, \"lower\"),   upper = attr(stieltjes_density, \"upper\") ) #> 1.098612 with absolute error < 8.9e-13  # Evaluate the Bernstein function bf <- GammaBernsteinFunction(a = 0.3) valueOf(bf, 1:5) #> [1] 1.466337 2.036882 2.397895 2.662588 2.871680  # Calculate shock-arrival intensities bf <- GammaBernsteinFunction(a = 0.8) intensities(bf, 3) #> [1] 0.3053816 0.3053816 0.1364511 0.3053816 0.1364511 0.1364511 0.2326464 intensities(bf, 3, method = \"stieltjes\") #> [1] 0.3053816 0.3053816 0.1364511 0.3053816 0.1364511 0.1364511 0.2326464 intensities(bf, 3, tolerance = 1e-4) #> [1] 0.3053816 0.3053816 0.1364511 0.3053816 0.1364511 0.1364511 0.2326464  # Calculate exchangeable shock-arrival intensities bf <- GammaBernsteinFunction(a = 0.4) uexIntensities(bf, 3) #> [1] 0.3483067 0.1906898 0.5230767 uexIntensities(bf, 3, method = \"stieltjes\") #> [1] 0.3483067 0.1906898 0.5230767 uexIntensities(bf, 3, tolerance = 1e-4) #> [1] 0.3483067 0.1906898 0.5230767  # Calculate exchangeable shock-size arrival intensities bf <- GammaBernsteinFunction(a = 0.2) exIntensities(bf, 3) #> [1] 1.1240803 0.6943271 0.9541813 exIntensities(bf, 3, method = \"stieltjes\") #> [1] 1.1240803 0.6943271 0.9541813 exIntensities(bf, 3, tolerance = 1e-4) #> [1] 1.1240803 0.6943271 0.9541813  # Calculate the Markov generator bf <- GammaBernsteinFunction(a = 0.6) exQMatrix(bf, 3) #>           [,1]       [,2]       [,3]      [,4] #> [1,] -1.791759  0.9762672  0.4802562 0.3352360 #> [2,]  0.000000 -1.4663371  0.9710156 0.4953214 #> [3,]  0.000000  0.0000000 -0.9808293 0.9808293 #> [4,]  0.000000  0.0000000  0.0000000 0.0000000 exQMatrix(bf, 3, method = \"stieltjes\") #>           [,1]       [,2]       [,3]      [,4] #> [1,] -1.791759  0.9762672  0.4802562 0.3352360 #> [2,]  0.000000 -1.4663371  0.9710156 0.4953214 #> [3,]  0.000000  0.0000000 -0.9808293 0.9808293 #> [4,]  0.000000  0.0000000  0.0000000 0.0000000 exQMatrix(bf, 3, tolerance = 1e-4) #>           [,1]       [,2]       [,3]      [,4] #> [1,] -1.791759  0.9762672  0.4802562 0.3352360 #> [2,]  0.000000 -1.4663371  0.9710156 0.4953214 #> [3,]  0.000000  0.0000000 -0.9808293 0.9808293 #> [4,]  0.000000  0.0000000  0.0000000 0.0000000"},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"inverse Gaussian Lévy subordinator \\(\\eta > 0\\), corresponding Bernstein function function $$   \\psi(x) = \\sqrt{2x + \\eta^2} - \\eta, x>0. $$","code":""},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"inverse Gaussian Bernstein function, higher-order alternating iterated forward differences known closed-form, can use numerical integration (: stats::integrate()) approximate following representation: $$  {(-1)}^{k-1} \\Delta^{k} \\psi(x)    = \\int_0^\\infty e^{-ux} (1-e^{-u})^k \\frac{1}{\\sqrt{2\\pi}      u^{3/2}} e^{-\\frac{1}{2}\\eta^2 u} du, x>0, k>0. $$ Bernstein function can found p. 309 (Mai Scherer 2017) . Furthermore  transformation . 2 list complete Bernstein functions Chp. 16 (Schilling et al. 2012) . inverse Gaussian Bernstein function Lévy density \\(\\nu\\): $$   \\nu(du)     = \\frac{1}{\\sqrt{2 \\pi u^3}} \\operatorname{e}^{-\\frac{1}{2} \\eta^2 u} ,     \\quad u > 0 , $$ Stieltjes density \\(\\sigma\\): $$   \\sigma(du)     = \\frac{         \\sin(\\pi / 2)       }{         \\pi       } \\cdot \\frac{         \\sqrt{2 x - \\eta^2}       }{         x       } ,       \\quad u > \\eta^2 / 2 . $$","code":""},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"eta distribution parameter (drift underlying Gaussian process).","code":""},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"Mai J, Scherer M (2017). Simulating copulas: stochastic models, sampling algorithms applications,  Series Quantitative Finance, 2 edition. World Scientific. doi:10.1142/10265 . Schilling RL, Song R, Vondracek Z (2012). Bernstein functions, 2 edition. De Gruyter. doi:10.1515/9783110269338 .","code":""},{"path":[]},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"","code":"# Create an object of class InverseGaussianBernsteinFunction InverseGaussianBernsteinFunction() #> An object of class \"InverseGaussianBernsteinFunction\" #> \t (invalid or not initialized) InverseGaussianBernsteinFunction(eta = 0.3) #> An object of class \"InverseGaussianBernsteinFunction\" #> - eta: 0.3  # Create a Lévy density bf <- InverseGaussianBernsteinFunction(eta = 0.7) levy_density <- levyDensity(bf) integrate(   function(x) pmin(1, x) * levy_density(x),   lower = attr(levy_density, \"lower\"),   upper = attr(levy_density, \"upper\") ) #> 1.023005 with absolute error < 9.2e-06  # Create a Stieltjes density bf <- InverseGaussianBernsteinFunction(eta = 0.5) stieltjes_density <- stieltjesDensity(bf) integrate(   function(x) 1/(1 + x) * stieltjes_density(x),   lower = attr(stieltjes_density, \"lower\"),   upper = attr(stieltjes_density, \"upper\") ) #> 1 with absolute error < 9e-05  # Evaluate the Bernstein function bf <- InverseGaussianBernsteinFunction(eta = 0.3) valueOf(bf, 1:5) #> [1] 1.145683 1.722375 2.167793 2.544293 2.876476  # Calculate shock-arrival intensities bf <- InverseGaussianBernsteinFunction(eta = 0.8) intensities(bf, 3) #> [1] 0.4227538 0.4227538 0.1065044 0.4227538 0.1065044 0.1065044 0.1890450 intensities(bf, 3, method = \"stieltjes\") #> [1] 0.4227538 0.4227538 0.1065044 0.4227538 0.1065044 0.1065044 0.1890450 intensities(bf, 3, tolerance = 1e-4) #> [1] 0.4227538 0.4227538 0.1065044 0.4227538 0.1065044 0.1065044 0.1890450  # Calculate exchangeable shock-arrival intensities bf <- InverseGaussianBernsteinFunction(eta = 0.4) uexIntensities(bf, 3) #> [1] 0.4423269 0.1275870 0.3721928 uexIntensities(bf, 3, method = \"stieltjes\") #> [1] 0.4423269 0.1275870 0.3721928 uexIntensities(bf, 3, tolerance = 1e-4) #> [1] 0.4423269 0.1275871 0.3721929  # Calculate exchangeable shock-size arrival intensities bf <- InverseGaussianBernsteinFunction(eta = 0.2) exIntensities(bf, 3) #> [1] 1.3429981 0.4020703 0.5125728 exIntensities(bf, 3, method = \"stieltjes\") #> [1] 1.3429981 0.4020703 0.5125728 exIntensities(bf, 3, tolerance = 1e-4) #> [1] 1.3429981 0.4020703 0.5125728  # Calculate the Markov generator bf <- InverseGaussianBernsteinFunction(eta = 0.6) exQMatrix(bf, 3) #>           [,1]      [,2]       [,3]      [,4] #> [1,] -1.921904  1.301528  0.3539682 0.2664076 #> [2,]  0.000000 -1.488061  1.1036643 0.3843970 #> [3,]  0.000000  0.000000 -0.9362291 0.9362291 #> [4,]  0.000000  0.000000  0.0000000 0.0000000 exQMatrix(bf, 3, method = \"stieltjes\") #>           [,1]      [,2]       [,3]      [,4] #> [1,] -1.921904  1.301528  0.3539682 0.2664076 #> [2,]  0.000000 -1.488061  1.1036643 0.3843970 #> [3,]  0.000000  0.000000 -0.9362291 0.9362291 #> [4,]  0.000000  0.000000  0.0000000 0.0000000 exQMatrix(bf, 3, tolerance = 1e-4) #>           [,1]      [,2]       [,3]      [,4] #> [1,] -1.921904  1.301528  0.3539682 0.2664076 #> [2,]  0.000000 -1.488061  1.1036643 0.3843970 #> [3,]  0.000000  0.000000 -0.9362291 0.9362291 #> [4,]  0.000000  0.000000  0.0000000 0.0000000"},{"path":"/reference/LevyBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Virtual superclass for Bernstein functions with nonzero Lévy density — LevyBernsteinFunction-class","title":"Virtual superclass for Bernstein functions with nonzero Lévy density — LevyBernsteinFunction-class","text":"virtual superclass Bernstein functions can represented Lévy density (drift killing rate). means exists Lévy measure \\(\\nu\\) $$   \\psi(x) = \\int_0^\\infty (1 - e^{-ux}) \\nu(du) , x > 0 . $$","code":""},{"path":[]},{"path":"/reference/LevyBernsteinFunction-class.html","id":"evaluation-of-bernstein-functions-with-l-vy-densities","dir":"Reference","previous_headings":"","what":"Evaluation of Bernstein functions with Lévy densities","title":"Virtual superclass for Bernstein functions with nonzero Lévy density — LevyBernsteinFunction-class","text":"continuous Lévy densities, values Bernstein function calculated stats::integrate() using representation $$   \\psi(x)     = \\int_{0}^{\\infty} (1 - \\operatorname{e}^{-ux}) \\nu(du), \\quad x > 0 , $$ values iterated differences calculated using representation $$   (-1)^{j-1} \\Delta^{j} \\psi(x)     = \\int_{0}^{\\infty}       \\operatorname{e}^{-ux} (1 - \\operatorname{e}^{-u})^j \\nu(du) ,     \\quad x > 0 . $$ discrete Lévy densities \\(\\nu(du) = \\sum_{} y_i \\delta_{u_i}(du)\\), values Bernstein function calculated using representation $$   \\psi(x)     = \\sum_{} (1 - \\operatorname{e}^{-u_i x}) y_i, \\quad x > 0 , $$ values iterated differences calculated using representation $$   (-1)^{j-1} \\Delta^{j} \\psi(x)     = \\sum_{} \\operatorname{e}^{-u_i x} (1 - \\operatorname{e}^{-u_i})^j y_i,     \\quad x > 0 . $$","code":""},{"path":[]},{"path":"/reference/LinearBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for linear Bernstein functions — LinearBernsteinFunction-class","title":"Class for linear Bernstein functions — LinearBernsteinFunction-class","text":"linear Bernstein function Bernstein function drift, .e., \\(= 0\\) \\(\\nu = 0\\). particular, $$  \\psi(x) = b x, x > 0. $$","code":""},{"path":"/reference/LinearBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for linear Bernstein functions — LinearBernsteinFunction-class","text":"scale nonnegative drift parameter (.e. \\(b\\) representation).","code":""},{"path":[]},{"path":"/reference/LinearBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for linear Bernstein functions — LinearBernsteinFunction-class","text":"","code":"# Create an object of class LinearBernsteinFunction LinearBernsteinFunction() #> An object of class \"LinearBernsteinFunction\" #> \t (invalid or not initialized) LinearBernsteinFunction(scale = 0.2) #> An object of class \"LinearBernsteinFunction\" #> - scale: 0.2  # Evaluate the Bernstein function bf <- LinearBernsteinFunction(scale = 0.3) valueOf(bf, 1:5) #> [1] 0.3 0.6 0.9 1.2 1.5  # Calculate shock-arrival intensities bf <- LinearBernsteinFunction(scale = 0.8) intensities(bf, 3) #> [1] 0.8 0.8 0.0 0.8 0.0 0.0 0.0  # Calculate exchangeable shock-arrival intensities bf <- LinearBernsteinFunction(scale = 0.4) uexIntensities(bf, 3) #> [1] 0.4 0.0 0.0  # Calculate exchangeable shock-size arrival intensities bf <- LinearBernsteinFunction(scale = 0.2) exIntensities(bf, 3) #> [1] 0.6 0.0 0.0  # Calculate the Markov generator bf <- LinearBernsteinFunction(scale = 0.6) exQMatrix(bf, 3) #>      [,1] [,2] [,3]         [,4] #> [1,] -1.8  1.8  0.0 2.220446e-16 #> [2,]  0.0 -1.2  1.2 2.220446e-16 #> [3,]  0.0  0.0 -0.6 6.000000e-01 #> [4,]  0.0  0.0  0.0 0.000000e+00"},{"path":"/reference/ParetoBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":"Pareto-jump compound Poisson process index \\(0 < \\alpha < 1\\) cutoff point \\(x0\\), corresponding Bernstein function $$   \\psi(x)   = 1 - e^{-x x_0} + (x_0 x)^\\alpha \\Gamma(1-\\alpha, x_0 x) ,   x>0 . $$","code":""},{"path":"/reference/ParetoBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":"Bernstein function, higher-order alternating iterated forward differences known closed form evaluated numerically without danger loss significance. can use numerical integration (: stats::integrate()) approximate following representation: $$   {(-1)}^{k-1} \\Delta^k \\psi(x)   = \\int_{x_0}^\\infty e^{-ux} (1-e^{-u})^k   \\alpha \\frac{{x_0}^\\alpha}{t^{1+\\alpha}} du,   x>0, k>0 . $$ Pareto Bernstein function Lévy density \\(\\nu\\): $$   \\nu(du)     = \\alpha \\frac{x_0^\\alpha}{u^{\\alpha + 1}}, \\quad u > x_0 . $$ Pareto Bernstein function, combination linear Bernstein function can used approximate Bernstein function \\(\\alpha\\)-stable subordinator, see Sec. 5.3 (Loroño 2015) .","code":""},{"path":"/reference/ParetoBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":"alpha index \\(\\alpha\\) x0 cutoff point \\(x_0\\)","code":""},{"path":"/reference/ParetoBernsteinFunction-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":"Loroño LF (2015). Selected topics financial engineering: first-exit times dependence structures Marshall-Olkin Kind. Ph.D. thesis, University Basque Country.","code":""},{"path":[]},{"path":"/reference/ParetoBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":"","code":"# Create an object of class ParetoBernsteinFunction ParetoBernsteinFunction() #> An object of class \"ParetoBernsteinFunction\" #> \t (invalid or not initialized) ParetoBernsteinFunction(alpha = 0.2, x0 = 1e-2) #> An object of class \"ParetoBernsteinFunction\" #> - alpha: 0.2 #> - x0: 0.01  # Create a Lévy density bf <- ParetoBernsteinFunction(alpha = 0.7, x0 = 1e-2) levy_density <- levyDensity(bf) integrate(   function(x) pmin(1, x) * levy_density(x),   lower = attr(levy_density, \"lower\"),   upper = attr(levy_density, \"upper\") ) #> 0.1093688 with absolute error < 7.4e-05  # Evaluate the Bernstein function bf <- ParetoBernsteinFunction(alpha = 0.3, x0 = 1) valueOf(bf, 1:5) #> [1] 0.9421122 0.9865239 0.9963303 0.9989241 0.9996704  # Calculate shock-arrival intensities bf <- ParetoBernsteinFunction(alpha = 0.8, x0 = 1e-2) intensities(bf, 3) #> [1] 0.03709606 0.03709606 0.00846491 0.03709606 0.00846491 0.00846491 0.02132417 intensities(bf, 3, tolerance = 1e-4) #> [1] 0.037096063 0.037096063 0.008464909 0.037096063 0.008464909 0.008464909 #> [7] 0.021324170  # Calculate exchangeable shock-arrival intensities bf <- ParetoBernsteinFunction(alpha = 0.4, x0 = 1e-2) uexIntensities(bf, 3) #> [1] 0.04823193 0.02054932 0.14003630 uexIntensities(bf, 3, tolerance = 1e-4) #> [1] 0.04823193 0.02054932 0.14003630  # Calculate exchangeable shock-size arrival intensities bf <- ParetoBernsteinFunction(alpha = 0.2, x0 = 1e-2) exIntensities(bf, 3) #> [1] 0.12750303 0.07180652 0.37062172 exIntensities(bf, 3, tolerance = 1e-4) #> [1] 0.12750303 0.07180651 0.37062172  # Calculate the Markov generator bf <- ParetoBernsteinFunction(alpha = 0.6, x0 = 1e-2) exQMatrix(bf, 3) #>            [,1]       [,2]        [,3]       [,4] #> [1,] -0.2257529  0.1306000  0.04112552 0.05402745 #> [2,]  0.0000000 -0.1822196  0.11448366 0.06773596 #> [3,]  0.0000000  0.0000000 -0.12497779 0.12497779 #> [4,]  0.0000000  0.0000000  0.00000000 0.00000000 exQMatrix(bf, 3, tolerance = 1e-4) #>            [,1]       [,2]        [,3]       [,4] #> [1,] -0.2257529  0.1306000  0.04112552 0.05402745 #> [2,]  0.0000000 -0.1822196  0.11448366 0.06773596 #> [3,]  0.0000000  0.0000000 -0.12497779 0.12497779 #> [4,]  0.0000000  0.0000000  0.00000000 0.00000000"},{"path":"/reference/PoissonBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","title":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","text":"Poisson process arrival-rate \\(\\lambda\\) fixed jump size \\(\\eta\\) Lévy subordinator corresponding Bernstein function $$   \\psi(x) = 1 - e^{-x\\eta}, x>0. $$","code":""},{"path":"/reference/PoissonBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","text":"Poisson Bernstein function, higher-order alternating iterated forward differences can calculated closed form: $$   {(-1)}^{k-1} \\Delta^k \\psi(x) = e^{-u\\eta} (1-e^{-\\eta})^k, x>0, k>0. $$ Poisson Bernstein function (discrete) Lévy density \\(\\nu\\): $$   \\nu(du)     = \\delta_{\\eta}(du), \\quad u > 0 . $$","code":""},{"path":"/reference/PoissonBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","text":"eta fixed (positive) jump size.","code":""},{"path":[]},{"path":"/reference/PoissonBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","text":"","code":"# Create an object of class PoissonBernsteinFunction PoissonBernsteinFunction() #> An object of class \"PoissonBernsteinFunction\" #> \t (invalid or not initialized) PoissonBernsteinFunction(eta = 2) #> An object of class \"PoissonBernsteinFunction\" #> - eta: 2  # Create a Lévy density bf <- PoissonBernsteinFunction(eta = 0.7) levy_density <- levyDensity(bf) sum(levy_density$y * pmin(1, levy_density$x)) #> [1] 0.7  # Evaluate the Bernstein function bf <- PoissonBernsteinFunction(eta = 0.3) valueOf(bf, 1:5) #> [1] 0.2591818 0.4511884 0.5934303 0.6988058 0.7768698  # Calculate shock-arrival intensities bf <- PoissonBernsteinFunction(eta = 0.8) intensities(bf, 3) #> [1] 0.1111786 0.1111786 0.1362539 0.1111786 0.1362539 0.1362539 0.1669847 intensities(bf, 3, tolerance = 1e-4) #> [1] 0.1111786 0.1111786 0.1362539 0.1111786 0.1362539 0.1362539 0.1669847  # Calculate exchangeable shock-arrival intensities bf <- PoissonBernsteinFunction(eta = 0.4) uexIntensities(bf, 3) #> [1] 0.14813475 0.07285633 0.03583254 uexIntensities(bf, 3, tolerance = 1e-4) #> [1] 0.14813475 0.07285633 0.03583254  # Calculate exchangeable shock-size arrival intensities bf <- PoissonBernsteinFunction(eta = 0.2) exIntensities(bf, 3) #> [1] 0.364525230 0.080706891 0.005956243 exIntensities(bf, 3, tolerance = 1e-4) #> [1] 0.364525230 0.080706891 0.005956243  # Calculate the Markov generator bf <- PoissonBernsteinFunction(eta = 0.6) exQMatrix(bf, 3) #>            [,1]       [,2]       [,3]       [,4] #> [1,] -0.8347011  0.4076860  0.3351663 0.09184884 #> [2,]  0.0000000 -0.6988058  0.4952348 0.20357094 #> [3,]  0.0000000  0.0000000 -0.4511884 0.45118836 #> [4,]  0.0000000  0.0000000  0.0000000 0.00000000 exQMatrix(bf, 3, tolerance = 1e-4) #>            [,1]       [,2]       [,3]       [,4] #> [1,] -0.8347011  0.4076860  0.3351663 0.09184884 #> [2,]  0.0000000 -0.6988058  0.4952348 0.20357094 #> [3,]  0.0000000  0.0000000 -0.4511884 0.45118836 #> [4,]  0.0000000  0.0000000  0.0000000 0.00000000"},{"path":"/reference/ScaledBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for scaled Bernstein functions — ScaledBernsteinFunction-class","title":"Class for scaled Bernstein functions — ScaledBernsteinFunction-class","text":"Bernstein functions stable (nonegative) scalar multiplication, .e. \\(\\psi\\) Bernstein function \\(\\lambda \\geq 0\\) , $$   x \\mapsto \\lambda \\psi(x), x > 0, $$ also Bernstein function.","code":""},{"path":"/reference/ScaledBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for scaled Bernstein functions — ScaledBernsteinFunction-class","text":"scale scalar factor original Bernstein function multiplied. original original Bernstein function multiplied.","code":""},{"path":[]},{"path":"/reference/ScaledBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for scaled Bernstein functions — ScaledBernsteinFunction-class","text":"","code":"# Create an object of class ScaleBernsteinFunction ScaledBernsteinFunction() #> An object of class \"ScaledBernsteinFunction\" #> \t (invalid or not initialized) ScaledBernsteinFunction(   scale = 2,   original = AlphaStableBernsteinFunction(alpha = 0.5) ) #> An object of class \"ScaledBernsteinFunction\" #> - scale: 2 #> - original: #> \tAn object of class \"AlphaStableBernsteinFunction\" #> \t- alpha: 0.5"},{"path":"/reference/SumOfBernsteinFunctions-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for sums of two Bernstein functions — SumOfBernsteinFunctions-class","title":"Class for sums of two Bernstein functions — SumOfBernsteinFunctions-class","text":"Bernstein functions stable addition, .e. \\(\\psi_1\\) \\(\\psi_2\\) two Bernstein functions, $$   x \\mapsto \\psi_1(x) + \\psi_2(x) , x>0, $$ also Bernstein function.","code":""},{"path":"/reference/SumOfBernsteinFunctions-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for sums of two Bernstein functions — SumOfBernsteinFunctions-class","text":"first first summand (derived BernsteinFunction). second second summand (derived BernsteinFunction).","code":""},{"path":[]},{"path":"/reference/SumOfBernsteinFunctions-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for sums of two Bernstein functions — SumOfBernsteinFunctions-class","text":"","code":"# Create an object of class SumOfBernsteinFunctions SumOfBernsteinFunctions() #> An object of class \"SumOfBernsteinFunctions\" #> \t (invalid or not initialized) SumOfBernsteinFunctions(   first = LinearBernsteinFunction(scale = 0.2),   second = AlphaStableBernsteinFunction(alpha = 0.5) ) #> An object of class \"SumOfBernsteinFunctions\" #> - first: #> \tAn object of class \"LinearBernsteinFunction\" #> \t- scale: 0.2 #> - second: #> \tAn object of class \"AlphaStableBernsteinFunction\" #> \t- alpha: 0.5"},{"path":"/reference/exIntensities.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate exchangeable shock-size-arrival intensities — exIntensities","title":"Calculate exchangeable shock-size-arrival intensities — exIntensities","text":"Calculates exchangeable shock-size-arrival intensities, ex_intensities parameter rexmo().","code":""},{"path":"/reference/exIntensities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate exchangeable shock-size-arrival intensities — exIntensities","text":"","code":"exIntensities(object, d, cscale = 1, ...)"},{"path":"/reference/exIntensities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate exchangeable shock-size-arrival intensities — exIntensities","text":"object object deriving class BernsteinFunction. d positive integer, larger two, dimension. cscale positive number composite scaling factor. ... pass-parameter.","code":""},{"path":"/reference/exIntensities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate exchangeable shock-size-arrival intensities — exIntensities","text":"given Bernstein function, exchangeable shock-size-arrival intensities defined $$   \\eta_{}     = \\binom{d}{} {(-1)}^{-1} \\Delta^{}{ \\psi{(d-)} } ,       \\quad 1 \\leq \\leq d . $$ calculation exchangeable shock-size-arrival intensities using formula usually numerically stable. Consequently, various alternative approaches used dependent class Bernstein function.","code":""},{"path":[]},{"path":"/reference/exIntensities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate exchangeable shock-size-arrival intensities — exIntensities","text":"","code":"bf <- AlphaStableBernsteinFunction(alpha = 0.4) exIntensities(bf, 3) #> [1] 0.6970130 0.2615107 0.5933218"},{"path":"/reference/exQMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the MDCM Markovian generator matrix — exQMatrix","title":"Calculate the MDCM Markovian generator matrix — exQMatrix","text":"Calculates infinitesimal Markov generator matrix corresponding (Markovian) default-counting process, used internally rexmo().","code":""},{"path":"/reference/exQMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the MDCM Markovian generator matrix — exQMatrix","text":"","code":"exQMatrix(object, d, cscale = 1, ...)"},{"path":"/reference/exQMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the MDCM Markovian generator matrix — exQMatrix","text":"object object deriving class BernsteinFunction. d positive integer, larger two, dimension. cscale positive number composite scaling factor. ... pass-parameter.","code":""},{"path":"/reference/exQMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the MDCM Markovian generator matrix — exQMatrix","text":"given Bernstein function, Markov generator matrix defined upper triangular matrix elements $$   q_{, j}^\\ast     = \\binom{d-}{j-} \\begin{cases}       -\\psi{(d-)} & \\text{} = j , \\\\       {(-1)}^{j--1} \\Delta^{j-}{ \\psi{(d-)} } & \\text{} < j , \\\\      0 & \\text{otherwise} .    \\end{cases} $$ calculation Markov generator matrix using formula usually numerically stable. Consequently, various alternative approaches used dependent class Bernstein function. (upper triagonal) infinitesimal Markov generator associated death-counting process calculated recursively: $$   q_{0, }^\\ast     = \\eta_{} ,       \\quad \\{\\{ 1 , \\ldots , d \\}} , $$ $$   q_{+1, j+1}^\\ast     = \\frac{d-j}{d-} q_{,j}^\\ast + \\frac{j+1-}{d-} q_{, j+1}^\\ast ,      \\quad 0 \\leq < j \\leq d . $$","code":""},{"path":[]},{"path":"/reference/exQMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the MDCM Markovian generator matrix — exQMatrix","text":"","code":"bf <- AlphaStableBernsteinFunction(alpha = 0.7) exQMatrix(bf, 3) #>           [,1]      [,2]       [,3]      [,4] #> [1,] -2.157669  1.599493  0.2740209 0.2841549 #> [2,]  0.000000 -1.624505  1.2490096 0.3754952 #> [3,]  0.000000  0.000000 -1.0000000 1.0000000 #> [4,]  0.000000  0.000000  0.0000000 0.0000000"},{"path":"/reference/hidden_aliases.html","id":null,"dir":"Reference","previous_headings":"","what":"For S4 methods that require a documentation entry but only clutter the index. — hidden_aliases","title":"For S4 methods that require a documentation entry but only clutter the index. — hidden_aliases","text":"S4 methods require documentation entry clutter index.","code":""},{"path":"/reference/hidden_aliases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For S4 methods that require a documentation entry but only clutter the index. — hidden_aliases","text":"","code":"# S4 method for BernsteinFunction uexIntensities(object, d, cscale = 1, ...)  # S4 method for BernsteinFunction exIntensities(object, d, cscale = 1, ...)  # S4 method for BernsteinFunction intensities(object, d, cscale = 1, ...)  # S4 method for BernsteinFunction exQMatrix(object, d, cscale = 1, ...)  # S4 method for LevyBernsteinFunction valueOf(   object,   x,   difference_order,   n = 1L,   k = 0L,   cscale = 1,   ...,   method = c(\"default\", \"levy\"),   tolerance = .Machine$double.eps^0.5 )  # S4 method for CompleteBernsteinFunction valueOf(   object,   x,   difference_order,   n = 1L,   k = 0L,   cscale = 1,   ...,   method = c(\"default\", \"stieltjes\", \"levy\"),   tolerance = .Machine$double.eps^0.5 )  # S4 method for AlphaStableBernsteinFunction initialize(.Object, alpha)  # S4 method for AlphaStableBernsteinFunction show(object)  # S4 method for AlphaStableBernsteinFunction levyDensity(object)  # S4 method for AlphaStableBernsteinFunction stieltjesDensity(object)  # S4 method for CompositeScaledBernsteinFunction initialize(.Object, cscale, original)  # S4 method for CompositeScaledBernsteinFunction show(object)  # S4 method for CompositeScaledBernsteinFunction valueOf(object, x, difference_order = 0L, n = 1, k = 0, cscale = 1, ...)  # S4 method for ConstantBernsteinFunction initialize(.Object, constant)  # S4 method for ConstantBernsteinFunction show(object)  # S4 method for ConstantBernsteinFunction valueOf(object, x, difference_order = 0L, n = 1L, k = 0L, cscale = 1, ...)  # S4 method for ConvexCombinationOfBernsteinFunctions initialize(.Object, coefficients, points)  # S4 method for ConvexCombinationOfBernsteinFunctions show(object)  # S4 method for ConvexCombinationOfBernsteinFunctions valueOf(object, x, difference_order = 0L, n = 1L, k = 0L, cscale = 1, ...)  # S4 method for ExponentialBernsteinFunction initialize(.Object, lambda)  # S4 method for ExponentialBernsteinFunction show(object)  # S4 method for ExponentialBernsteinFunction levyDensity(object)  # S4 method for ExponentialBernsteinFunction stieltjesDensity(object)  # S4 method for GammaBernsteinFunction initialize(.Object, a)  # S4 method for GammaBernsteinFunction show(object)  # S4 method for GammaBernsteinFunction levyDensity(object)  # S4 method for GammaBernsteinFunction stieltjesDensity(object)  # S4 method for InverseGaussianBernsteinFunction initialize(.Object, eta)  # S4 method for InverseGaussianBernsteinFunction show(object)  # S4 method for InverseGaussianBernsteinFunction levyDensity(object)  # S4 method for InverseGaussianBernsteinFunction stieltjesDensity(object)  # S4 method for LinearBernsteinFunction initialize(.Object, scale)  # S4 method for LinearBernsteinFunction show(object)  # S4 method for LinearBernsteinFunction valueOf(object, x, difference_order = 0L, n = 1L, k = 0L, cscale = 1, ...)  # S4 method for ParetoBernsteinFunction initialize(.Object, alpha, x0)  # S4 method for ParetoBernsteinFunction show(object)  # S4 method for ParetoBernsteinFunction levyDensity(object)  # S4 method for PoissonBernsteinFunction initialize(.Object, eta)  # S4 method for PoissonBernsteinFunction show(object)  # S4 method for PoissonBernsteinFunction levyDensity(object)  # S4 method for ScaledBernsteinFunction initialize(.Object, scale, original)  # S4 method for ScaledBernsteinFunction show(object)  # S4 method for ScaledBernsteinFunction valueOf(object, x, difference_order = 0L, n = 1L, k = 0L, cscale = 1, ...)  # S4 method for SumOfBernsteinFunctions initialize(.Object, first, second)  # S4 method for SumOfBernsteinFunctions show(object)  # S4 method for SumOfBernsteinFunctions valueOf(object, x, difference_order = 0L, n = 1L, k = 0L, cscale = 1, ...)"},{"path":"/reference/hidden_aliases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For S4 methods that require a documentation entry but only clutter the index. — hidden_aliases","text":"object object deriving class BernsteinFunction. d positive integer, larger two, dimension. cscale Positive number. ... pass-parameter. x nonnegativ numeric vector iterated difference Bernstein function evaluated. difference_order nonnegative integer order alternating iterated forward differences taken Bernstein function. n, k Nonnegative numbers binomial factor. method Method calculate result; use method = \"levy\" using Lévy representation method = \"stieltjes\" using Stieltjes representation. tolerance (Relative) tolerance, passed stats::integrate(). .Object object:  see “Initialize Methods” section. alpha Positive number zero one (bounds excl.). original Derives BernsteinFunction. constant Nonnegative number. coefficients Derives ConvexCombinationOfBernsteinFunctions. points Derives ConvexCombinationOfBernsteinFunctions. lambda Positive number. Positive number. eta Positive number. scale Positive number. x0 Positive number. first Derives BernsteinFunction. second Derives BernsteinFunction.","code":""},{"path":"/reference/intensities.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the shock-arrival intensities — intensities","title":"Calculate the shock-arrival intensities — intensities","text":"Calculates shock-arrival intensities, intensities parameter rmo().","code":""},{"path":"/reference/intensities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the shock-arrival intensities — intensities","text":"","code":"intensities(object, d, cscale = 1, ...)"},{"path":"/reference/intensities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the shock-arrival intensities — intensities","text":"object object deriving class BernsteinFunction. d positive integer, larger two, dimension. cscale positive number composite scaling factor. ... pass-parameter.","code":""},{"path":"/reference/intensities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the shock-arrival intensities — intensities","text":"given Bernstein function, shock-arrival intensities defined $$   \\lambda_{}     = {(-1)}^{{\\lvert \\rvert}-1}       \\Delta^{{\\lvert \\rvert}}{ \\psi{(d-{\\lvert \\rvert})} } ,         \\quad 1 \\leq {\\lvert \\rvert} \\leq d . $$ calculation shock-arrival intensities using formula usually numerically stable. Consequently, various alternative approaches used dependent class Bernstein function. following binary representation used map subsets \\(\\) \\({\\{1, \\ldots, d\\}}\\) integers \\(0, \\ldots, 2^d-1\\): $$       \\equiv \\sum_{k \\}{ 2^{k-1} } . $$","code":""},{"path":[]},{"path":"/reference/intensities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the shock-arrival intensities — intensities","text":"","code":"bf <- AlphaStableBernsteinFunction(alpha = 0.7) intensities(bf, 3) #> [1] 0.53316449 0.53316449 0.09134031 0.53316449 0.09134031 0.09134031 0.28415490"},{"path":"/reference/levyDensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the Lévy density of a Bernstein function — levyDensity","title":"Return the Lévy density of a Bernstein function — levyDensity","text":"Returns Lévy density lower, upper, type attributes continuous returns data.frame named columns x (atoms) y (weights) well type attribute discrete. type attribute either \"continuous\" \"discrete\".","code":""},{"path":"/reference/levyDensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the Lévy density of a Bernstein function — levyDensity","text":"","code":"levyDensity(object)"},{"path":"/reference/levyDensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the Lévy density of a Bernstein function — levyDensity","text":"object object deriving LevyBernsteinFunction.","code":""},{"path":[]},{"path":"/reference/rexmo.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate from exchangeable Marshall–Olkin distributions — rexmo","title":"Simulate from exchangeable Marshall–Olkin distributions — rexmo","text":"Draws n iid samples d-variate exchangeable Marshall–Olkin distribution parametrized vector exchangeable shock-size arrival intensities.","code":""},{"path":"/reference/rexmo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate from exchangeable Marshall–Olkin distributions — rexmo","text":"","code":"rexmo(n, d, ex_intensities, method = c(\"MDCM\", \"AM\", \"ESM\"))"},{"path":"/reference/rexmo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate from exchangeable Marshall–Olkin distributions — rexmo","text":"n integer number samples. d integer dimension. ex_intensities numeric vector exchangeable shock-size arrival intensities. method string indicating sampling algorithm used. Use \"MDCM\" Markovian death-counting model, \"\" Arnold model, \"ESM\" exogenous shock model. recommend using ESM small dimensions; can used dimension \\(30\\).","code":""},{"path":"/reference/rexmo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate from exchangeable Marshall–Olkin distributions — rexmo","text":"rexmo returns numeric matrix size n x d. row corresponds independently identically (iid) distributed sample d-variate exchangeable Marshall–Olkin distribution specified parameters.","code":""},{"path":"/reference/rexmo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate from exchangeable Marshall–Olkin distributions — rexmo","text":"exchangeable Marshall–Olkin distribution survival function $$     \\bar{F}{(t)}         = \\exp{\\left\\{             -\\sum_{=1}^{d}{                 {\\left[                     \\sum_{j=0}^{d-}{ \\binom{d-}{j} \\lambda_{j+1} }                 \\right]}                 \\tau_{[]}             }         \\right\\}} ,           \\quad t = {(t_{1}, \\ldots, t_{d})} > 0 , $$ exchangeable shock arrival intensities \\(\\lambda_{} \\geq 0\\), \\(1 \\leq \\leq d\\) \\(t_{[1]} \\geq \\cdots \\geq t_{[d]}\\), see (Mai Scherer 2017) . relationship exchangeable shock-size arrival intensities shock-arrival intensities Marshall–Olkin distribution given : $$     \\eta_{}         = \\binom{d}{} \\lambda_{} ,           \\quad \\{\\{1, \\ldots, n\\}} . $$ exchangeable shock-size arrival intensities correspond initial transition rates independent exponential random variables Markovian death-counting model (MDCM).","code":""},{"path":"/reference/rexmo.html","id":"simulation-algorithms","dir":"Reference","previous_headings":"","what":"Simulation algorithms","title":"Simulate from exchangeable Marshall–Olkin distributions — rexmo","text":"Markovian death-counting model (MDCM) simulation algorithm used generate samples exchangeable Marshall-Olkin distribution. simulates death-counting process random vector, Markov process, components \"dead\". process defines order statistic used obtain sample random permutation. details algorithm, refer (Sloot 2022) . exogenous shock model (ESM) Arnold model () simulation algorithms can used generate samples general Marshall–Olkin distribution. algorithms, exchangeable shock-size arrival intensities converted corresponding shock-arrival intensities passed rmo() function.","code":""},{"path":"/reference/rexmo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate from exchangeable Marshall–Olkin distributions — rexmo","text":"Mai J, Scherer M (2017). Simulating copulas: stochastic models, sampling algorithms applications,  Series Quantitative Finance, 2 edition. World Scientific. doi:10.1142/10265 . Sloot H (2022). “Implementing Markovian models extendible Marshall–Olkin distributions.” Dependence Modeling, 10(1), 308--343. doi:10.1515/demo-2022-0151 , https://doi.org/doi:10.1515/demo-2022-0151.","code":""},{"path":[]},{"path":"/reference/rexmo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate from exchangeable Marshall–Olkin distributions — rexmo","text":"","code":"rexmo(   10, 3,   c(1.2, 0.3, 0.4) ) #>             [,1]       [,2]       [,3] #>  [1,] 1.24812829 1.24812829 1.24812829 #>  [2,] 0.48634840 0.47052554 1.78880853 #>  [3,] 0.65681707 0.65681707 1.01357792 #>  [4,] 0.25423319 0.51533169 0.51533169 #>  [5,] 0.14364802 0.14364802 0.55651569 #>  [6,] 0.18964518 2.99437905 0.37855097 #>  [7,] 0.48741620 2.61031553 0.11500470 #>  [8,] 0.07373153 1.35269060 1.43765142 #>  [9,] 0.62062733 0.62062733 0.62062733 #> [10,] 0.11890022 0.06306615 0.06306615 ## independence rexmo(   10, 3,   c(3, 0, 0) ) #>              [,1]       [,2]       [,3] #>  [1,] 0.323635082 1.76158120 2.45382131 #>  [2,] 2.525282609 0.22320121 0.84900222 #>  [3,] 0.223701625 2.78665057 2.53783359 #>  [4,] 0.969602742 0.23504509 1.29601590 #>  [5,] 0.983692274 0.05137713 0.75998744 #>  [6,] 0.062369194 0.38124218 1.91800802 #>  [7,] 0.857418643 0.43547614 0.23399003 #>  [8,] 0.001038868 0.25164220 1.34978464 #>  [9,] 0.837411324 0.01778692 0.76764158 #> [10,] 2.300344140 0.71425900 0.00741499 ## comonotone rexmo(   10, 3,   c(0, 0, 1) ) #>            [,1]      [,2]      [,3] #>  [1,] 0.5183168 0.5183168 0.5183168 #>  [2,] 2.3729609 2.3729609 2.3729609 #>  [3,] 1.0104158 1.0104158 1.0104158 #>  [4,] 0.1514963 0.1514963 0.1514963 #>  [5,] 1.3205617 1.3205617 1.3205617 #>  [6,] 0.3468957 0.3468957 0.3468957 #>  [7,] 1.3622047 1.3622047 1.3622047 #>  [8,] 3.3790260 3.3790260 3.3790260 #>  [9,] 0.6025503 0.6025503 0.6025503 #> [10,] 1.7651095 1.7651095 1.7651095  rexmo(   10, 3,   c(1.2, 0.3, 0.4),   method = \"MDCM\" ) #>             [,1]      [,2]      [,3] #>  [1,] 0.14121826 0.1412183 0.1412183 #>  [2,] 2.69213140 1.0623892 2.2725220 #>  [3,] 2.75819713 1.3599618 1.3599618 #>  [4,] 1.06184200 1.4985106 1.4985106 #>  [5,] 0.80863073 0.1510506 0.2297900 #>  [6,] 0.34242933 0.3424293 2.1238143 #>  [7,] 2.57179388 2.9439201 0.2451691 #>  [8,] 0.75677086 0.2184215 1.1688276 #>  [9,] 1.13290512 0.9245572 0.1159344 #> [10,] 0.01712256 3.1868653 0.2974880 ## independence rexmo(   10, 3,   c(3, 0, 0),   method = \"MDCM\" ) #>             [,1]       [,2]      [,3] #>  [1,] 0.12484451 0.12488045 0.3198860 #>  [2,] 0.09781810 1.39609535 0.7083548 #>  [3,] 2.41052478 0.16618177 1.1766452 #>  [4,] 0.38266525 1.86615889 1.1197771 #>  [5,] 0.02661438 0.46839103 0.4085215 #>  [6,] 0.10738519 0.43408557 0.4809424 #>  [7,] 0.03297437 0.46704954 0.7335127 #>  [8,] 0.17384076 2.10204754 1.2186602 #>  [9,] 1.48031845 0.68395080 0.4337029 #> [10,] 0.11259334 0.09670318 0.2463315 ## comonotone rexmo(   10, 3,   c(0, 0, 1),   method = \"MDCM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 2.29826255 2.29826255 2.29826255 #>  [2,] 1.15793598 1.15793598 1.15793598 #>  [3,] 2.01196499 2.01196499 2.01196499 #>  [4,] 2.23616817 2.23616817 2.23616817 #>  [5,] 0.72107886 0.72107886 0.72107886 #>  [6,] 0.78373196 0.78373196 0.78373196 #>  [7,] 0.05259812 0.05259812 0.05259812 #>  [8,] 0.74744020 0.74744020 0.74744020 #>  [9,] 1.71822050 1.71822050 1.71822050 #> [10,] 0.04856027 0.04856027 0.04856027  rexmo(   10, 3,   c(1.2, 0.3, 0.4),   method = \"AM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 1.43926802 1.94799687 0.04705807 #>  [2,] 0.22853590 0.00907878 0.22853590 #>  [3,] 1.30830516 1.88488402 1.88488402 #>  [4,] 0.06869989 0.05353936 0.42985456 #>  [5,] 1.22820504 1.22820504 1.22820504 #>  [6,] 0.19416056 0.06250867 0.06250867 #>  [7,] 0.27702987 0.19031433 0.27702987 #>  [8,] 0.27458761 0.31582896 0.77459066 #>  [9,] 1.64903010 0.13622790 2.20238194 #> [10,] 0.67769813 0.67769813 0.67769813 ## independence rexmo(   10, 3,   c(3, 0, 0),   method = \"AM\" ) #>             [,1]      [,2]        [,3] #>  [1,] 0.33701505 0.2473189 0.979247369 #>  [2,] 0.70369158 0.3646893 0.162414210 #>  [3,] 2.23078367 0.4197012 0.009829709 #>  [4,] 0.23464860 1.6858060 0.737566681 #>  [5,] 0.01781154 4.0248128 1.483777490 #>  [6,] 0.96510390 1.1954639 0.457030197 #>  [7,] 1.15840960 4.2019282 2.975544094 #>  [8,] 2.55197317 0.1661977 0.243863497 #>  [9,] 0.46882261 1.5675788 0.886858970 #> [10,] 1.71301886 0.5342615 0.691543318 ## comonotone rexmo(   10, 3,   c(0, 0, 1),   method = \"AM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.38143820 0.38143820 0.38143820 #>  [2,] 0.54960317 0.54960317 0.54960317 #>  [3,] 0.44061157 0.44061157 0.44061157 #>  [4,] 2.53032357 2.53032357 2.53032357 #>  [5,] 3.09594521 3.09594521 3.09594521 #>  [6,] 0.11517457 0.11517457 0.11517457 #>  [7,] 0.28590440 0.28590440 0.28590440 #>  [8,] 0.02643718 0.02643718 0.02643718 #>  [9,] 0.56745503 0.56745503 0.56745503 #> [10,] 1.80836899 1.80836899 1.80836899  rexmo(   10, 3,   c(1.2, 0.3, 0.4),   method = \"ESM\" ) #>            [,1]      [,2]       [,3] #>  [1,] 0.2414913 0.6768541 0.86928184 #>  [2,] 2.3424629 0.9520258 1.41077064 #>  [3,] 1.2131195 1.2131195 1.21311948 #>  [4,] 0.4415666 0.4415666 0.44156655 #>  [5,] 0.5146282 1.3620439 0.03413037 #>  [6,] 0.3812194 0.8569765 0.38121941 #>  [7,] 0.4130806 0.4130806 0.41308063 #>  [8,] 1.2303584 1.1172528 1.26976555 #>  [9,] 0.2271262 1.2983898 0.18661145 #> [10,] 0.4028176 0.4028176 0.40281763 ## independence rexmo(   10, 3,   c(3, 0, 0),   method = \"ESM\" ) #>            [,1]      [,2]       [,3] #>  [1,] 0.1337382 0.4031007 0.35869338 #>  [2,] 1.1937091 0.7122422 0.00172762 #>  [3,] 1.8328224 1.3235227 1.43574533 #>  [4,] 0.3049590 0.4688882 0.63502629 #>  [5,] 0.9171085 0.4204346 0.35984127 #>  [6,] 1.5298437 0.5309312 0.25393326 #>  [7,] 0.4606769 0.8791399 0.17469336 #>  [8,] 0.2767780 0.3234208 2.17911850 #>  [9,] 0.7538959 1.5739987 1.35014191 #> [10,] 2.2507029 1.0062164 0.46594104 ## comonotone rexmo(   10, 3,   c(0, 0, 1),   method = \"ESM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.45581045 0.45581045 0.45581045 #>  [2,] 0.09144684 0.09144684 0.09144684 #>  [3,] 0.46749264 0.46749264 0.46749264 #>  [4,] 0.16870689 0.16870689 0.16870689 #>  [5,] 1.46950074 1.46950074 1.46950074 #>  [6,] 0.04305777 0.04305777 0.04305777 #>  [7,] 0.44115116 0.44115116 0.44115116 #>  [8,] 1.01066819 1.01066819 1.01066819 #>  [9,] 0.20444482 0.20444482 0.20444482 #> [10,] 0.54432307 0.54432307 0.54432307"},{"path":"/reference/rextmo.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate from extendible Marshall–Olkin distributions — rextmo","title":"Simulate from extendible Marshall–Olkin distributions — rextmo","text":"Draws n iid samples d-variate extendible Marshall–Olkin distribution parametrized Bernstein function bf.","code":""},{"path":"/reference/rextmo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate from extendible Marshall–Olkin distributions — rextmo","text":"","code":"rextmo(n, d, bf, method = c(\"MDCM\", \"AM\", \"ESM\"))"},{"path":"/reference/rextmo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate from extendible Marshall–Olkin distributions — rextmo","text":"n integer number samples. d integer dimension. bf BernsteinFunction representing Bernstein function extendible Marshall–Olkin distribution. method string indicating sampling algorithm used. Use \"MDCM\" Markovian death-counting model, \"\" Arnold model, \"ESM\" exogenous shock model. recommend using ESM small dimensions; can used dimension \\(30\\).","code":""},{"path":"/reference/rextmo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate from extendible Marshall–Olkin distributions — rextmo","text":"rextmo returns numeric matrix size n x d rows d. row corresponds independently identically (iid) distributed sample d-variate extendible Marshall–Olkin distribution specified parameters.","code":""},{"path":"/reference/rextmo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate from extendible Marshall–Olkin distributions — rextmo","text":"extendible Marshall–Olkin distribution survival function $$     \\bar{F}{(t)}         = \\exp{\\left\\{             - \\sum_{=1}^{d}{ {[ \\psi{()} - \\psi{(-1)} ]} t_{[]} }           \\right\\}} ,             \\quad t = {(t_{1}, \\ldots, t_{d})} > 0 , $$ Bernstein functions \\(\\psi\\), see BernsteinFunction, \\(t_{[1]} \\geq \\cdots \\geq t_{[d]}\\), see (Mai Scherer 2017) . relationship Bernstein functions exchangeable shock-size arrival intensities exchangeable Marshall–Olkin distribution, see rexmo(), follows: $$     \\eta_{}         = \\binom{d}{} {(-1)}^{-1} \\Delta{ \\psi{(d-)} } ,             \\quad \\{\\{ 1 , \\ldots , d \\}} . $$ formula exchangeable shock-size arrival intensities numerically stable higher dimensions, rextmo() uses approximation techniques (Sloot 2022)  calculate .","code":""},{"path":"/reference/rextmo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate from extendible Marshall–Olkin distributions — rextmo","text":"Mai J, Scherer M (2017). Simulating copulas: stochastic models, sampling algorithms applications,  Series Quantitative Finance, 2 edition. World Scientific. doi:10.1142/10265 . Sloot H (2022). “Implementing Markovian models extendible Marshall–Olkin distributions.” Dependence Modeling, 10(1), 308--343. doi:10.1515/demo-2022-0151 , https://doi.org/doi:10.1515/demo-2022-0151.","code":""},{"path":[]},{"path":"/reference/rextmo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate from extendible Marshall–Olkin distributions — rextmo","text":"","code":"rextmo(   10, 3,   AlphaStableBernsteinFunction(alpha = log2(2 - 0.5)) ) #>            [,1]        [,2]      [,3] #>  [1,] 1.0872304 2.792422255 2.9725145 #>  [2,] 3.6450810 3.645080973 0.3804027 #>  [3,] 0.5792869 0.169943024 0.1699430 #>  [4,] 1.0469452 2.282182095 2.4644173 #>  [5,] 1.0330454 0.423650580 1.0330454 #>  [6,] 0.7331805 0.002293368 1.9656892 #>  [7,] 0.4766692 0.705533671 0.7055337 #>  [8,] 0.4413880 0.441387973 1.4510156 #>  [9,] 0.4115962 0.882216696 0.2871684 #> [10,] 0.0802551 0.080255102 1.8376307 # independence rextmo(   10, 3,   LinearBernsteinFunction(scale = 1) ) #>            [,1]      [,2]      [,3] #>  [1,] 1.6411971 3.8119882 0.5990257 #>  [2,] 3.2562000 0.7061565 1.3115348 #>  [3,] 1.6711142 1.0056146 0.7735775 #>  [4,] 1.8368560 0.7249240 1.1799694 #>  [5,] 0.2379712 0.1242276 0.3248210 #>  [6,] 1.6553843 0.2783175 0.5640013 #>  [7,] 1.1059275 3.6414076 0.2085992 #>  [8,] 1.7976998 0.9169977 0.2978873 #>  [9,] 0.1357380 0.3336813 0.9044296 #> [10,] 0.6573731 1.5758531 1.8963599 # comonotone rextmo(   10, 3,   ConstantBernsteinFunction(constant = 1) ) #>            [,1]      [,2]      [,3] #>  [1,] 4.3011018 4.3011018 4.3011018 #>  [2,] 1.0655519 1.0655519 1.0655519 #>  [3,] 1.3208260 1.3208260 1.3208260 #>  [4,] 2.9288245 2.9288245 2.9288245 #>  [5,] 1.1715608 1.1715608 1.1715608 #>  [6,] 0.1065810 0.1065810 0.1065810 #>  [7,] 1.3158619 1.3158619 1.3158619 #>  [8,] 0.4641451 0.4641451 0.4641451 #>  [9,] 3.8443458 3.8443458 3.8443458 #> [10,] 2.1129294 2.1129294 2.1129294  rextmo(   10, 3,   AlphaStableBernsteinFunction(alpha = log2(2 - 0.5)),   method = \"AM\" ) #>            [,1]       [,2]       [,3] #>  [1,] 2.1753048 0.58172535 0.66567357 #>  [2,] 0.4259764 0.42597641 0.42597641 #>  [3,] 0.1028965 0.10289648 0.10289648 #>  [4,] 1.2307672 0.54766356 0.54766356 #>  [5,] 0.1887831 0.18878313 2.65736334 #>  [6,] 0.9687834 0.19981060 1.25201838 #>  [7,] 0.3967045 0.60101202 1.14465128 #>  [8,] 0.5170917 0.05121645 0.51709166 #>  [9,] 0.5643279 0.56432792 0.56432792 #> [10,] 1.2964948 1.29649481 0.05490517 # independence rextmo(   10, 3,   LinearBernsteinFunction(scale = 1),   method = \"AM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 0.9630554 1.6107066 0.3570616 #>  [2,] 0.4407074 1.9178355 0.4748393 #>  [3,] 0.1490991 1.3944559 0.6555654 #>  [4,] 0.2679317 1.1935537 0.2396400 #>  [5,] 0.5332349 0.9546471 2.1059928 #>  [6,] 0.7561929 3.0058950 0.8234033 #>  [7,] 0.1393863 0.2176269 1.6825048 #>  [8,] 0.1396111 1.0587873 0.9650992 #>  [9,] 0.5313197 0.1490523 0.2252934 #> [10,] 0.2352280 0.4372914 0.4384672 # comonotone rextmo(   10, 3,   ConstantBernsteinFunction(constant = 1),   method = \"AM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 1.6247460 1.6247460 1.6247460 #>  [2,] 0.9178814 0.9178814 0.9178814 #>  [3,] 2.6424760 2.6424760 2.6424760 #>  [4,] 0.3693751 0.3693751 0.3693751 #>  [5,] 1.4027242 1.4027242 1.4027242 #>  [6,] 0.1444253 0.1444253 0.1444253 #>  [7,] 0.5222246 0.5222246 0.5222246 #>  [8,] 2.5005813 2.5005813 2.5005813 #>  [9,] 1.3610902 1.3610902 1.3610902 #> [10,] 1.2047865 1.2047865 1.2047865  rextmo(   10, 3,   AlphaStableBernsteinFunction(alpha = log2(2 - 0.5)),   method = \"ESM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 1.1145959 2.0169782 2.0169782 #>  [2,] 2.6961030 0.8760312 2.6961030 #>  [3,] 0.1454685 0.1454685 0.1454685 #>  [4,] 1.0154625 1.3137280 1.0154625 #>  [5,] 1.3303817 0.4974266 1.9690948 #>  [6,] 0.8186939 0.3737764 0.4896543 #>  [7,] 0.1033532 0.1033532 0.1033532 #>  [8,] 3.6114416 1.5738218 2.6873203 #>  [9,] 2.0072453 2.8618523 0.4438147 #> [10,] 0.3982220 0.6322462 0.5414308 # independence rextmo(   10, 3,   LinearBernsteinFunction(scale = 1),   method = \"ESM\" ) #>            [,1]       [,2]        [,3] #>  [1,] 1.0482667 0.29932952 0.132269757 #>  [2,] 1.8800452 0.78485500 0.197307731 #>  [3,] 0.1896417 2.47906218 0.489811563 #>  [4,] 0.4510803 0.60559777 0.006899859 #>  [5,] 0.7518321 0.07228223 1.563443373 #>  [6,] 0.9530684 0.35148384 1.946474349 #>  [7,] 0.5261581 0.78501282 0.322845910 #>  [8,] 0.3881392 0.76686648 1.910238074 #>  [9,] 1.3475999 1.45035432 4.321532268 #> [10,] 0.2599657 2.34783097 1.094813817 # comonotone rextmo(   10, 3,   ConstantBernsteinFunction(constant = 1),   method = \"ESM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.20081123 0.20081123 0.20081123 #>  [2,] 0.36210751 0.36210751 0.36210751 #>  [3,] 4.28051980 4.28051980 4.28051980 #>  [4,] 1.02321426 1.02321426 1.02321426 #>  [5,] 0.32834311 0.32834311 0.32834311 #>  [6,] 0.62036333 0.62036333 0.62036333 #>  [7,] 0.06631438 0.06631438 0.06631438 #>  [8,] 0.07198635 0.07198635 0.07198635 #>  [9,] 0.65923089 0.65923089 0.65923089 #> [10,] 0.63313330 0.63313330 0.63313330"},{"path":"/reference/rmo-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rmo: A package for simulating Marshall–Olkin distributions — rmo-package","title":"rmo: A package for simulating Marshall–Olkin distributions — rmo-package","text":"rmo-package provides efficient sampling algorithms Marshall–Olkin distribution flexible S4-class system creating diverse parametrizations.","code":""},{"path":"/reference/rmo-package.html","id":"sampling","dir":"Reference","previous_headings":"","what":"Sampling","title":"rmo: A package for simulating Marshall–Olkin distributions — rmo-package","text":"Simulation algorithms provided various MO parametrizations. semantic naming scheme r*mo used, e.g., rpextmo() allows simulate parametric families extendible Marshall–Olkin distributions. function takes killing-rate, drift, scaling factor, parameter vector, family name input. rextmo() allows simulate extendible Marshall–Olkin distributions. takes Bernstein function input. rexmo() allows simulate exchangeable Marshall–Olkin distributions. takes vector exchangeable shock-size arrival intensities input. rmo() allows simulate Marshall–Olkin distributions. takes vector shock arrival intensities input uses Arnold model exogenous shock model sampling; former can used dimension \\(30\\), latter used small dimensions. default simulation algorithm Markovian death-counting model. Dependent parametrization, algorithms can used, e.g., exogenous shock model, Arnold model, Lévy-frailty model.","code":""},{"path":"/reference/rmo-package.html","id":"bernstein-functions","dir":"Reference","previous_headings":"","what":"Bernstein functions","title":"rmo: A package for simulating Marshall–Olkin distributions — rmo-package","text":"Bernstein function can used parametrize extendible Marshall–Olkin distribution. Many families Bernstein functions available, e.g. ParetoBernsteinFunction, ExponentialBernsteinFunction, AlphaStableBernsteinFunction. Bernstein functions can recombined scaling, summation composition, can used create new Bernstein functions ScaledBernsteinFunction, CompositeScaledBernsteinFunction SumOfBernsteinFunctions. object derives BernsteinFunction can used generate Marshall–Olkin shock arrival intensities intensities(). can used generate (scaled) exchangeable shock-size arrival intensities exIntensities().","code":""},{"path":[]},{"path":"/reference/rmo-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rmo: A package for simulating Marshall–Olkin distributions — rmo-package","text":"Maintainer: Henrik Sloot henrik.sloot@gmail.com (ORCID)","code":""},{"path":"/reference/rmo.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate from Marshall–Olkin distributions — rmo","title":"Simulate from Marshall–Olkin distributions — rmo","text":"Draws n iid samples d-variate Marshall–Olkin distribution parametrized vector shock-arrival intensities.","code":""},{"path":"/reference/rmo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate from Marshall–Olkin distributions — rmo","text":"","code":"rmo(n, d, intensities, method = c(\"AM\", \"ESM\"))"},{"path":"/reference/rmo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate from Marshall–Olkin distributions — rmo","text":"n integer number samples. d integer dimension. intensities numeric vector shock-arrival intensities. method string indicating sampling algorithm used. Use \"\" Arnold model \"ESM\" exogenous shock model. recommend using ESM small dimensions ; can used dimension \\(30\\).","code":""},{"path":"/reference/rmo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate from Marshall–Olkin distributions — rmo","text":"rmo returns numeric matrix size n x d. row corresponds independently identically (iid) distributed sample d-variate Marshall–Olkin distribution specified parameters.","code":""},{"path":"/reference/rmo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate from Marshall–Olkin distributions — rmo","text":"Marshall–Olkin distribution introduced (Marshall Olkin 1967) . characterized survival function: $$     \\bar{F}{(t)}         = \\exp{\\left\\{ - \\sum_{} \\lambda_I \\max_{\\} t_i \\right\\}},             \\quad t = {(t_{1}, \\ldots, t_{d})} > 0, $$ shock-arrival intensities \\(\\lambda_I \\geq 0\\), \\(\\emptyset \\neq \\subseteq {\\{ 1 , \\ldots, d \\}}\\). shock-arrival intensities correspond rates independent exponential random variables exogenous shock model (ESM). \\(\\lambda_{}\\) zero, means shock \\(\\) never arrives. map subsets \\({\\{ 1, \\ldots, d\\}}\\) integers \\(0, \\ldots, 2^d-1\\), use binary representation: $$   \\equiv \\sum_{k \\}{ 2^{k-1} } $$","code":""},{"path":"/reference/rmo.html","id":"simulation-algorithms","dir":"Reference","previous_headings":"","what":"Simulation algorithms","title":"Simulate from Marshall–Olkin distributions — rmo","text":"exogenous shock model (ESM) simulation algorithm generating samples Marshall–Olkin distributed random vector. works generating independent exponentially distributed shock arrival times non-empty subsets components. component's death time defined minimum shock arrival times corresponding subset containing component. See (Marshall Olkin 1967) . Arnold model () simulation algorithm used generate samples Marshall–Olkin distributed random vector. simulates marked homogeneous Poisson process set-valued marks, process stopped components hit shock. See (Arnold 1975) .","code":""},{"path":"/reference/rmo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate from Marshall–Olkin distributions — rmo","text":"Arnold BC (1975). “characterization exponential distribution multivariate geometric compounding.” Sankhy\\=: Indian Journal Statistics, Series , 37(1), 164--173. Mai J, Scherer M (2017). Simulating copulas: stochastic models, sampling algorithms applications,  Series Quantitative Finance, 2 edition. World Scientific. doi:10.1142/10265 . Marshall AW, Olkin (1967). “multivariate exponential distribution.” Journal American Statistical Association, 62(317), 30--44. doi:10.2307/2282907 .","code":""},{"path":[]},{"path":"/reference/rmo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate from Marshall–Olkin distributions — rmo","text":"","code":"rmo(   10, 3,   c(0.4, 0.4, 0.1, 0.4, 0.1, 0.1, 0.4) ) #>            [,1]      [,2]      [,3] #>  [1,] 1.4940680 0.4815166 1.4940680 #>  [2,] 1.5630504 1.2373555 0.2722576 #>  [3,] 0.8146715 0.8146715 0.6092743 #>  [4,] 0.3496862 0.3496862 0.3496862 #>  [5,] 0.3435542 0.4846409 0.4846409 #>  [6,] 1.6256177 0.1128544 0.9396170 #>  [7,] 1.5936785 1.6181729 2.0635134 #>  [8,] 1.1823875 1.0045385 0.8173033 #>  [9,] 1.4537369 1.5072054 1.5072054 #> [10,] 0.1561436 0.9978466 1.2825705 ## independence rmo(   10, 3,   c(1, 1, 0, 1, 0, 0, 0) ) #>             [,1]      [,2]       [,3] #>  [1,] 1.55043376 4.9591510 0.59314079 #>  [2,] 0.56480836 1.0989577 0.71035413 #>  [3,] 3.06501354 1.7777253 0.56828478 #>  [4,] 0.42291587 0.2076186 3.33923080 #>  [5,] 1.23372305 2.8210454 1.11498917 #>  [6,] 0.82371196 0.3091672 0.06546795 #>  [7,] 1.03867515 0.7887616 1.87408558 #>  [8,] 3.14180508 1.6819957 0.14326913 #>  [9,] 0.05036702 2.1274593 0.27919683 #> [10,] 0.33992185 1.1771542 0.19741569 ## comonotone rmo(   10, 3,   c(0, 0, 0, 0, 0, 0, 1) ) #>            [,1]      [,2]      [,3] #>  [1,] 0.6705312 0.6705312 0.6705312 #>  [2,] 3.9234935 3.9234935 3.9234935 #>  [3,] 3.0003424 3.0003424 3.0003424 #>  [4,] 1.0175859 1.0175859 1.0175859 #>  [5,] 0.4891376 0.4891376 0.4891376 #>  [6,] 0.3268564 0.3268564 0.3268564 #>  [7,] 2.9817897 2.9817897 2.9817897 #>  [8,] 1.4009379 1.4009379 1.4009379 #>  [9,] 0.3559706 0.3559706 0.3559706 #> [10,] 3.5363665 3.5363665 3.5363665  rmo(   10, 3,   c(0.4, 0.4, 0.1, 0.4, 0.1, 0.1, 0.4),   method = \"ESM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 1.9390463 0.8956118 0.7723317 #>  [2,] 0.1980023 0.1980023 1.6353970 #>  [3,] 1.2602306 0.3926964 0.3926964 #>  [4,] 0.3680278 0.6428365 0.3920976 #>  [5,] 0.2816918 0.2816918 0.2816918 #>  [6,] 2.4191220 1.8670950 1.4958052 #>  [7,] 0.2261208 0.6324528 0.3446946 #>  [8,] 0.7196356 0.1072250 1.6197650 #>  [9,] 5.6803805 1.6602886 0.4947832 #> [10,] 2.2850630 0.3962204 2.2850630 ## independence rmo(   10, 3,   c(1, 1, 0, 1, 0, 0, 0),   method = \"ESM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 0.7801827 1.1925207 1.2282790 #>  [2,] 0.6528116 1.1835067 0.6250840 #>  [3,] 1.2629739 0.8212927 0.1782162 #>  [4,] 0.5427513 2.8512961 0.2569508 #>  [5,] 0.5562053 0.8796018 0.5752900 #>  [6,] 0.3210594 1.7909844 1.0778337 #>  [7,] 0.2376185 1.4333168 0.2196906 #>  [8,] 2.0814817 0.7213820 2.5050839 #>  [9,] 0.1961726 1.4082164 0.2898257 #> [10,] 1.3030093 0.3541535 1.1675512 ## comonotone rmo(   10, 3,   c(0, 0, 0, 0, 0, 0, 1),   method = \"ESM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 1.9393370 1.9393370 1.9393370 #>  [2,] 1.2992857 1.2992857 1.2992857 #>  [3,] 0.4990043 0.4990043 0.4990043 #>  [4,] 0.3541411 0.3541411 0.3541411 #>  [5,] 0.7991115 0.7991115 0.7991115 #>  [6,] 0.9840713 0.9840713 0.9840713 #>  [7,] 1.0269125 1.0269125 1.0269125 #>  [8,] 1.3968638 1.3968638 1.3968638 #>  [9,] 0.1479245 0.1479245 0.1479245 #> [10,] 0.6183754 0.6183754 0.6183754  rmo(   10, 3,   c(0.4, 0.4, 0.1, 0.4, 0.1, 0.1, 0.4),   method = \"AM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 0.6992389 0.6992389 0.6992389 #>  [2,] 0.4701861 4.2561204 2.1753259 #>  [3,] 0.1978220 0.6064042 1.4022846 #>  [4,] 0.9311871 2.0127620 2.0127620 #>  [5,] 0.3142490 0.9734590 0.2767656 #>  [6,] 0.2090908 1.1308541 0.2090908 #>  [7,] 0.1316876 0.1316876 0.1316876 #>  [8,] 0.1746965 0.2043908 0.2043908 #>  [9,] 0.4649985 0.1396833 0.4649985 #> [10,] 1.8027330 1.0595503 1.8122288 ## independence rmo(   10, 3,   c(1, 1, 0, 1, 0, 0, 0),   method = \"AM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 0.5522557 2.4661127 3.8320752 #>  [2,] 1.1795123 0.4692113 2.3680299 #>  [3,] 1.2869295 1.1903597 0.1599839 #>  [4,] 1.1120509 0.2577420 0.7225105 #>  [5,] 1.2910405 2.4066856 0.1555744 #>  [6,] 1.8112570 0.5151302 0.2643085 #>  [7,] 1.0771988 0.1299781 0.2328066 #>  [8,] 0.4621908 1.1950802 1.4737141 #>  [9,] 0.6466723 0.2833440 1.1818346 #> [10,] 1.0017076 0.3536406 0.1577901 ## comonotone rmo(   10, 3,   c(0, 0, 0, 0, 0, 0, 1),   method = \"AM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 1.09504846 1.09504846 1.09504846 #>  [2,] 0.09458256 0.09458256 0.09458256 #>  [3,] 1.76391382 1.76391382 1.76391382 #>  [4,] 0.47302109 0.47302109 0.47302109 #>  [5,] 1.08291000 1.08291000 1.08291000 #>  [6,] 0.88865631 0.88865631 0.88865631 #>  [7,] 0.40215032 0.40215032 0.40215032 #>  [8,] 0.93347620 0.93347620 0.93347620 #>  [9,] 0.19469557 0.19469557 0.19469557 #> [10,] 0.19361824 0.19361824 0.19361824"},{"path":"/reference/rpextmo.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate from parametrized families of extendible MO distributions — rpextmo","title":"Simulate from parametrized families of extendible MO distributions — rpextmo","text":"Draws n iid d-variate samples parametrized family extendible MO distributions.","code":""},{"path":"/reference/rpextmo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate from parametrized families of extendible MO distributions — rpextmo","text":"","code":"rpextmo(   n,   d,   a = 0,   b = 0,   gamma = 1,   eta = NULL,   family = c(\"Armageddon\", \"Poisson\", \"Pareto\", \"Exponential\", \"AlphaStable\",     \"InverseGaussian\", \"Gamma\"),   method = c(\"MDCM\", \"LFM\", \"AM\", \"ESM\") )"},{"path":"/reference/rpextmo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate from parametrized families of extendible MO distributions — rpextmo","text":"n integer number samples. d integer dimension. non-negative double representing killing-rate \\(\\) Bernstein function. b non-negative double representing drift \\(b\\) Bernstein function. gamma positive double representing scaling factor integral part Bernstein function. eta numeric vector representing distribution family's parameters, see Details section. family string representing parametrized family. Use \"Armageddon\" Armageddon family, \"Poisson\" Poisson family, \"Pareto\" Pareto family, \"Exponential\" Exponential family, \"AlphaStable\" \\(\\alpha\\)-stable family, \"InverseGaussian\" Inverse-Gaussian family, \"Gamma\" Gamma family, see Details section. method string representing sampling algorithm used. Use \"MDCM\" Markovian death-set model, \"LFM\" Lévy–frailty model, \"\" Arnold model, \"ESM\" exogenous shock model (case Armageddon family, algorithm optimized consider finite shocks). recommend using ESM small dimensions; can used dimension \\(30\\).","code":""},{"path":"/reference/rpextmo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate from parametrized families of extendible MO distributions — rpextmo","text":"rpextmo returns numeric matrix size n x d. row corresponds independently identically (iid) distributed sample d-variate parametrized extendible Marshall–Olkin distribution specified parameters.","code":""},{"path":"/reference/rpextmo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate from parametrized families of extendible MO distributions — rpextmo","text":"parametrized ext. MO distribution family ext. MO distributions, see rextmo(), corresponding Bernstein functions form $$     \\psi{(x)}         = 1_{\\{ x > 0 \\}} + b x + \\gamma \\cdot             \\int_{0}^{\\infty}{ {[1 - e^{-ux}]} \\nu{(\\mathrm{d}u)} },                 \\quad x \\geq 0 , $$ $$    \\psi{(x)}        = 1_{\\{ x > 0 \\}} + b x + \\gamma \\cdot            \\int_{0}^{\\infty}{ \\frac{x}{x + u} \\sigma{(\\mathrm{d}u)} },                \\quad x \\geq 0 , $$ \\(, b \\geq 0\\). \\(\\nu\\) \\(\\sigma\\) represent Lévy measure Stieltjes measure, respectively. least one following conditions must hold: \\(> 0\\), \\(b > 0\\), \\(\\nu \\\\equiv 0\\) (resp. \\(\\sigma \\\\equiv 0\\)).","code":""},{"path":"/reference/rpextmo.html","id":"families","dir":"Reference","previous_headings":"","what":"Families","title":"Simulate from parametrized families of extendible MO distributions — rpextmo","text":"implemented families listed following; re-combinations possible, see ScaledBernsteinFunction, SumOfBernsteinFunctions, CompositeScaledBernsteinFunction. Armageddon family: \\(\\nu = \\sigma \\equiv 0\\) Bernstein function \\(\\psi\\): $$       \\psi{(x)}           = 1_{\\{ x > 0\\}} + b x ,               \\quad x \\geq 0 ,   $$ see ConstantBernsteinFunction LinearBernsteinFunction. Poisson family: \\(\\eta > 0\\) Bernstein function  \\(\\psi\\):: $$       \\psi{(x)}           = 1_{\\{ x > 0\\}} + b x + \\gamma \\cdot {[1 - e^{-\\eta x}]},               \\quad x \\geq 0 ,   $$ (discrete) Lévy measure \\(\\nu\\): $$       \\nu{(\\mathrm{d}u)}           = \\delta_{\\{ \\eta \\}}{(\\mathrm{d}u)} ,   $$ see PoissonBernsteinFunction. Pareto family: \\(\\eta \\\\mathbb{R}^2\\) \\(\\eta_1 \\{(0, 1)}, \\eta_2 > 0\\) Bernstein function Lévy measure \\(\\nu\\): $$       \\nu{(\\mathrm{d}u)}           = \\eta_{1} \\eta_{2}^{\\eta_{1}} \\cdot            u^{-\\eta_{1}-1}  1_{\\{ u > \\eta_{2}\\}} \\mathrm{d}u ,   $$ see ParetoBernsteinFunction. Exponential family: \\(\\eta > 0\\) Bernstein function \\(\\psi\\): $$       \\psi{(x)}           = 1_{\\{ x > 0\\}} + b x + \\gamma \\cdot \\frac{x}{x + \\eta} ,               \\quad x \\geq 0 ,   $$ Lévy measure \\(\\nu\\): $$       \\nu{(\\mathrm{d}u)}           = \\eta e^{-\\eta u} \\mathrm{d}u ,   $$ (discrete) Stieltjes measure \\(\\sigma\\): $$       \\sigma{(\\mathrm{d}u)}           = \\delta_{\\{ \\eta \\}}{(\\mathrm{d}u)} ,   $$ see ExponentialBernsteinFunction. \\(\\alpha\\)-stable family: \\(\\eta \\{(0, 1)}\\) Bernstein function \\(\\psi\\): $$       \\psi{(x)}           = 1_{\\{ x > 0\\}} + b x + \\gamma \\cdot x^{\\eta} ,               \\quad x \\geq 0 ,   $$ Lévy measure \\(\\nu\\): $$       \\nu{(\\mathrm{d}u)}           = \\frac{\\eta}{\\Gamma{(1 - \\eta)}} \\cdot u^{-\\eta-1} \\mathrm{d}u ,   $$ Stieljtes measure \\(\\sigma\\): $$       \\sigma{(\\mathrm{d}u)}           = \\frac{\\sin{(\\eta \\pi)}}{\\pi} \\cdot u^{\\eta - 1} \\mathrm{d}u ,   $$ see AlphaStableBernsteinFunction. Inverse-Gaussian family: \\(\\eta > 0\\) Bernstein function \\(\\psi\\): $$       \\psi{(x)}           = 1_{\\{ x > 0\\}} + b x + \\gamma \\cdot                {\\left[ \\sqrt{2 x + \\eta^2} - \\eta \\right]},               \\quad x \\geq 0 ,   $$ Lévy measure \\(\\nu\\): $$       \\nu{(\\mathrm{d}u)}           = \\frac{1}{ \\sqrt{2 \\pi} } \\cdot               \\frac{ e^{-\\frac{1}{2} \\eta^2 u} }{ \\sqrt{u^3} } \\mathrm{d}u ,   $$ Stieltjes measure \\(\\sigma\\): $$       \\sigma{(\\mathrm{d}u)}           = \\frac{\\sin{(\\pi / 2)}}{\\pi} \\cdot               \\frac{\\sqrt{2 u - \\eta^2}} {u}                1_{\\{ u > \\eta^2 / 2 \\}} \\mathrm{d}u ,   $$ see InverseGaussianBernsteinFunction. Gamma family: \\(\\eta > 0\\) Bernstein function \\(\\psi\\): $$       \\psi{(x)}           = 1_{\\{ x > 0\\}} + b x + \\gamma \\cdot                \\log{\\left( 1 +  \\frac{x}{\\eta} \\right)} ,               \\quad x \\geq 0 ,   $$ Lévy measure \\(\\nu\\): $$       \\nu{(\\mathrm{d}u)}           = e^{-\\eta u} u^{-1} \\mathrm{d}u ,   $$ Stieljtes measure \\(\\sigma\\): $$       \\sigma{(\\mathrm{d}u)}           = u^{-1} 1_{\\{ u > \\eta \\}} \\mathrm{d}u ,   $$ see GammaBernsteinFunction.","code":""},{"path":"/reference/rpextmo.html","id":"simulation-algorithms","dir":"Reference","previous_headings":"","what":"Simulation algorithms","title":"Simulate from parametrized families of extendible MO distributions — rpextmo","text":"MDCM, , ESM simulation algorithms exchangeable Marshall–Olkin distribution can used. , corresponding Bernstein function passed rextmo(). exception ESM Armageddon family uses optimized version considering finite shock-times. Lévy-frailty model (LFM) simulates elements random vector first-hitting times compound Poisson subordinator \\(\\Lambda\\) sets \\((E_i, \\infty)\\) iid unit exponential random variables. , subordinator linear combination pure-drift subordinator, pure-killing subordinator, pure-jump compound Poisson subordinator, .e. $$      \\Lambda_{t}          = \\infty \\cdot 1_{\\{ \\epsilon > t \\}} + b t +            \\sum_{j=1}^{N_{\\gamma t}} X_{j} ,              \\quad t \\geq 0,   $$ \\(\\epsilon\\) unit exponential rv, n Poisson process, \\(X_{1}, X_{2}, \\ldots\\) iid jumps corresponding jump distribution, see (see pp. 140 psqq. Mai Scherer 2017) .","code":""},{"path":"/reference/rpextmo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate from parametrized families of extendible MO distributions — rpextmo","text":"Mai J, Scherer M (2017). Simulating copulas: stochastic models, sampling algorithms applications,  Series Quantitative Finance, 2 edition. World Scientific. doi:10.1142/10265 .","code":""},{"path":[]},{"path":"/reference/rpextmo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate from parametrized families of extendible MO distributions — rpextmo","text":"","code":"## Armageddon rpextmo(10, 3, a = 0.2, b = 0.5) #>             [,1]      [,2]      [,3] #>  [1,] 0.89621129 2.0842032 3.5381627 #>  [2,] 1.03257499 2.9340503 2.0705893 #>  [3,] 0.36916084 3.9920367 1.4529960 #>  [4,] 3.78523642 3.1333137 0.6449898 #>  [5,] 0.16369341 4.4059409 0.5564593 #>  [6,] 0.46630046 0.1476089 0.4663005 #>  [7,] 0.04938859 0.8269391 0.8269391 #>  [8,] 0.36539716 0.3653972 0.3653972 #>  [9,] 0.73228974 1.9320894 2.9286017 #> [10,] 1.89723765 0.7176901 1.5282237 ## comonotone rpextmo(10, 3, a = 1) #>            [,1]      [,2]      [,3] #>  [1,] 1.6810140 1.6810140 1.6810140 #>  [2,] 1.8425211 1.8425211 1.8425211 #>  [3,] 0.1213155 0.1213155 0.1213155 #>  [4,] 0.2720825 0.2720825 0.2720825 #>  [5,] 1.8494939 1.8494939 1.8494939 #>  [6,] 2.5877426 2.5877426 2.5877426 #>  [7,] 0.6417312 0.6417312 0.6417312 #>  [8,] 1.0822153 1.0822153 1.0822153 #>  [9,] 0.6904121 0.6904121 0.6904121 #> [10,] 0.6157218 0.6157218 0.6157218 ## independence rpextmo(10, 3, b = 1) #>             [,1]       [,2]      [,3] #>  [1,] 0.40709804 1.48784761 1.6796328 #>  [2,] 0.79247883 0.20959998 2.4228128 #>  [3,] 1.28355319 3.34977485 1.1788727 #>  [4,] 0.84327665 0.05853796 4.2588416 #>  [5,] 2.43531709 0.33539233 0.3266379 #>  [6,] 0.51265654 0.15976861 0.1106287 #>  [7,] 3.20715497 1.37439915 0.4793136 #>  [8,] 0.02704653 1.66477329 0.2841166 #>  [9,] 0.66486077 0.09924463 3.3360172 #> [10,] 0.83610770 0.31648462 0.2765661  rpextmo(10, 3, a = 0.2, b = 0.5, method = \"ESM\") #>             [,1]      [,2]      [,3] #>  [1,] 0.44279183 0.4427918 0.4427918 #>  [2,] 1.92128880 0.5874270 0.5820199 #>  [3,] 0.19383557 1.4004942 0.5825797 #>  [4,] 0.50712328 0.1380126 2.6428741 #>  [5,] 1.32982008 0.5798475 1.3298201 #>  [6,] 0.03437650 0.0343765 0.0343765 #>  [7,] 1.71119306 1.7111931 1.6354009 #>  [8,] 0.06703615 0.7992335 1.1912454 #>  [9,] 0.77550368 0.9367431 0.5257273 #> [10,] 1.75218760 1.2486361 0.8867321 ## comonotone rpextmo(10, 3, a = 1, method = \"ESM\") #>             [,1]       [,2]       [,3] #>  [1,] 0.06609500 0.06609500 0.06609500 #>  [2,] 0.24854872 0.24854872 0.24854872 #>  [3,] 0.56347715 0.56347715 0.56347715 #>  [4,] 0.56796047 0.56796047 0.56796047 #>  [5,] 1.23500528 1.23500528 1.23500528 #>  [6,] 1.62235398 1.62235398 1.62235398 #>  [7,] 0.04455849 0.04455849 0.04455849 #>  [8,] 0.36619181 0.36619181 0.36619181 #>  [9,] 0.06420805 0.06420805 0.06420805 #> [10,] 0.01388780 0.01388780 0.01388780 ## independence rpextmo(10, 3, b = 1, method = \"ESM\") #>              [,1]       [,2]      [,3] #>  [1,] 0.410020125 0.04331954 0.3709553 #>  [2,] 0.205320206 0.06678018 0.8461123 #>  [3,] 0.682522581 2.76714979 1.1642519 #>  [4,] 0.430645244 0.72283038 0.3090019 #>  [5,] 1.797598664 0.63018201 0.5841694 #>  [6,] 0.004310967 0.40139910 1.9675728 #>  [7,] 0.688441569 0.44523196 0.3219563 #>  [8,] 1.562508828 0.41686504 7.0614505 #>  [9,] 0.872413370 1.82506307 0.8467622 #> [10,] 0.077189736 0.78141338 2.1288718  rpextmo(10, 3, a = 0.2, b = 0.5, method = \"LFM\") #>             [,1]      [,2]      [,3] #>  [1,] 0.72836470 1.3655610 0.5295375 #>  [2,] 2.12854818 1.1311362 0.6668655 #>  [3,] 0.54464555 1.2432002 2.4012770 #>  [4,] 2.48488732 0.3806837 4.1463513 #>  [5,] 2.03852740 0.4074661 1.0501524 #>  [6,] 0.19850696 2.4604301 2.8931309 #>  [7,] 4.27897311 1.6004939 2.4918548 #>  [8,] 0.06838816 0.0812121 0.0812121 #>  [9,] 5.16862432 0.8884238 0.4066343 #> [10,] 2.67035647 0.9486983 0.6333626 ## comonotone rpextmo(10, 3, a = 1, method = \"LFM\") #>             [,1]       [,2]       [,3] #>  [1,] 2.85785574 2.85785574 2.85785574 #>  [2,] 0.14855876 0.14855876 0.14855876 #>  [3,] 0.67868470 0.67868470 0.67868470 #>  [4,] 0.21024986 0.21024986 0.21024986 #>  [5,] 0.39111814 0.39111814 0.39111814 #>  [6,] 0.41757003 0.41757003 0.41757003 #>  [7,] 0.07291429 0.07291429 0.07291429 #>  [8,] 1.26816524 1.26816524 1.26816524 #>  [9,] 0.27908496 0.27908496 0.27908496 #> [10,] 0.80037174 0.80037174 0.80037174 ## independence rpextmo(10, 3, b = 1, method = \"LFM\") #>              [,1]       [,2]      [,3] #>  [1,] 0.140048902 0.93066662 0.3364388 #>  [2,] 1.877347645 3.23646556 0.6203077 #>  [3,] 0.261899964 0.27426001 0.8709385 #>  [4,] 0.039781756 0.69249110 0.5967041 #>  [5,] 1.647165636 1.24945564 0.8416705 #>  [6,] 0.001319481 0.07552047 0.8585607 #>  [7,] 0.782727998 0.77378015 0.4466014 #>  [8,] 0.859113725 0.04774431 2.8735176 #>  [9,] 0.676989209 0.03677058 1.4296343 #> [10,] 2.768762937 0.18183889 0.1060367  rpextmo(10, 3, a = 0.2, b = 0.5, method = \"MDCM\") #>             [,1]      [,2]       [,3] #>  [1,] 0.87835914 1.4939835 1.93689103 #>  [2,] 0.53299105 0.5329910 0.53299105 #>  [3,] 0.26964452 0.2696445 0.26964452 #>  [4,] 0.37239988 0.2239705 0.56762857 #>  [5,] 1.48524870 0.6794219 3.19817511 #>  [6,] 0.01622269 3.0880936 1.80446981 #>  [7,] 1.69519184 0.2585454 1.73541402 #>  [8,] 2.74275290 0.4062394 0.04972496 #>  [9,] 0.44622098 0.1905913 2.29717732 #> [10,] 0.08117781 0.0669228 0.08117781 ## comonotone rpextmo(10, 3, a = 1, method = \"MDCM\") #>             [,1]       [,2]       [,3] #>  [1,] 0.05128906 0.05128906 0.05128906 #>  [2,] 0.42494977 0.42494977 0.42494977 #>  [3,] 1.33246982 1.33246982 1.33246982 #>  [4,] 0.35864001 0.35864001 0.35864001 #>  [5,] 0.39001179 0.39001179 0.39001179 #>  [6,] 0.09554273 0.09554273 0.09554273 #>  [7,] 2.92553794 2.92553794 2.92553794 #>  [8,] 2.77771333 2.77771333 2.77771333 #>  [9,] 0.18316129 0.18316129 0.18316129 #> [10,] 0.26645069 0.26645069 0.26645069 ## independence rpextmo(10, 3, b = 1, method = \"MDCM\") #>             [,1]       [,2]        [,3] #>  [1,] 1.47709330 0.06463654 2.431923410 #>  [2,] 0.48466554 0.96624072 0.358047509 #>  [3,] 0.61100795 0.15042516 0.872952231 #>  [4,] 0.07760456 0.64669369 0.651835018 #>  [5,] 1.65207907 0.86603251 0.797382917 #>  [6,] 1.05694590 0.41452114 0.651099972 #>  [7,] 0.34495765 1.33725389 1.252801074 #>  [8,] 0.25202976 1.92940270 0.003086432 #>  [9,] 1.38411975 2.56640373 3.573963291 #> [10,] 0.80124656 0.70706268 1.812912002  rpextmo(10, 3, a = 0.2, b = 0.5, method = \"AM\") #>             [,1]       [,2]       [,3] #>  [1,] 2.99731826 0.48430071 0.51211736 #>  [2,] 0.33018979 0.34744121 2.32650335 #>  [3,] 1.73017814 1.00249434 1.03765527 #>  [4,] 0.61919409 0.61919409 0.05294610 #>  [5,] 0.02486854 0.02486854 0.02486854 #>  [6,] 0.42842286 1.79151058 2.02024563 #>  [7,] 1.72769900 0.82994022 0.94476401 #>  [8,] 2.00154015 0.65501744 2.54994633 #>  [9,] 1.61521986 0.08758411 0.29520690 #> [10,] 0.70152047 2.40248107 0.46042432 ## comonotone rpextmo(10, 3, a = 1, method = \"AM\") #>             [,1]       [,2]       [,3] #>  [1,] 0.42325263 0.42325263 0.42325263 #>  [2,] 1.25672429 1.25672429 1.25672429 #>  [3,] 0.05332070 0.05332070 0.05332070 #>  [4,] 3.56592615 3.56592615 3.56592615 #>  [5,] 0.03112095 0.03112095 0.03112095 #>  [6,] 0.04975225 0.04975225 0.04975225 #>  [7,] 0.83653986 0.83653986 0.83653986 #>  [8,] 0.31289721 0.31289721 0.31289721 #>  [9,] 3.59696330 3.59696330 3.59696330 #> [10,] 0.27430244 0.27430244 0.27430244 ## independence rpextmo(10, 3, b = 1, method = \"AM\") #>            [,1]      [,2]      [,3] #>  [1,] 0.8360553 1.0123259 0.4097994 #>  [2,] 0.3994600 0.7153279 0.2680559 #>  [3,] 0.7935011 2.2642746 0.2462195 #>  [4,] 0.5856387 1.8867295 0.4583639 #>  [5,] 1.4802686 0.7811555 0.3359149 #>  [6,] 0.8572979 3.4626641 0.4291347 #>  [7,] 0.8481199 0.7522090 0.5962648 #>  [8,] 0.6882408 0.5434623 0.1053545 #>  [9,] 0.9922098 1.7011508 0.4205175 #> [10,] 0.4732692 0.1323255 0.9706242  rpextmo(10, 3, a = 0.2, b = 0.5, family = \"Armageddon\") #>              [,1]      [,2]      [,3] #>  [1,] 1.938126465 1.9243528 0.9147238 #>  [2,] 1.121244932 1.6721203 1.8819600 #>  [3,] 1.575278642 0.5305009 1.3326253 #>  [4,] 1.305489952 3.4483681 5.6888674 #>  [5,] 1.443910940 0.2280847 1.4752116 #>  [6,] 2.892496765 5.9725644 0.3676216 #>  [7,] 0.004127329 0.9228158 0.9228158 #>  [8,] 3.551666681 0.6498255 1.0761295 #>  [9,] 1.070196558 2.1955393 1.7742697 #> [10,] 1.527591435 1.7552035 1.1302744 ## comonotone rpextmo(10, 3, a = 1, family = \"Armageddon\") #>             [,1]       [,2]       [,3] #>  [1,] 0.38369868 0.38369868 0.38369868 #>  [2,] 0.07666186 0.07666186 0.07666186 #>  [3,] 0.02913211 0.02913211 0.02913211 #>  [4,] 3.24173555 3.24173555 3.24173555 #>  [5,] 2.10357454 2.10357454 2.10357454 #>  [6,] 0.03046840 0.03046840 0.03046840 #>  [7,] 1.00971579 1.00971579 1.00971579 #>  [8,] 0.18552788 0.18552788 0.18552788 #>  [9,] 2.99151403 2.99151403 2.99151403 #> [10,] 0.69290116 0.69290116 0.69290116 ## independence rpextmo(10, 3, b = 1, family = \"Armageddon\") #>             [,1]      [,2]      [,3] #>  [1,] 0.41007998 0.3331954 0.4400782 #>  [2,] 0.79727230 0.4089764 0.9641383 #>  [3,] 0.22479230 1.1814492 2.1860416 #>  [4,] 2.19326550 0.1048520 1.6636980 #>  [5,] 0.06268378 0.1703145 1.8700177 #>  [6,] 0.03039613 0.8809782 1.0271963 #>  [7,] 0.44068440 0.8526026 2.7325575 #>  [8,] 3.17224009 0.6282484 0.8513373 #>  [9,] 1.86477836 0.5644167 0.4208404 #> [10,] 0.32612638 2.2733621 0.2577092  rpextmo(   10, 3,   a = 0.2, b = 0.5,   family = \"Armageddon\",   method = \"ESM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 2.4584340 4.8565815 0.9577340 #>  [2,] 1.2918123 1.7651598 0.3664662 #>  [3,] 0.1232499 5.7654812 0.3070638 #>  [4,] 1.8542195 0.8257255 5.7491443 #>  [5,] 0.3874206 0.2830174 1.7798608 #>  [6,] 1.7728313 0.8521483 2.6032440 #>  [7,] 0.2773409 1.3151333 1.3151333 #>  [8,] 1.2231892 3.0099358 1.2189191 #>  [9,] 4.4190728 4.1856947 0.2694015 #> [10,] 0.6541937 1.6159650 1.4153201 ## comonotone rpextmo(   10, 3,   a = 1,   family = \"Armageddon\",   method = \"ESM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 1.96968439 1.96968439 1.96968439 #>  [2,] 0.70810874 0.70810874 0.70810874 #>  [3,] 0.44460351 0.44460351 0.44460351 #>  [4,] 0.09020110 0.09020110 0.09020110 #>  [5,] 0.49538333 0.49538333 0.49538333 #>  [6,] 0.65429407 0.65429407 0.65429407 #>  [7,] 0.07764398 0.07764398 0.07764398 #>  [8,] 0.91860524 0.91860524 0.91860524 #>  [9,] 0.26364057 0.26364057 0.26364057 #> [10,] 1.19124341 1.19124341 1.19124341 ## independence rpextmo(   10, 3,   b = 1,   family = \"Armageddon\",   method = \"ESM\" ) #>             [,1]        [,2]       [,3] #>  [1,] 0.01212768 0.313966308 0.62584544 #>  [2,] 0.23253937 0.008245956 0.10120260 #>  [3,] 0.26985475 0.127790034 1.83088918 #>  [4,] 0.42559192 1.807410676 0.06040545 #>  [5,] 1.11281792 0.265425964 0.01650703 #>  [6,] 1.66040691 0.095689961 0.52367275 #>  [7,] 0.70943021 0.078578082 0.88450787 #>  [8,] 0.12280007 1.219337656 1.94511170 #>  [9,] 0.78709395 0.260043557 0.24206683 #> [10,] 0.99797200 0.419092362 0.24887374  rpextmo(   10, 3,   a = 0.2, b = 0.5,   family = \"Armageddon\",   method = \"LFM\" ) #>             [,1]      [,2]      [,3] #>  [1,]  0.2623618 1.4259200 5.9235331 #>  [2,] 10.0044817 1.9863105 2.2330708 #>  [3,]  0.3750107 0.4012815 1.5768078 #>  [4,]  2.0585510 0.4769063 2.2237384 #>  [5,]  1.8239505 0.1705908 1.8239505 #>  [6,]  0.3031992 1.1851955 0.3906500 #>  [7,]  3.4403534 1.5937795 3.1091176 #>  [8,]  2.7349971 1.8138409 0.7851071 #>  [9,]  4.8139849 1.3360238 3.3062797 #> [10,]  0.4736677 0.6177787 1.4483524 ## comonotone rpextmo(   10, 3,   a = 1,   family = \"Armageddon\",   method = \"LFM\" ) #>               [,1]         [,2]         [,3] #>  [1,] 0.3261063732 0.3261063732 0.3261063732 #>  [2,] 0.5885375543 0.5885375543 0.5885375543 #>  [3,] 0.4048283181 0.4048283181 0.4048283181 #>  [4,] 0.7828417932 0.7828417932 0.7828417932 #>  [5,] 0.5653134762 0.5653134762 0.5653134762 #>  [6,] 0.0003980658 0.0003980658 0.0003980658 #>  [7,] 0.6126912632 0.6126912632 0.6126912632 #>  [8,] 1.8013075493 1.8013075493 1.8013075493 #>  [9,] 0.3451306480 0.3451306480 0.3451306480 #> [10,] 0.6913057356 0.6913057356 0.6913057356 ## independence rpextmo(   10, 3,   b = 1,   family = \"Armageddon\",   method = \"LFM\" ) #>            [,1]       [,2]      [,3] #>  [1,] 0.5064879 0.46096396 0.7761338 #>  [2,] 1.3147256 1.14686513 2.9144251 #>  [3,] 0.3502860 1.29326120 0.2692002 #>  [4,] 1.2960685 3.79347970 1.9559479 #>  [5,] 0.9365257 0.02338926 0.9443337 #>  [6,] 2.4498252 2.55495762 1.4829420 #>  [7,] 0.3530585 1.34039142 0.2882422 #>  [8,] 0.9268401 0.58472904 1.4550046 #>  [9,] 1.0242157 0.63676018 0.2824616 #> [10,] 0.6004604 0.17248792 0.1654850  rpextmo(   10, 3,   a = 0.2, b = 0.5,   family = \"Armageddon\",   method = \"MDCM\" ) #>             [,1]      [,2]      [,3] #>  [1,] 1.33633072 0.9515362 0.1474908 #>  [2,] 0.09307647 2.2159436 2.4065549 #>  [3,] 1.03599917 2.4532267 3.5005488 #>  [4,] 1.98080630 0.8288638 2.6458166 #>  [5,] 0.87010114 0.9907857 2.8378797 #>  [6,] 1.13053095 3.1322106 0.0400049 #>  [7,] 1.28504169 0.7292452 0.5127503 #>  [8,] 2.14758773 1.1431983 0.0473579 #>  [9,] 0.34804635 1.0337113 0.3466671 #> [10,] 0.85696867 1.1195955 1.1195955 ## comonotone rpextmo(   10, 3,   a = 1,   family = \"Armageddon\",   method = \"MDCM\" ) #>              [,1]        [,2]        [,3] #>  [1,] 1.737199530 1.737199530 1.737199530 #>  [2,] 2.606278631 2.606278631 2.606278631 #>  [3,] 0.467994520 0.467994520 0.467994520 #>  [4,] 0.737812204 0.737812204 0.737812204 #>  [5,] 0.719131352 0.719131352 0.719131352 #>  [6,] 0.125687358 0.125687358 0.125687358 #>  [7,] 2.747122092 2.747122092 2.747122092 #>  [8,] 1.190380410 1.190380410 1.190380410 #>  [9,] 0.244921049 0.244921049 0.244921049 #> [10,] 0.008889997 0.008889997 0.008889997 ## independence rpextmo(   10, 3,   b = 1,   family = \"Armageddon\",   method = \"MDCM\" ) #>             [,1]      [,2]      [,3] #>  [1,] 0.35015922 1.3793892 0.2135113 #>  [2,] 1.16954278 0.4925328 0.5895984 #>  [3,] 0.26141054 1.9473061 0.7216814 #>  [4,] 0.80181342 0.2366670 0.1021136 #>  [5,] 0.02805716 1.0543020 0.4091314 #>  [6,] 0.64303190 0.9055483 1.6370541 #>  [7,] 1.12274308 0.7486118 0.0706893 #>  [8,] 0.89268619 3.4277502 2.1333087 #>  [9,] 0.74863393 0.1834828 1.2208946 #> [10,] 0.31474647 1.9647424 0.6395613  rpextmo(   10, 3,   a = 0.2, b = 0.5,   family = \"Armageddon\",   method = \"AM\" ) #>              [,1]      [,2]      [,3] #>  [1,] 1.916990631 1.9775960 2.2351090 #>  [2,] 2.578441508 1.9084050 2.6844572 #>  [3,] 1.183363664 1.1833637 1.1833637 #>  [4,] 0.369018350 1.2415112 1.9975318 #>  [5,] 0.566798524 0.5667985 0.5667985 #>  [6,] 0.005228992 1.1371434 1.0338168 #>  [7,] 1.283549956 1.1347429 1.2835500 #>  [8,] 0.675511026 0.1868192 1.0689827 #>  [9,] 3.733589028 4.3659582 0.9979497 #> [10,] 0.042802219 2.7256658 1.1556354 ## comonotone rpextmo(   10, 3,   a = 1,   family = \"Armageddon\",   method = \"AM\" ) #>              [,1]        [,2]        [,3] #>  [1,] 1.321498486 1.321498486 1.321498486 #>  [2,] 0.594876691 0.594876691 0.594876691 #>  [3,] 2.464490784 2.464490784 2.464490784 #>  [4,] 0.547399436 0.547399436 0.547399436 #>  [5,] 0.165612901 0.165612901 0.165612901 #>  [6,] 0.050233243 0.050233243 0.050233243 #>  [7,] 1.812641806 1.812641806 1.812641806 #>  [8,] 0.009362767 0.009362767 0.009362767 #>  [9,] 2.044736134 2.044736134 2.044736134 #> [10,] 0.215938923 0.215938923 0.215938923 ## independence rpextmo(   10, 3,   b = 1,   family = \"Armageddon\",   method = \"AM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.99587371 0.03714099 1.34252627 #>  [2,] 0.16174384 2.53313655 0.55171533 #>  [3,] 0.53650718 0.03638600 0.52934046 #>  [4,] 0.32005828 0.58427340 0.37710530 #>  [5,] 0.39184240 2.90868886 0.01428954 #>  [6,] 1.18160221 1.13506756 1.03067598 #>  [7,] 0.12636168 1.39877799 1.31931319 #>  [8,] 0.02372679 0.57788295 2.30416957 #>  [9,] 1.41718399 0.31674070 1.12204694 #> [10,] 0.98192886 1.32971664 0.45860550  ## Poisson rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Poisson\" ) #>            [,1]       [,2]       [,3] #>  [1,] 0.5384901 2.94813208 0.53849015 #>  [2,] 0.1017191 0.20041889 0.20041889 #>  [3,] 0.5203302 1.68125615 1.68125615 #>  [4,] 0.6172509 0.07564676 0.49279121 #>  [5,] 0.4134294 0.41342935 0.17597587 #>  [6,] 1.1171599 0.52632538 1.66544876 #>  [7,] 0.1135298 0.11352976 0.11352976 #>  [8,] 1.3522320 0.17712849 0.17712849 #>  [9,] 0.6229397 0.20377457 0.20377457 #> [10,] 0.4708807 0.47088074 0.05042807 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Poisson\",   method = \"ESM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 2.43079020 1.17028967 1.32820619 #>  [2,] 0.12397769 0.52013540 0.52013540 #>  [3,] 0.09643320 0.36050359 0.36050359 #>  [4,] 0.11645007 1.36989266 0.14540044 #>  [5,] 0.52898318 0.48308691 0.29063290 #>  [6,] 0.82812959 0.82812959 0.82812959 #>  [7,] 0.74103510 0.02667862 1.12138619 #>  [8,] 0.95942351 0.50026351 0.44200090 #>  [9,] 0.09438203 0.26381668 0.08334398 #> [10,] 0.31933792 0.49854279 0.78398464 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Poisson\",   method = \"LFM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.28442456 1.61863272 0.86589514 #>  [2,] 0.09925539 0.09925539 0.09925539 #>  [3,] 0.47298241 1.91588460 0.18299160 #>  [4,] 0.23050878 0.19900228 1.22240209 #>  [5,] 0.03472681 0.23119265 0.78710040 #>  [6,] 0.27645898 0.38021820 0.27645898 #>  [7,] 0.11729923 0.11729923 0.11729923 #>  [8,] 0.11653738 0.09861330 1.48931647 #>  [9,] 1.64231168 0.81155273 0.95508818 #> [10,] 0.43238588 1.09517192 0.30073282 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Poisson\",   method = \"MDCM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 1.83163425 0.39332444 1.65798683 #>  [2,] 0.08378116 0.05957384 0.05957384 #>  [3,] 0.65562064 0.28198679 0.23941361 #>  [4,] 0.64311122 0.05109943 0.64311122 #>  [5,] 0.21249733 0.11958074 0.11958074 #>  [6,] 1.35980242 0.01116162 0.01116162 #>  [7,] 0.20884014 0.20884014 0.20884014 #>  [8,] 0.10716782 0.78009466 0.45235794 #>  [9,] 0.33656941 0.40392144 0.28408869 #> [10,] 2.24581197 0.27656755 0.27656755 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Poisson\",   method = \"AM\" ) #>              [,1]       [,2]      [,3] #>  [1,] 0.001350696 0.60377575 0.6037758 #>  [2,] 1.195928400 0.39072463 1.4858236 #>  [3,] 1.169574206 0.82208132 0.4785511 #>  [4,] 0.879878990 0.36450902 0.8798790 #>  [5,] 0.087564714 0.06219288 0.7890873 #>  [6,] 0.504653993 0.19882999 0.1880001 #>  [7,] 4.171635567 0.34309057 0.3430906 #>  [8,] 0.600307222 0.46027151 0.8851565 #>  [9,] 1.511836454 0.21182177 0.6172429 #> [10,] 0.829267113 0.26551310 0.4296528  ## Pareto rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = c(0.5, 1e-4), family = \"Pareto\" ) #>             [,1]       [,2]      [,3] #>  [1,] 0.03801943 0.65604880 0.6560488 #>  [2,] 3.60108700 0.74417377 2.8460586 #>  [3,] 0.31922982 4.52410839 0.2823101 #>  [4,] 1.27952712 1.06636982 0.4914272 #>  [5,] 2.42398714 3.46157273 0.6318315 #>  [6,] 0.17385777 0.89405255 0.8940526 #>  [7,] 2.68123944 8.50681993 2.0407879 #>  [8,] 0.72334847 0.03523473 0.8039953 #>  [9,] 0.01001097 0.34361360 3.7353608 #> [10,] 1.89887487 1.08444176 0.6752454 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = c(0.5, 1e-4), family = \"Pareto\",   method = \"ESM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.53043624 0.08917464 2.10482031 #>  [2,] 3.96575635 0.09047190 1.75178957 #>  [3,] 0.01329087 0.01329087 0.01329087 #>  [4,] 0.13509027 0.55130302 0.25220644 #>  [5,] 0.80385731 1.61296322 0.36377964 #>  [6,] 0.18037861 3.35820185 0.11371902 #>  [7,] 2.63125259 2.32816778 0.51317384 #>  [8,] 1.27527803 4.81382291 0.20352545 #>  [9,] 1.70279273 5.93255358 1.65909954 #> [10,] 3.03615947 0.48737702 5.12532961 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = c(0.5, 1e-4), family = \"Pareto\",   method = \"LFM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 0.3802050 0.2712353 0.9743875 #>  [2,] 1.7928790 1.9662166 4.0124992 #>  [3,] 1.2947774 0.6111844 1.2947774 #>  [4,] 0.3219877 0.4421034 3.5818796 #>  [5,] 0.2987168 0.2987168 0.2987168 #>  [6,] 3.5240904 0.1640650 0.1175563 #>  [7,] 1.1947760 2.0892588 1.0199826 #>  [8,] 0.6710051 0.1058966 0.9582827 #>  [9,] 0.2628965 1.2797715 2.1528078 #> [10,] 2.0511174 0.7190057 0.4311222 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = c(0.5, 1e-4), family = \"Pareto\",   method = \"MDCM\" ) #>             [,1]      [,2]      [,3] #>  [1,] 1.78511648 1.7851165 1.7851165 #>  [2,] 0.45031283 0.8511236 0.4967267 #>  [3,] 2.25475203 2.3884482 2.8899155 #>  [4,] 0.06972239 4.0369886 0.1178982 #>  [5,] 1.35833505 3.8977334 0.4302498 #>  [6,] 1.29581633 2.5822523 5.4889835 #>  [7,] 0.75015457 1.2888028 1.2888028 #>  [8,] 0.78183056 0.9798557 0.6210200 #>  [9,] 3.49188211 0.5245863 1.3741688 #> [10,] 0.61538900 0.6153890 0.4316032 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = c(0.5, 1e-4), family = \"Pareto\",   method = \"AM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 0.2046806 1.1587371 0.3899301 #>  [2,] 2.5762738 0.7269645 1.0138938 #>  [3,] 0.9149128 2.9388244 3.2952497 #>  [4,] 1.0490644 1.2558981 1.7355325 #>  [5,] 2.0638111 3.4190247 1.4019185 #>  [6,] 0.4646360 8.4839746 5.9659956 #>  [7,] 0.6213153 0.5319838 0.6213153 #>  [8,] 1.2663465 0.3985395 1.2663465 #>  [9,] 0.6243965 0.6243965 0.6243965 #> [10,] 0.2810049 0.2810049 0.2810049  ## Exponential rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Exponential\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.76915167 0.16643010 0.76915167 #>  [2,] 0.72384121 0.72384121 0.72384121 #>  [3,] 0.27848983 0.82470260 0.63694234 #>  [4,] 0.03642472 0.03642472 0.52975088 #>  [5,] 0.48350055 0.48350055 0.21553313 #>  [6,] 0.11716964 0.44770357 0.26467111 #>  [7,] 0.76499150 0.76499150 0.14882730 #>  [8,] 0.25587822 0.25587822 0.33556853 #>  [9,] 0.33816101 0.33816101 0.33816101 #> [10,] 0.18633327 0.71142430 0.05604849 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Exponential\",   method = \"ESM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.04045609 0.04045609 0.04045609 #>  [2,] 0.61948467 0.83121140 0.83121140 #>  [3,] 0.80668842 0.23160683 0.80668842 #>  [4,] 0.61069644 0.61069644 0.16759510 #>  [5,] 0.29933560 0.44578367 0.44578367 #>  [6,] 0.95513595 0.95513595 0.95513595 #>  [7,] 0.23405182 0.23405182 0.23405182 #>  [8,] 0.73397860 1.46113314 1.34970633 #>  [9,] 0.57296737 0.57296737 0.57296737 #> [10,] 0.39049138 0.12680916 0.39049138 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Exponential\",   method = \"LFM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.23483294 0.99321744 0.56400377 #>  [2,] 0.24431059 0.24431059 0.24431059 #>  [3,] 0.05830077 0.05830077 0.05830077 #>  [4,] 0.07863727 0.17004309 0.13542599 #>  [5,] 0.16102862 2.31560185 0.16102862 #>  [6,] 0.87523643 0.87523643 1.34311737 #>  [7,] 0.67926441 0.20844698 0.47263393 #>  [8,] 0.21356090 0.21356090 0.21356090 #>  [9,] 0.36785517 0.36785517 0.36785517 #> [10,] 0.31870396 0.39930528 0.31870396 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Exponential\",   method = \"MDCM\" ) #>             [,1]       [,2]      [,3] #>  [1,] 0.77928387 0.65551992 0.3285593 #>  [2,] 0.08902028 0.08477003 0.5310817 #>  [3,] 0.69517226 0.69517226 0.6705815 #>  [4,] 1.79767599 0.10844114 1.7001421 #>  [5,] 0.54178692 0.54178692 0.5417869 #>  [6,] 0.49309254 0.41700532 1.0259115 #>  [7,] 0.18092478 0.19794202 0.1979420 #>  [8,] 0.23914103 0.29003162 0.2900316 #>  [9,] 1.01615056 1.01615056 0.8888574 #> [10,] 0.06165271 1.39569173 0.6276128 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Exponential\",   method = \"AM\" ) #>             [,1]       [,2]      [,3] #>  [1,] 0.12815252 1.24027251 0.1281525 #>  [2,] 0.16768521 0.27263236 0.3655216 #>  [3,] 0.44073798 1.65687245 1.0118053 #>  [4,] 0.87220602 0.87220602 0.3562619 #>  [5,] 0.25566983 0.08195684 0.2556698 #>  [6,] 1.17582650 0.31296611 0.1271911 #>  [7,] 0.48832033 0.48832033 0.2283399 #>  [8,] 0.96462034 0.19951242 0.3631285 #>  [9,] 1.15618385 1.15618385 1.1561839 #> [10,] 0.03859964 0.03859964 0.0250658  ## Alpha-Stable rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"AlphaStable\" ) #>            [,1]       [,2]        [,3] #>  [1,] 0.1188554 0.05302391 0.412475456 #>  [2,] 0.7702091 0.77020913 0.770209134 #>  [3,] 0.0839063 0.81381170 0.813811703 #>  [4,] 0.7135108 0.25968423 0.462032316 #>  [5,] 0.5799051 0.36311545 0.002914865 #>  [6,] 0.3342043 0.13352202 0.133522024 #>  [7,] 0.2883869 0.28838686 0.282204630 #>  [8,] 0.3053661 0.23389301 0.107816288 #>  [9,] 0.3735397 0.19252756 0.373539692 #> [10,] 0.3457597 0.32886734 0.281045297 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"AlphaStable\",   method = \"ESM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.02329084 0.36554151 0.01330986 #>  [2,] 0.03838716 0.57700576 0.07444418 #>  [3,] 0.11456016 0.11456016 0.11456016 #>  [4,] 0.36022416 0.36022416 0.18677401 #>  [5,] 0.02891450 0.02891450 0.02891450 #>  [6,] 0.51510561 0.51510561 0.51510561 #>  [7,] 0.09445756 1.26698528 0.37814897 #>  [8,] 0.19040417 0.80059174 0.80059174 #>  [9,] 0.06970461 0.06970461 0.01265433 #> [10,] 0.13203102 0.13203102 0.13203102 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"AlphaStable\",   method = \"MDCM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.33351279 0.33351279 0.77372059 #>  [2,] 0.06575070 1.42587344 1.04525281 #>  [3,] 0.49704204 0.68955967 1.06825316 #>  [4,] 1.06634263 0.35679423 0.06227436 #>  [5,] 0.08653161 0.08653161 0.08653161 #>  [6,] 0.13629865 0.13629865 0.13629865 #>  [7,] 0.46694348 0.98643556 0.98643556 #>  [8,] 0.13447124 0.13447124 0.13447124 #>  [9,] 0.42445918 0.13062162 0.42445918 #> [10,] 0.87831931 0.43523953 0.19803887 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"AlphaStable\",   method = \"AM\" ) #>            [,1]       [,2]      [,3] #>  [1,] 0.2465518 0.33863075 0.3386308 #>  [2,] 0.7129376 0.06938957 0.4317275 #>  [3,] 0.5436500 0.54364998 0.2107166 #>  [4,] 1.5905299 0.83358536 0.4957854 #>  [5,] 0.1238712 0.12387117 0.1238712 #>  [6,] 0.2917123 0.02932120 0.2917123 #>  [7,] 0.4784681 0.16577637 0.3562116 #>  [8,] 0.5136342 0.43021607 0.7039487 #>  [9,] 0.1376318 0.13561210 0.1376318 #> [10,] 0.6001202 0.60012019 0.6001202  ## Inverse Gaussian rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"InverseGaussian\" ) #>            [,1]        [,2]       [,3] #>  [1,] 0.1409705 0.211289726 0.03060706 #>  [2,] 0.1488620 0.036603626 0.14886203 #>  [3,] 0.5300980 0.078149027 0.07814903 #>  [4,] 0.1146304 0.138130417 0.21750741 #>  [5,] 1.5508637 0.203634722 0.13054224 #>  [6,] 0.7957410 0.081907590 0.64900377 #>  [7,] 0.0714812 0.071481203 0.07148120 #>  [8,] 0.2857447 0.285744735 0.23571288 #>  [9,] 0.4722825 0.221864859 0.57581621 #> [10,] 1.0141005 0.009328293 1.01410047 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"InverseGaussian\",   method = \"ESM\" ) #>             [,1]      [,2]      [,3] #>  [1,] 0.03947556 0.5076309 0.2523263 #>  [2,] 0.39769625 0.1831559 0.3976962 #>  [3,] 0.47185714 0.5146175 0.3523747 #>  [4,] 0.48027901 0.7211476 1.1257791 #>  [5,] 0.60891544 0.9399471 0.4173447 #>  [6,] 0.49484063 1.0237072 0.3588664 #>  [7,] 0.89644132 1.3189379 1.2627992 #>  [8,] 0.50962799 0.1060397 0.1060397 #>  [9,] 1.05725709 0.1130717 0.1130717 #> [10,] 0.80349980 0.1655493 0.1857617 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"InverseGaussian\",   method = \"MDCM\" ) #>            [,1]       [,2]      [,3] #>  [1,] 0.0703101 0.07031010 0.0703101 #>  [2,] 0.2387464 0.20395290 0.2039529 #>  [3,] 0.5683093 0.56830934 0.2533325 #>  [4,] 0.1327893 0.13278930 0.1327893 #>  [5,] 0.1321343 0.13213433 0.1004981 #>  [6,] 0.3346876 0.33468763 0.3346876 #>  [7,] 0.2413177 0.10257467 0.2538688 #>  [8,] 0.2267799 0.11470839 0.2994309 #>  [9,] 0.3183641 0.31836409 0.6799437 #> [10,] 0.2623398 0.07352612 0.3944653 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"InverseGaussian\",   method = \"AM\" ) #>             [,1]      [,2]      [,3] #>  [1,] 0.13859723 0.2815087 0.2815087 #>  [2,] 0.10478917 0.2620443 0.2620443 #>  [3,] 0.35926681 0.1447893 0.3252922 #>  [4,] 0.54965322 0.5496532 0.5496532 #>  [5,] 1.39135469 0.4266410 0.2337817 #>  [6,] 0.09795349 1.5859128 0.7695346 #>  [7,] 0.18069316 0.6517452 0.6801263 #>  [8,] 0.50849916 0.0823517 0.0823517 #>  [9,] 0.01592301 0.4540579 0.2622479 #> [10,] 0.01442262 0.1188920 0.1188920  ## Gamma rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Gamma\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.87382362 0.45353225 0.11039472 #>  [2,] 0.52726451 0.49449616 0.49449616 #>  [3,] 0.24545930 0.61409310 0.21106819 #>  [4,] 0.46788755 0.31526734 1.07230665 #>  [5,] 0.01989555 0.01989555 0.01989555 #>  [6,] 0.14245913 0.14245913 0.14245913 #>  [7,] 0.44751464 0.93845651 0.96533447 #>  [8,] 1.00067653 0.56126711 0.02000618 #>  [9,] 0.31570383 0.28536390 0.31570383 #> [10,] 0.39225547 0.39225547 0.74795137 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Gamma\",   method = \"ESM\" ) #>             [,1]       [,2]         [,3] #>  [1,] 0.02195903 0.02195903 0.6202911504 #>  [2,] 0.14359179 0.02474621 0.6951709702 #>  [3,] 0.54628062 0.22019885 0.0699231768 #>  [4,] 1.56515099 0.88623286 0.5205399685 #>  [5,] 0.05512926 0.18137553 0.0551292628 #>  [6,] 0.46639727 0.15430361 0.4663972650 #>  [7,] 0.10585458 0.62975424 0.0002814472 #>  [8,] 0.51589526 0.35387612 0.6276545579 #>  [9,] 0.88477892 1.06255531 0.4094883338 #> [10,] 0.59449528 1.24403443 0.0276797126 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Gamma\",   method = \"MDCM\" ) #>             [,1]       [,2]        [,3] #>  [1,] 0.38593180 0.21614067 0.385931796 #>  [2,] 0.34382990 0.35204716 0.751211498 #>  [3,] 0.45927337 0.45927337 0.459273374 #>  [4,] 1.02377673 0.31909043 0.738474014 #>  [5,] 0.04818464 0.06456082 0.366821413 #>  [6,] 1.47420270 0.56093040 0.007862795 #>  [7,] 0.00722717 0.03645918 0.316703489 #>  [8,] 0.01644754 0.18701075 0.449882589 #>  [9,] 0.88866072 0.88866072 0.305909929 #> [10,] 0.57358661 0.70343452 0.703434517 rpextmo(   10, 3,   a = 0.2, b = 0.5, gamma = 2,   eta = 0.5, family = \"Gamma\",   method = \"AM\" ) #>              [,1]       [,2]        [,3] #>  [1,] 0.008780949 0.31487127 0.008780949 #>  [2,] 0.067630716 0.06763072 0.067630716 #>  [3,] 0.928175848 0.02174718 0.151552663 #>  [4,] 0.677361545 0.61376902 0.120702655 #>  [5,] 0.338373682 0.61301768 0.613017678 #>  [6,] 1.037612409 1.03761241 0.186373869 #>  [7,] 0.004625806 0.01531647 0.015316468 #>  [8,] 0.056476142 0.95261295 0.247298262 #>  [9,] 0.050948530 0.09176461 0.091764607 #> [10,] 0.241978999 0.17685520 0.241978999"},{"path":"/reference/stieltjesDensity.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the Stieltjes density of a Bernstein function — stieltjesDensity","title":"Return the Stieltjes density of a Bernstein function — stieltjesDensity","text":"Returns Stieltjes density lower, upper, type attributes continuous returns data.frame named columns x (atoms) y (weights) well type attribute discrete. type attribute either \"continuous\" \"discrete\".","code":""},{"path":"/reference/stieltjesDensity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the Stieltjes density of a Bernstein function — stieltjesDensity","text":"","code":"stieltjesDensity(object)"},{"path":"/reference/stieltjesDensity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the Stieltjes density of a Bernstein function — stieltjesDensity","text":"object object deriving CompleteBernsteinFunction.","code":""},{"path":[]},{"path":"/reference/uexIntensities.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate exchangeable shock-arrival intensities — uexIntensities","title":"Calculate exchangeable shock-arrival intensities — uexIntensities","text":"Calculates (unscaled) exchangeable shock-arrival intensities, see rmo().","code":""},{"path":"/reference/uexIntensities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate exchangeable shock-arrival intensities — uexIntensities","text":"","code":"uexIntensities(object, d, cscale = 1, ...)"},{"path":"/reference/uexIntensities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate exchangeable shock-arrival intensities — uexIntensities","text":"object object deriving class BernsteinFunction. d positive integer, larger two, dimension. cscale positive number composite scaling factor. ... pass-parameter.","code":""},{"path":"/reference/uexIntensities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate exchangeable shock-arrival intensities — uexIntensities","text":"given Bernstein function, exchangeable shock-arrival intensities defined $$   \\lambda_{}     = {(-1)}^{-1} \\Delta^{}{ \\psi{(d-)} } ,       \\quad 1 \\leq \\leq d . $$ calculation exchangeable shock-arrival intensities using formula usually numerically stable. Consequently, various alternative approaches used dependent class Bernstein function.","code":""},{"path":[]},{"path":"/reference/uexIntensities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate exchangeable shock-arrival intensities — uexIntensities","text":"","code":"bf <- AlphaStableBernsteinFunction(alpha = 0.4) uexIntensities(bf, 3) #> [1] 0.23233766 0.08717025 0.59332184"},{"path":"/reference/valueOf.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Bernstein Functions — valueOf","title":"Evaluate Bernstein Functions — valueOf","text":"Calculate values Bernstein function higher-order, alternating iterated forward differences, possibly scaled binomial coefficient, .e., $$   \\binom{n}{k} {(-1)}^{j-1} \\Delta^{j}{ \\psi(c x) } ,     \\quad x > 0 . $$ evaluation Bernstein functions using formula usually numerically stable. Consequently, various alternative approaches used dependent class Bernstein function.","code":""},{"path":"/reference/valueOf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Bernstein Functions — valueOf","text":"","code":"valueOf(object, x, difference_order = 0L, n = 1L, k = 0L, cscale = 1, ...)"},{"path":"/reference/valueOf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Bernstein Functions — valueOf","text":"object object deriving class BernsteinFunction. x nonnegativ numeric vector iterated difference Bernstein function evaluated. difference_order nonnegative integer order alternating iterated forward differences taken Bernstein function. n, k Nonnegative numbers binomial factor. cscale positive number composite scaling factor. ... Pass-parameter.","code":""},{"path":[]},{"path":"/reference/valueOf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Bernstein Functions — valueOf","text":"","code":"bf <- AlphaStableBernsteinFunction(alpha = 0.7) valueOf(bf, 1:5) #> [1] 1.000000 1.624505 2.157669 2.639016 3.085169"},{"path":"/news/index.html","id":"rmo-09","dir":"Changelog","previous_headings":"","what":"rmo 0.9","title":"rmo 0.9","text":"Review improve documentation (#116) Re-organize S4 code documentation (#117) Remove outdated rmarkdown notebooks development phase (#115) Remove convenience wrapper functions generating shock arrival intensity shock-size arrival intensity parameter (#114) Add ConvexCombinationOfBernsteinFunctions represent convex combinations Bernstein functions compactly Small changes documentation Improveming implementation method exIntensities Provide zero-sample-size parametrization, n = 0, simulation algorithms (e.g. measure setup time) Bugfix consistent use STL headers attribute [[maybe_unused]] C++ code","code":""},{"path":"/news/index.html","id":"rmo-08","dir":"Changelog","previous_headings":"","what":"rmo 0.8","title":"rmo 0.8","text":"Breaking change: Rename simulation method *_markovian *_mdcm *_arnold *_am Breaking change: Provide single entry point method general MO sampling distributions rmo, exchangeable MO sampling routine rexmo, extendible MO sampling routines rextmo, parametrized extendible MO sampling routines rpextmo Rename C++ backend classes arnold_mo_distribution, markovian_exmo_distribution, armageddon_extmo_distribution am_mo_distribution, mdcm_exmo_distribution, esm_armextmo_distribution, respectively Improve code coverage adding snapshot tests sampling routines Improve documentation","code":""},{"path":"/news/index.html","id":"rmo-07","dir":"Changelog","previous_headings":"","what":"rmo 0.7","title":"rmo 0.7","text":"Breaking change: Remove lambda parameter PoissonBernsteinFunction","code":""},{"path":"/news/index.html","id":"rmo-06","dir":"Changelog","previous_headings":"","what":"rmo 0.6","title":"rmo 0.6","text":"Breaking change: Rename concept Cuadras-Augé armageddon ESM better reflect nature distribution. Associated functions renamed accordingly Bugfix handle integration error explicitly, possibly adjusting case small values Improve numerical stability using explicit first-order iterated difference difference_order == 1L valueOf avoid endpoint-singularity problems numerical integration Bugfix initializers validity methods S4 objects validObject can now called argument test = TRUE without causing error Allow pass-though arguments uexIntensities, exIntensities, exQMatrix method valueOf integrate Add new CompositeScaledBernsteinFunction class Add show method BernsteinFunction-classes.","code":""},{"path":"/news/index.html","id":"rmo-05","dir":"Changelog","previous_headings":"","what":"rmo 0.5","title":"rmo 0.5","text":"Breaking change: Rename function names simulation algorithms. Now, sampling algorithms follow format r*mo_* first * indicates input-parameter second algorithm, e.g. rexmo_markovian ex_intensities input parameters uses Markovian model default counting process. Breaking change: Rearrange order arguments valueOf: instead cscale, n, k n, k, cscale. Implementing new methods generate distribution parameter BernsteinFunction classes","code":""},{"path":"/news/index.html","id":"rmo-04","dir":"Changelog","previous_headings":"","what":"rmo 0.4","title":"rmo 0.4","text":"Change input parameter rexmo_markovian (now scaled exchangeable intensity). ex_intensities*-methods similarly adjusted change necessary functions used create input parameter rexmo_markovian. Bernstein function classes refactored new features added.","code":""},{"path":"/news/index.html","id":"rmo-03","dir":"Changelog","previous_headings":"","what":"rmo 0.3","title":"rmo 0.3","text":"Breaking change: Rename rmo_ex_arnold rexmo_markovian. Improve numerical stability calculation products large binomial coefficients Bugfix function is_within avoid undefined behavior Implementing Inverse Gaussian Bernstein function Implementing Pareto jump simulation Pareto-jump compound Poisson Bernstein function Implementing Exponential-jump compound Poisson Bernstein function Add S4 classes evaluating Bernstein Functions higher-order alternating, iterated forward differences Provide drop-wrapper functions create meaningful distribution parameters Refactoring C++ backend distribution classes satisfying multivariate version named requirement RandomNumberDistribution Refactoring several internal functions rewriting C++ Refactoring simulation algorithms improve performance Refactoring improve internal representation Refactoring custom assertions Improve code coverage, e.g., adding additional unit tests, integration test, statistical unit tests","code":""},{"path":"/news/index.html","id":"rmo-02","dir":"Changelog","previous_headings":"","what":"rmo 0.2","title":"rmo 0.2","text":"Re-License GPL-3 (Rcpp dependence) Properly handle case rate == 0 rmo:::sample_cpp (used rmo_lfm_cpp) Properly handle case compound Poisson process drifts several barriers waiting period rmo:::sample_cpp (used rmo_lfm_cpp) Re-implementation sampling algorithms using Rcpp Use original R-based implementations simulation algorithms unit tests Improve code coverage rmo_lfm_cpp (independence case)","code":""},{"path":"/news/index.html","id":"rmo-01","dir":"Changelog","previous_headings":"","what":"rmo 0.1","title":"rmo 0.1","text":"Added pure R implementations various sampling algorithms: rmo_esm, rmo_arnold, rmo_ex_arnold, rmo_lfm_cpp, rmo_esm_cuadras_auge.","code":""}]
