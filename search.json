[{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to rmo","title":"Contributing to rmo","text":"outlines propose change rmo.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to rmo","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to rmo","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"/CONTRIBUTING.html","id":"commit-message-style","dir":"","previous_headings":"","what":"Commit message style","title":"Contributing to rmo","text":"use Udacity commit message style.","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to rmo","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. New code follow tidyverse style guide pass lintr::lint_package() without errors. can use styler package apply styles, please don’t restyle code nothing PR. information static code analysis tool lintr, see https://github.com/jimhester/lintr. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s). information good practices R package-development, see rOpenSci Packages guide.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to rmo","text":"Please note rmo project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Henrik Sloot  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. rmo Copyright (C) 2019 Henrik Sloot This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with rmo","title":"Getting help with rmo","text":"Thanks using rmo. filing issue, places explore pieces put together make process smooth possible. Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site. Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed. right place, need file issue, please review contributing document. Thanks help!","code":""},{"path":"/articles/Armageddon-ESM-distribution.html","id":"definition-and-survival-function","dir":"Articles","previous_headings":"","what":"Definition and survival function","title":"Armageddon shock model distributions","text":"say random vector multivariate armageddon shock model distribution exist \\(\\lambda, \\lambda^{G} \\geq 0\\) \\(\\lambda + \\lambda^{G} > 0\\) \\(t_{[1]} \\geq \\cdots \\geq t_{[d]}\\) \\[     \\bar{F}{( \\boldsymbol{t} )}         = \\exp{\\left \\{                 -{[ \\lambda + \\lambda^{G} ]} t_{[1]}                 -\\lambda \\sum_{= 2}^{d}{                     t_{[]}                 }             \\right \\}},             \\quad \\boldsymbol{t} \\geq 0 . \\] random vector exchangeable Marshall–Olkin distribution parameters \\[     \\lambda_{}         = \\begin{cases}             \\lambda         &   {\\lvert \\rvert} = 1 , \\\\             \\lambda^{G}     &   {\\lvert \\rvert} = d , \\\\             0               &   \\text{else} .     \\end{cases} \\]","code":""},{"path":"/articles/Armageddon-ESM-distribution.html","id":"stochastic-model","dir":"Articles","previous_headings":"","what":"Stochastic model","title":"Armageddon shock model distributions","text":"random vector can generated classical exogenous shock model, Arnold model exchangeable version, Lévy frailty model killed subordinator drift, mixture Marshall–Olkin distributions. latter case, one combines vector independent exponential distributed random variables rate \\(\\lambda\\) comonotone vector exponential distributed random variables rate \\(\\lambda^{G}\\) via component-wise minima.","code":""},{"path":[]},{"path":"/articles/Exchangeable-Marshall-Olkin-distributions.html","id":"exchangeability","dir":"Articles","previous_headings":"","what":"Exchangeability","title":"Exchangeable Marshall--Olkin distributions","text":"random vector called exchangeable reordering components change law. equivalent definition survival function, distribution function, density (exists) change arguments permutated.","code":""},{"path":"/articles/Exchangeable-Marshall-Olkin-distributions.html","id":"condition","dir":"Articles","previous_headings":"","what":"Condition","title":"Exchangeable Marshall--Olkin distributions","text":"Marshall–Olkin distribution exchangeable \\[     {\\lvert \\rvert}         = {\\lvert J \\rvert}     \\quad \\Rightarrow \\quad     \\lambda_{}         = \\lambda_{J} . \\] reason, use notation \\(\\lambda_i := \\lambda_{}\\), \\(= {\\lvert \\rvert}\\).","code":""},{"path":"/articles/Exchangeable-Marshall-Olkin-distributions.html","id":"reparametrisation","dir":"Articles","previous_headings":"","what":"Reparametrisation","title":"Exchangeable Marshall--Olkin distributions","text":"\\(\\boldsymbol{t} \\geq 0\\) descendingly ordered version \\(t_{[1]} \\geq \\cdots \\geq t_{[d]}\\) survival function can rewritten \\[     \\bar{F}{(\\boldsymbol{t})}         = \\exp{\\left \\{                 - \\sum_{=0}^{d-1}{                     a_{} \\cdot t_{[+1]}                 }             \\right \\}} ,             \\quad \\boldsymbol{t} \\geq 0 . \\] parameters \\(a_{0}, a_{1}, \\ldots, a_{d-1}\\) defined \\[     a_{}         = \\sum_{j=0}^{d--1}{                 \\binom{d--1}{j} \\lambda_{j+1}             } ,             \\quad \\{\\{ 0, 1, \\ldots, d-1 \\}} , \\] parameters \\(\\lambda_{1}, \\ldots, \\lambda_{d}\\) can retrieved formula \\[     \\lambda_{}         = (-1)^{-1} \\Delta^{-1} a_{d-}         = \\sum_{j=0}^{-1}{                 {(-1)}^{j} \\binom{-1}{j} a_{d-+j}             },             \\quad \\{\\{ 1, \\ldots, d \\}} . \\] sequences non-negative parameters \\(a_{0} , a_{1}, \\ldots, a_{d-1}\\) defines proper Marshall–Olkin distribution formula yields non-negative sequence \\(\\lambda_{1}, \\ldots, \\lambda_{d}\\).","code":""},{"path":"/articles/Exchangeable-Marshall-Olkin-distributions.html","id":"survival-copula","dir":"Articles","previous_headings":"","what":"Survival copula","title":"Exchangeable Marshall--Olkin distributions","text":"exchangeable Marshall–Olkin distribution, survival copula takes form \\[     \\hat{C}{( \\boldsymbol{u} )}         = u_{(1)} \\cdot u_{(2)}^{a_1/a_0} \\cdot \\ldots \\cdot u_{(d)}^{a_{d-1}/a_0} ,             \\quad \\boldsymbol{u} \\{[0, 1]}^d \\] \\(u_{(1)} \\leq \\cdots \\leq u_{(d)}\\) ascendingly ordered version \\(\\boldsymbol{u}\\).","code":""},{"path":"/articles/Exchangeable-Marshall-Olkin-distributions.html","id":"fast-simulation","dir":"Articles","previous_headings":"","what":"Fast simulation","title":"Exchangeable Marshall--Olkin distributions","text":"large number parameters inefficiency exogenous shock model become problem higher dimensions. exchangeable subclass, Arnold model can modified sampling ordered version \\(\\tau_{(1)} \\leq \\cdots \\leq \\tau_{(d)}\\) apply random shuffling. first shock exponential distribution rate \\[     \\lambda         = \\sum_{=1}^{d}{             \\binom{d}{} \\lambda_{}         } . \\] probability shock destroys \\(\\) components \\[     \\frac{         \\binom{d}{} \\lambda_i     }{         \\lambda     } ,         \\quad \\{\\{ 1, \\ldots, d \\}} . \\] Assume first shock arrives time \\(W_{1}\\). possible show random vector \\[     \\begin{pmatrix}         \\tau_{(d - + 1)} - W_{1} & \\cdots & \\tau_{(d)} - W_{1}     \\end{pmatrix} \\] ordered version \\({(d-)}\\)-variate Marshall–Olkin distributed random vector parameters \\(a_{0}, a_{1}, \\ldots a_{d--1}\\). Hence, can repeat step recursively sampled \\[     \\tau_{(1)} \\leq \\cdots \\leq \\tau_{(d)} . \\] Finally can apply random shuffling \\(\\Pi\\) get \\[     \\tau_         = \\tau_{\\Pi{()}} ,             \\quad \\{\\{ 1, \\ldots, d \\}} . \\]","code":""},{"path":[]},{"path":"/articles/Mixing-Marshall-Olkin-distributions.html","id":"independent-exponentials","dir":"Articles","previous_headings":"","what":"Independent exponentials","title":"Mixing Marshall--Olkin distributions","text":"easiest example mixing Marshall–Olkin distribution vector univariate independent exponential distributed random variables. corresponds setting shocks exogenous shock model correspond set cardinality larger 1 infinity.","code":""},{"path":"/articles/Mixing-Marshall-Olkin-distributions.html","id":"independent-concatenations","dir":"Articles","previous_headings":"","what":"Independent concatenations","title":"Mixing Marshall--Olkin distributions","text":"Another simple example concatenation arbitrary number independent Marshall–Olkin distributed random vectors. example, let \\(\\boldsymbol{\\tau}^{(1)}, \\ldots, \\boldsymbol{\\tau}^{(k)}\\) independent Marshall–Olkin distributed random vectors dimensions \\(d_{1}, \\ldots, d_{k}\\) parameters \\(\\lambda_{}\\), \\(\\emptyset \\neq \\subseteq {\\{ 1, \\ldots, d_{j} \\}}\\), \\(1 \\leq \\cdots \\leq k\\), define \\[     \\boldsymbol{\\tau}         = \\begin{pmatrix}             \\tau_{1}^{(1)} & \\cdots & \\tau_{d_1}^{(1)} & \\cdots & \\tau_{1}^{(k)} & \\cdots & \\tau_{d_k}^{(k)}         \\end{pmatrix} . \\] \\(\\boldsymbol{\\tau}\\) \\((d_{1} + \\cdots + d_{k})\\)-variate Marshall–Olkin distribution parameters \\[     \\lambda_{}         = \\begin{cases}             \\lambda_{- \\sum_{l=1}^{j-1}{ d_l } }^{(l)}    &       \\emptyset \\neq \\subseteq {\\{ d_{l-1} + 1, \\ldots, d_{l} \\}} , \\\\             0                                               &       \\text{else} ,       \\end{cases} \\] \\(d_{0} = 0\\) \\(- k = \\{ i_{1} - k , \\ldots , i_{{\\lvert \\rvert}} - k \\}\\). Note vector independent exponential variables can represented like , \\(\\tau^{(1)}, \\ldots, \\tau^{(d)}\\) univariate Marshall–Olkin distributed, .e., univariate exponential, random variables.","code":""},{"path":"/articles/Mixing-Marshall-Olkin-distributions.html","id":"comonotone-concatenations","dir":"Articles","previous_headings":"","what":"Comonotone concatenations","title":"Mixing Marshall--Olkin distributions","text":"similar example concatenation perfectly dependent, identical Marshall–Olkin distributed random vectors. , consider \\(d\\)-variate Marshall–Olkin distributed random vector \\(\\tilde{\\boldsymbol{\\tau}}\\) parameters \\(\\tilde{\\lambda}_{}\\), \\(\\emptyset \\neq \\subseteq {\\{1, \\ldots, d\\}}\\), define \\(d k\\)-variate random vector \\(\\boldsymbol{\\tau}\\) \\[     \\boldsymbol{\\tau}         := \\begin{pmatrix}                 \\tilde{\\tau}_1 & \\cdots & \\tilde{\\tau}_d & \\cdots & \\tilde{\\tau_1} & \\cdots & \\tilde{\\tau}_d             \\end{pmatrix} . \\] corresponding parameters defined \\[     \\lambda_I         = \\tilde{\\lambda}_{J} \\ \\text{} \\ \\cap {\\{ 1 , \\ldots, d \\}} = J ,             \\quad \\emptyset \\neq \\subseteq {\\{ 1, \\ldots, d k \\}} . \\]","code":""},{"path":"/articles/Mixing-Marshall-Olkin-distributions.html","id":"scalar-multiplication","dir":"Articles","previous_headings":"","what":"Scalar multiplication","title":"Mixing Marshall--Olkin distributions","text":"Similarly univariate exponential distribution, Marshall–Olkin distributed random vector scaled positive number Marshall–Olkin distribution, . , let \\(\\tilde{\\boldsymbol{\\tau}}\\) \\(d\\)-variate Marshall–Olkin distributed random vector parameters \\(\\tilde{\\lambda}_{}\\), \\(\\emptyset \\neq \\subseteq {\\{ 1, \\ldots, d \\}}\\), \\(> 0\\) define \\(\\boldsymbol{\\tau}\\) \\[     \\boldsymbol{\\tau}         = \\cdot \\tilde{\\boldsymbol{\\tau}} . \\] corresponding parameters defined \\[     \\lambda_I         = \\frac{\\tilde{\\lambda}_{}}{} , \\quad \\emptyset \\neq \\subseteq {\\{ 1 , \\ldots , d \\}} . \\]","code":""},{"path":"/articles/Mixing-Marshall-Olkin-distributions.html","id":"component-wise-minima","dir":"Articles","previous_headings":"","what":"Component-wise minima","title":"Mixing Marshall--Olkin distributions","text":"component-wise minimum two independent Marshall–Olkin distributed random vectors length Marshall–Olkin distributed added rates: let \\(\\tilde{\\boldsymbol{\\tau}}^{(1)}\\) \\(\\tilde{\\boldsymbol{\\tau}}^{(2)}\\) Marshall–Olkin distributed parameters \\(\\tilde{\\lambda}_{}^{(j)}\\), \\(\\emptyset \\neq \\subseteq {\\{ 1, \\ldots, d \\}}\\), \\(j \\{\\{ 1 , 2 \\}}\\), define \\(\\boldsymbol{\\tau}\\) \\[     \\boldsymbol{\\tau}         = \\begin{pmatrix}             \\min{\\{ \\tilde{\\tau}_1^{(1)} , \\tilde{\\tau}_1^{(2)} \\}} & \\cdots & \\min{\\{ \\tilde{\\tau}_d^{(1)} , \\tilde{\\tau}_d^{(2)} \\}}         \\end{pmatrix} . \\] corresponding parameters defined \\[     \\lambda_{}         = \\tilde{\\lambda}_I^{(1)} + \\tilde{\\lambda}_I^{(2)} ,             \\quad \\emptyset \\neq \\subseteq {\\{ 1, \\ldots, d\\}} . \\] can generalised allowing components \\(\\tilde{\\boldsymbol{\\tau}}^{(1)}\\) \\(\\tilde{\\boldsymbol{\\tau}}^{(2)}\\) infinite long \\(\\boldsymbol{\\tau}\\) finite margins. Specifically, \\(\\tilde{\\lambda}_I^{(j)} = 0\\) allowed long \\(\\tilde{\\lambda}_I^{(1)} + \\tilde{\\lambda}_I^{(2)} > 0\\).","code":""},{"path":[]},{"path":"/articles/The-Levy-frailty-model.html","id":"the-extendible-subclass","dir":"Articles","previous_headings":"","what":"The extendible subclass","title":"The Lévy frailty model","text":"exchangeable Marshall–Olkin distribution parameters \\(a_{0}, \\ldots, a_{d-1}\\) called extendible exists sequence \\(\\tau_{1}, \\tau_{2}, \\ldots\\) finite margin Marshall–Olkin distribution \\[     \\mathbb{P}{\\left( \\tau_{1} > t_{1} , \\ldots \\tau_{d} > t_{d} \\right)}         = \\exp{\\left \\{                 -\\sum_{= 0}^{d-1}{                     a_{} t_{[+1]}                 }             \\right \\}},             \\quad \\boldsymbol{t} \\geq 0 . \\]","code":""},{"path":"/articles/The-Levy-frailty-model.html","id":"the-lévy-frailty-representation","dir":"Articles","previous_headings":"","what":"The Lévy frailty representation","title":"The Lévy frailty model","text":"extendible Marshall–Olkin distribution can uniquely linked (law) Lévy subordinator \\(\\Lambda\\) iid unit exponential random variables \\(E_{1}, \\ldots , E_{d}\\) \\(\\boldsymbol{\\tau}\\) distribution \\[     \\tau_{}         = \\inf{\\left \\{                 t > 0                 \\ : \\                 \\Lambda_{t} \\geq E_i             \\right \\}},             \\quad \\{\\{ 1, \\ldots, d \\}} . \\] \\(\\psi\\) Laplace exponent Lévy subordinator, .e. \\(\\psi{(x)} = -\\log\\mathbb{E}{[\\exp{\\{ - x \\Lambda_1\\}}]}\\), \\[     a_{}         = \\psi{(+1)} - \\psi{()} ,         \\quad \\{\\{ 1, \\ldots, d \\}} . \\]","code":""},{"path":"/articles/The-Levy-frailty-model.html","id":"homogeneous-poisson-process","dir":"Articles","previous_headings":"","what":"Homogeneous Poisson process","title":"The Lévy frailty model","text":"simple example case, \\(\\Lambda\\) homogenous Poisson process rate \\(\\lambda > 0\\). case \\[     \\psi{(x)}         = \\lambda {\\left( 1 - \\exp{\\{ -x \\}} \\right)} ,             \\quad x \\geq 0 . \\]","code":""},{"path":"/articles/The-Levy-frailty-model.html","id":"exponential-killing-and-drift","dir":"Articles","previous_headings":"","what":"Exponential killing and drift","title":"The Lévy frailty model","text":"Another simple example case, subordinator deterministic drift \\(b \\geq 0\\) killed (send infinity) certain rate \\(\\geq 0\\). means \\[     \\Lambda_{t}         = N_{t}^{G} \\cdot \\infty + b t ,             \\quad t \\geq 0 , \\] \\(N^{G}\\) homogeneous Poisson process rate \\(\\). \\[     \\psi{(x)}         = 1_{(0, \\infty)}{(x)}             + b x ,             \\quad x \\geq 0 . \\] model produces multivariate armageddon shock model distribution.","code":""},{"path":"/articles/The-Levy-frailty-model.html","id":"compound-poisson-process","dir":"Articles","previous_headings":"","what":"Compound Poisson process","title":"The Lévy frailty model","text":"class compound Poisson subordinators largest class Lévy subordinators can used sample exactly Marshall–Olkin distribution. , Lévy subordinator form \\[     \\Lambda_{t}         = N_{t}^{G} \\cdot \\infty             + b t             + \\sum_{= 1}^{N_{t}} X_{} ,             \\quad t \\geq 0 , \\] \\(N^{G}\\) homogeneous Poisson process rate \\(\\geq 0\\), \\(b \\geq 0\\) deterministic drift, \\(N\\) homogeneous Poisson process rate \\(\\lambda \\geq 0\\), \\({\\{ X_{} \\}}_{\\\\mathbb{N}}\\) iid sequence non-negative random variables (objects independent). \\[     \\psi{(x)}         = 1_{(0, \\infty)}{(x)}             + b x             + \\lambda {\\left( 1 - \\mathcal{L}{(X_{1}; x)} \\right)} ,             \\quad x \\geq 0 , \\] \\(x \\mapsto \\mathcal{L}{(X_{1}, x)}\\) Laplace transform \\(X_{1}\\).","code":""},{"path":[]},{"path":"/articles/The-Marshall-Olkin-distribution.html","id":"definition-and-survival-copula","dir":"Articles","previous_headings":"","what":"Definition and survival copula","title":"The Marshall-Olkin distribution","text":"d-variate random vector \\(\\boldsymbol{\\tau} = {( \\tau_{1}, \\ldots, \\tau_{d} )}\\) Marshall–Olkin distribution parameters \\(\\lambda_{} \\geq {0}\\), \\(\\emptyset \\neq \\subseteq {\\{ 1, \\ldots, d \\}}\\) multivariate survival function \\[     \\bar{F} (\\boldsymbol{t})         = \\exp{\\left \\{             -\\sum_{\\emptyset \\neq \\subseteq {\\{ 1, \\ldots, d \\}}}{                 \\lambda_I                 \\max_{\\}{                     t_{}                 }             }         \\right \\}},         \\quad \\boldsymbol{t} = {( t_{1}, \\ldots, t_{d} )} \\geq 0 , \\] parameters fulfill \\[   \\eta_{}     := \\sum_{\\ni } \\lambda_I > 0         \\ \\forall \\{\\{ 1, \\ldots, d \\}} . \\]","code":""},{"path":"/articles/The-Marshall-Olkin-distribution.html","id":"marginal-survival-functions","dir":"Articles","previous_headings":"","what":"Marginal survival functions","title":"The Marshall-Olkin distribution","text":"marginal random variables \\(\\tau_{}\\) d-variate Marshall-Olkin distributed random vector exponentially distributed rates \\(\\eta_i, \\ \\{\\{ 1, \\ldots, d \\}}\\). particular, implies \\(\\tau_{}\\) survival function \\[     \\bar{F}_{}{(t)}         = \\exp{\\left \\{                 -t \\eta_{}             \\right \\}}         = \\exp{\\left \\{                 -t \\sum_{\\ni }{                     \\lambda_{}                 }             \\right \\}} ,             \\quad \\{\\{ 1, \\ldots, d \\}},             \\ t \\geq 0 . \\]","code":""},{"path":"/articles/The-Marshall-Olkin-distribution.html","id":"survival-copula","dir":"Articles","previous_headings":"","what":"Survival copula","title":"The Marshall-Olkin distribution","text":"survival copula \\(\\hat{C}\\) d-variate Marshall–Olkin distributed random vector \\[     \\hat{C}{( \\boldsymbol{u} )}         = \\prod_{\\emptyset \\neq \\subseteq {[d]}}{                 \\min_{\\} u_{}^{\\frac{\\lambda_I}{\\eta_i}}             } ,             \\quad \\boldsymbol{u} \\{[0, 1]}^d . \\]","code":""},{"path":"/articles/The-Marshall-Olkin-distribution.html","id":"pickands-measure-and-function","dir":"Articles","previous_headings":"","what":"Pickands measure and function","title":"The Marshall-Olkin distribution","text":"Marshall–Olkin distribution Min-stable multivariate exponential (MSMVE) survival copula extreme-value kind. Pickands measure \\(\\delta\\) d-variate Marshall–Olkin distributed random vector \\[     \\delta{\\left(         \\frac{             \\sum_{\\}{                 \\vec{e}_{}                 \\prod_{\\neq j \\}{                     \\eta_{j}                 }             }         }{             \\sum_{\\}{                 \\prod_{\\neq j \\}{                     \\eta_{j}                 }             }         }     \\right)}     = \\lambda_{}         \\sum_{\\}{             \\frac{1}{\\eta_{}}         } ,         \\quad \\emptyset \\neq \\subseteq {[d]} . \\] Pickands function \\(P\\) d-variate Marshall–Olkin distributed random vector \\[     P{(\\boldsymbol{w})}         := \\int_{S_{d}}{                 \\max_{\\{[d]}}{\\{ w_{} u_{} \\}} \\delta{( \\mathrm{d}\\boldsymbol{u} )}             }         = \\sum_{\\emptyset\\neq \\subseteq {[d]}}{             \\lambda_{}             \\max_{\\}{                 \\frac{                     w_{}                 }{                     \\eta_{}                 }             }         } . \\]","code":""},{"path":"/articles/The-Marshall-Olkin-distribution.html","id":"the-exogenous-shock-model","dir":"Articles","previous_headings":"","what":"The exogenous shock model","title":"The Marshall-Olkin distribution","text":"d-variate Marshall–Olkin distribution natural stochastic model: consider independent random variables \\(E_{} \\sim \\mathrm{Exp}{(\\lambda_{})}, \\ \\emptyset \\neq \\subseteq {\\{ 1, \\ldots, d \\}}\\) define \\[     \\tau_{}         := \\min{\\Big\\{ E_{} \\ : \\ \\ni \\Big\\}} ,             \\quad \\{\\{ 1 , \\ldots , d \\}} . \\]","code":""},{"path":"/articles/The-Marshall-Olkin-distribution.html","id":"the-arnold-model","dir":"Articles","previous_headings":"","what":"The Arnold model","title":"The Marshall-Olkin distribution","text":"d-variate Marshall–Olkin distribution another stochastic model strongly linked continuous time, homogeneous Markovian processes. , consider transformed parameters \\[     \\lambda         := \\sum_{\\emptyset \\neq \\subseteq {\\{ 1, \\ldots, d \\}}}{             \\lambda_{}         } \\] \\[     p_{}         := \\frac{             \\lambda_{}         }{             \\lambda         },         \\quad \\emptyset \\neq \\subseteq {\\{ 1, \\ldots, d \\}} . \\] , can shown vector \\(\\boldsymbol{\\tau}\\), defined , desired Marshall–Olkin distribution. Let following two sequences independent: \\(\\epsilon_{1}, \\epsilon_{2}, \\ldots \\sim \\mathrm{Exp}{(\\lambda)}\\) iid. \\(Y_{1}, Y_{2}, \\ldots\\) iid \\(\\mathcal{P}{(\\{1, \\ldots, d\\})} \\setminus \\emptyset\\) \\(\\mathbb{P}{( Y_{1} = )} = p_{}, \\ \\emptyset \\neq \\subseteq {\\{ 1, \\ldots , d\\}}\\). Now, define \\(\\boldsymbol{\\tau}\\) \\[     \\tau_{}         := \\sum_{j=1}^{\\min{\\{ k \\\\mathbb{N} : \\Y_{k} \\}}}{ \\epsilon_{j} } ,             \\quad \\{\\{ 1, \\ldots, d \\}} . \\]","code":""},{"path":[]},{"path":"/articles/The-binary-representation.html","id":"the-binary-representation","dir":"Articles","previous_headings":"","what":"The binary representation","title":"The binary representation of the MO parameter","text":"natural (non-zero) number \\(j\\) can represented 0-1-sequence \\(c = {\\{ c_{k} \\}}_{k \\\\mathbb{N}} \\{\\{ 0, 1 \\}}^\\mathbb{N}\\) \\[     j         = \\sum_{k=0}^{\\infty}{             c_{k} 2^{k}         } , \\] \\(2^{0} = 1\\) finitely many \\(c_{k}\\) zero. Proof: statement true \\(j = 1\\) \\(c_{0} = 1\\) \\(c_{k} = 0,\\ k > 0\\). representation also unique. Assume now statement true natural numbers smaller \\(j\\). \\(j\\) divisible \\(2\\), exists induction assumption sequence \\(\\tilde{c} = {\\{ \\tilde{c}_{k} \\}}_{k \\\\mathbb{N}}\\) \\(j / 2\\) \\[     j / 2         = \\sum_{k=0}^{\\infty}{             \\tilde{c}_{k} 2^{k}         } . \\] Consequently, \\[     j         = \\sum_{k=1}^{\\infty}{             \\tilde{c}_{k-1} 2^{k}         } \\] can choose \\(c_{0} = 0\\) \\(c_{k} = \\tilde{c}_{k-1},\\ k > 0\\). \\(j\\) divisible \\(2\\), \\(j-1\\) exists induction assumption sequence \\(\\tilde{c} = {\\{ \\tilde{c}_{k} \\}}_{k \\\\mathbb{N}}\\) \\((j-1)/2\\) \\[     (j-1)/2         = \\sum_{k=0}^{\\infty}{             \\tilde{c}_{k} 2^{k}         } . \\] Consequently, \\[     j         = 1 + \\sum_{k=1}^{\\infty}{                 \\tilde{c}_{k-1} 2^{k}             } \\] can choose \\(c_{0} = 1\\) \\(c_{k} = \\tilde{c}_{k-1},\\ k > 0\\). Since summand positive \\(c_{k}\\) contributes amount bigger equal \\(1\\) sum, clear finitely many \\(c_{k}\\) must equal zero.","code":""},{"path":"/articles/The-binary-representation.html","id":"uniqueness-of-the-binary-representation","dir":"Articles","previous_headings":"","what":"Uniqueness of the binary representation","title":"The binary representation of the MO parameter","text":"can proven induction binary representation unique. see , consider two sequences \\(\\hat{c} = {\\{ \\hat{c}_{k} \\}}_{k \\\\mathbb{N}} , c = {\\{ c_{k} \\}}_{k \\\\mathbb{N}} \\{\\{ 0 , 1 \\}}^\\mathbb{N}\\) \\[     \\sum_{k=0}^{\\infty} c_{k} 2^{k}         = \\sum_{k=0}^{\\infty} \\hat{c}_{k} 2^{k} . \\] easy see, number even \\(c_{0} = 0\\) odd \\(c_{0} = 1\\). Hence, can w.l.o.g. assume \\(c_{0} = \\hat{c}_{0} = 0\\), .e., number even. dividing sides two, obtain \\[     \\sum_{k=0}^{\\infty}{             c_{k+1} 2^{k}         }         = \\sum_{k=0}^{\\infty}{                 \\hat{c}_{k+1} 2^{k}             } . \\] induction assumption, get claim.","code":""},{"path":"/articles/The-binary-representation.html","id":"integer-division","dir":"Articles","previous_headings":"","what":"Integer division","title":"The binary representation of the MO parameter","text":"Integer division defined follows \\[   / : \\mathbb{N}_{0}^{2} \\\\mathbb{N}_{0}, {(k, n)} \\mapsto \\sup{\\{ j \\\\mathbb{N}_{0} \\ :\\ j\\cdot k \\leq n  \\}} . \\] \\(n = 2\\) equivalent definition \\[     k / 2         = \\begin{cases}                           &       k = \\cdot 2,\\ k\\ \\text{even }\\ k=0 , \\\\             (k-1)/2         &       k\\ \\text{odd} .         \\end{cases} \\] define \\[     2^{n}         = \\underbrace{ 2 \\cdot \\ldots \\cdot 2 }_{n\\ \\text{times}} , \\] can easily see \\[     j / 2^{n}         = j \\underbrace{/ 2 / \\ldots / 2}_{n\\ \\text{times}} . \\] means \\[     j / 2^{n}         = {\\left(                 \\sum_{k=0}^{\\infty}{                     c_{k} 2^{k}                 }             \\right)} / 2^n         = \\sum_{k=0}^{\\infty}{                 c_{n+k} 2^{k}             } . \\] Consequently, \\[     c_{n}         = {( j / 2^{n} )} \\ \\mathrm{mod}\\ 2 . \\]","code":""},{"path":"/articles/The-binary-representation.html","id":"iterating-through-binary-representations","dir":"Articles","previous_headings":"","what":"Iterating through binary representations","title":"The binary representation of the MO parameter","text":"natural question , can easily determine binary representation \\(j+1\\) directly binary representation \\(j\\). Consider natural number binary representation \\[     j         = \\sum_{k=0}^{\\infty}{                 c_{k} 2^{k}             } \\] let \\[     k^{\\ast}         = \\min{\\{ \\ :\\ c_{} = 0 \\}} . \\] (geometric sum formula) \\[     1         = 2^{k^{\\ast}} - {\\left( 2^{k^{\\ast}} - 1 \\right)}         = 2^{k^{\\ast}} - \\sum_{=0}^{k^{\\ast} - 1}{ 2^{} } . \\] Hence, \\[     \\tilde{c}_k         = \\begin{cases}             0       & k < k^{\\ast} , \\\\             1       & k = k^{\\ast} , \\\\             c_{k}   & k > k^{\\ast} ,     \\end{cases} \\] \\[     j+1         = \\sum_{k=0}^{\\infty}{                 \\tilde{c}_{k} 2^{k}             } . \\]","code":""},{"path":"/articles/The-binary-representation.html","id":"the-mo-parameter-mapping","dir":"Articles","previous_headings":"","what":"The MO parameter mapping","title":"The binary representation of the MO parameter","text":"choose following bijections store Marshall-Olkin parameters vector length \\(2^{d} - 1\\): \\[     T         : \\mathcal{P}{({\\{ 1 , \\ldots, d \\}} \\setminus \\emptyset)}             \\\\{ 1 , \\ldots, 2^{d} - 1 \\},         \\ \\mapsto \\sum_{=1}^{d}{             1_{\\{ \\\\}} 2^{-1}         } . \\] \\[     T^{-1}         : {\\{ 1 , \\ldots, 2^{d} - 1 \\}}             \\\\mathcal{P}{({\\{ 1 , \\ldots, d\\}} \\setminus \\emptyset)},         \\ j \\mapsto {\\{ \\ :\\ (j / 2^{-1}) \\ \\mathrm{mod}\\ 2 = 1 \\}} . \\]","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Henrik Sloot. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sloot H (2023). rmo: package Marshall-Olkin distribution. R package version 0.8.3, https://github.com/hsloot/rmo.","code":"@Manual{,   title = {rmo: A package for the Marshall-Olkin distribution},   author = {Henrik Sloot},   year = {2023},   note = {R package version 0.8.3},   url = {https://github.com/hsloot/rmo}, }"},{"path":"/index.html","id":"rmo","dir":"","previous_headings":"","what":"A package for the Marshall-Olkin distribution","title":"A package for the Marshall-Olkin distribution","text":"R package constructing simulating Marshall-Olkin distribution.","code":""},{"path":"/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"A package for the Marshall-Olkin distribution","text":"academic literature Marshall-Olkin distributions extensive, intuitive easy--use implementation still missing. project aims provide R package makes simple fun use Marshall-Olkin distributions research real-world applications.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A package for the Marshall-Olkin distribution","text":"can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"hsloot/rmo\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A package for the Marshall-Olkin distribution","text":"provide drop-wrapper rpextmofor simulating several parametric families exchangeable Marshall-Olkin distributions: example simulate family associated α-stable distribution, use parametric families based -called Bernstein functions. previous example, associated Bernstein function can defined via: Bernstein functions closed addition, scaling, composite scaling, can used create new Bernstein functions. following Bernstein function approximates Bernstein function associated α-stable distribution previous example. Bernstein functions closed addition, scaling, composite scaling, can used create new Bernstein functions:","code":"rpextmo(     n = 10, d = 3,     eta = log2(2 - 0.5),     family = \"AlphaStable\" ) #>             [,1]      [,2]       [,3] #>  [1,] 1.43771730 1.4377173 1.43771730 #>  [2,] 2.05209628 1.3530518 1.91148856 #>  [3,] 0.57433836 1.3811189 1.90247610 #>  [4,] 0.75080505 1.1922738 0.54154504 #>  [5,] 1.71072303 1.7107230 0.25935362 #>  [6,] 0.50637200 0.5063720 0.50637200 #>  [7,] 1.70689790 1.7068979 0.43169613 #>  [8,] 0.07250493 0.7784406 0.07250493 #>  [9,] 1.83458658 1.3509871 1.83458658 #> [10,] 2.57508782 0.1130284 0.91314202 alpha <- log2(2 - 0.5) bf <- AlphaStableBernsteinFunction(     alpha = alpha ) bf #> An object of class \"AlphaStableBernsteinFunction\" #> - alpha: 0.5849625 x0 <- 5e-4 bf_approximated <- SumOfBernsteinFunctions(     first = LinearBernsteinFunction(         scale = alpha * x0^(1 - alpha) / (1 - alpha) / gamma(1 - alpha)     ),     second = ScaledBernsteinFunction(         scale = x0^(-alpha) / gamma(1 - alpha),         original = ParetoBernsteinFunction(             alpha = alpha,             x0 = x0         )     ) )"},{"path":"/index.html","id":"word-of-caution-for-high-dimensions","dir":"","previous_headings":"","what":"Word of caution for high dimensions","title":"A package for the Marshall-Olkin distribution","text":"package, including simulation algorithms, extensively tested unit tests. Nevertheless, can happen run unexpected results certain parametrizations high dimensions. reason numerical issues small large numbers. tried program defensively avoid problems, dimension high enough parametrization leads values double precision, point numerical issues inevitable. reason, encourage users produce statistical tests suitable use-case; see integration test example. encountering statistical problems, please submit issue report including reprex.","code":""},{"path":"/index.html","id":"roadmap-for-future-development","dir":"","previous_headings":"","what":"Roadmap for future development","title":"A package for the Marshall-Olkin distribution","text":"aim package seamless efficient simulation Marshall-Olkin distributions. , provide primary function package: rpextmo. may assume stability interface ✅, assume stability simulation results ❌. planning develop package incrementally. API functions might change. Ideas future changes : Refactoring arnold_distribution markovian_exmo_distribution based random_walk_distribution markov_process. Add distribution sample Arnold model exchangeable shock-size arrival intensities require store shock arrival intensities. Implement calculation exchangeable shock-size arrival intensities corresponding Markov generator C++. Consider using C++ wrapper R’s C-API integration, implementing C++ backend Bernstein functions. ideas future: Implementation estimation routines (help wanted). Representation simulation hierarchical Marshall-Olkin distributions.","code":""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"A package for the Marshall-Olkin distribution","text":"Contribution highly appreciated. Contribution can range improving documentation, writing tests, raising issues feature requests implementing feature requests fixing bugs. consider contribute, look contribution guide.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"A package for the Marshall-Olkin distribution","text":"GPL-3 Henrik Sloot","code":""},{"path":"/pull_request_template.html","id":"related-issues","dir":"","previous_headings":"","what":"Related issues","title":"NA","text":"Closes/Fixes #…","code":""},{"path":"/pull_request_template.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist","title":"NA","text":"R CMD CHECK successful tests included documentation included updated commit messages follow commit guidelines new refactored algorithms: benchmarks (comparison previous version) included Optional, recommended: code passes lintr::lint_package() without errors","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"/pull_request_template.html","id":"mentions-for-review","dir":"","previous_headings":"","what":"Mentions for review","title":"NA","text":"@mention1, @mention2","code":""},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"\\(\\alpha\\)-stable Lévy subordinator \\(0 < \\alpha < 1\\), corresponding Bernstein function power function exponent \\(\\alpha\\), .e. $$   \\psi(x) = x^\\alpha, \\quad x>0. $$","code":""},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"","code":"# S4 method for AlphaStableBernsteinFunction initialize(.Object, alpha)  # S4 method for AlphaStableBernsteinFunction show(object)  # S4 method for AlphaStableBernsteinFunction levyDensity(object)  # S4 method for AlphaStableBernsteinFunction stieltjesDensity(object)"},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":".Object object:  see “Initialize Methods” section. alpha Positive number zero one (bounds excl.). object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity).","code":""},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"\\(\\alpha\\)-stable Bernstein function, higher order alternating iterated forward differences known closed form evaluated numerically without danger loss significance. can use numerical integration (: stats::integrate()) approximate following representation: $$   {(-1)}^{k-1} \\Delta^k \\psi(x)    = \\int_0^\\infty e^{-ux} (1-e^{-u})^k      \\alpha \\frac{1}{\\Gamma(1-\\alpha) u^{1+\\alpha}} du, x>0, k>0 . $$ Bernstein function . 1 list complete Bernstein functions Chp. 16 (Schilling et al. 2012) .","code":""},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"initialize(AlphaStableBernsteinFunction): Constructor show(AlphaStableBernsteinFunction): Display object. levyDensity(AlphaStableBernsteinFunction): see LevyBernsteinFunction stieltjesDensity(AlphaStableBernsteinFunction): see CompleteBernsteinFunction.","code":""},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"alpha index \\(\\alpha\\).","code":""},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":"l-vy-density","dir":"Reference","previous_headings":"","what":"Lévy density","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"$$   \\nu(du)     = \\frac{\\alpha}{\\Gamma(1-\\alpha)} u^{-1 - \\alpha} , \\quad u > 0 . $$","code":""},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":"stieltjes-density","dir":"Reference","previous_headings":"","what":"Stieltjes Density","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"$$   \\sigma(du)     = \\frac{\\sin(\\alpha \\pi)}{\\pi} u^{\\alpha - 1}, \\quad u > 0 . $$","code":""},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"Schilling RL, Song R, Vondracek Z (2012). Bernstein functions, 2 edition. De Gruyter. doi:10.1515/9783110269338 .","code":""},{"path":[]},{"path":"/reference/AlphaStableBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for the \\(\\alpha\\)-stable Bernstein function — AlphaStableBernsteinFunction-class","text":"","code":"AlphaStableBernsteinFunction() #> An object of class \"AlphaStableBernsteinFunction\" #> \t (invalid or not initialized) AlphaStableBernsteinFunction(alpha = 0.5) #> An object of class \"AlphaStableBernsteinFunction\" #> - alpha: 0.5"},{"path":"/reference/BernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Virtual superclass for Bernstein functions — BernsteinFunction-class","title":"Virtual superclass for Bernstein functions — BernsteinFunction-class","text":"virtual superclass implementations various classes Bernstein functions.","code":""},{"path":"/reference/BernsteinFunction-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Virtual superclass for Bernstein functions — BernsteinFunction-class","text":"","code":"valueOf(object, x, difference_order = 0L, n = 1L, k = 0L, cscale = 1, ...)  uexIntensities(object, d, cscale = 1, ...)  intensities(object, d, cscale = 1, ...)  exIntensities(object, d, cscale = 1, ...)  exQMatrix(object, d, cscale = 1, ...)  # S4 method for BernsteinFunction uexIntensities(object, d, cscale = 1, ...)  # S4 method for BernsteinFunction exIntensities(object, d, cscale = 1, ...)  # S4 method for BernsteinFunction intensities(object, d, cscale = 1, ...)  # S4 method for BernsteinFunction exQMatrix(object, d, cscale = 1, ...)"},{"path":"/reference/BernsteinFunction-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Virtual superclass for Bernstein functions — BernsteinFunction-class","text":"object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity). x non-negativ numeric vector iterated difference Bernstein function evaluated. difference_order non-negative integer order alternating iterated forward differences taken Bernstein function. n, k non-negative numbers binomial factor. cscale positive numeric scalar composite scaling factor. ... pass-parameter d positive integer, larger two, dimension.","code":""},{"path":"/reference/BernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Virtual superclass for Bernstein functions — BernsteinFunction-class","text":"Bernstein function non-negative, non-decreasing, infinitely often differentiable function whose recursive finite forward differences alternating signs: $$     {(-1)}^{-1} \\Delta^{}{ \\psi{(x)} }         \\geq 0 ,             \\quad \\forall  \\\\mathbb{N}, x \\geq 0 . $$ particular, following sequence defines extendible Marshall–Olkin distribution: $$     {(-1)}^{-1} \\Delta^{}{ \\psi{(d-)} } ,         \\quad 1 \\leq \\leq d . $$","code":""},{"path":"/reference/BernsteinFunction-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Virtual superclass for Bernstein functions — BernsteinFunction-class","text":"valueOf(): Calculate values Bernstein function higher-order, alternating iterated forward differences, possibly scaled binomial coefficient, .e. $$       {(-1)}^{j-1} \\Delta^{j}{ \\psi(c x) } ,           \\quad x > 0 .   $$ uexIntensities(): Calculates (unscaled) exchangeable shock-arrival intensities, see rmo() rexmo(). intensities(): Calculates shock-arrival intensities, intensities parameter rmo(). exIntensities(): Calculates exchangeable shock-size-arrival intensities, ex_intensities parameter rexmo(). exQMatrix(): Calculates infinitesimal Markov generator matrix corresponding (Markovian) default-counting process, used internally rexmo().","code":""},{"path":"/reference/BernsteinFunction-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Virtual superclass for Bernstein functions — BernsteinFunction-class","text":"Schilling RL, Song R, Vondracek Z (2012). Bernstein functions, 2 edition. De Gruyter. doi:10.1515/9783110269338 .","code":""},{"path":[]},{"path":"/reference/BernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Virtual superclass for Bernstein functions — BernsteinFunction-class","text":"","code":"exIntensities(AlphaStableBernsteinFunction(4e-1), 3L) #> [1] 0.6970130 0.2615107 0.5933218  exIntensities(AlphaStableBernsteinFunction(4e-1), 3L) #> [1] 0.6970130 0.2615107 0.5933218  intensities(AlphaStableBernsteinFunction(4e-1), 3L) #> [1] 0.23233766 0.23233766 0.08717025 0.23233766 0.08717025 0.08717025 0.59332184  exQMatrix(AlphaStableBernsteinFunction(4e-1), 3L) #>           [,1]      [,2]       [,3]      [,4] #> [1,] -1.551846  0.697013  0.2615107 0.5933218 #> [2,]  0.000000 -1.319508  0.6390158 0.6804921 #> [3,]  0.000000  0.000000 -1.0000000 1.0000000 #> [4,]  0.000000  0.000000  0.0000000 0.0000000"},{"path":"/reference/CompleteBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Virtual superclass for complete Bernstein functions — CompleteBernsteinFunction-class","title":"Virtual superclass for complete Bernstein functions — CompleteBernsteinFunction-class","text":"virtual superclass Bernstein functions can representated Stieltjes density (drift killing rate). means exists Stieltjes measure \\(\\sigma\\) $$   \\psi(x) = \\int_0^\\infty \\frac{x}{x + u} \\sigma(du) , x > 0 . $$","code":""},{"path":"/reference/CompleteBernsteinFunction-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Virtual superclass for complete Bernstein functions — CompleteBernsteinFunction-class","text":"","code":"stieltjesDensity(object)  # S4 method for CompleteBernsteinFunction valueOf(   object,   x,   difference_order,   n = 1L,   k = 0L,   cscale = 1,   ...,   method = c(\"default\", \"stieltjes\", \"levy\"),   tolerance = .Machine$double.eps^0.5 )"},{"path":"/reference/CompleteBernsteinFunction-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Virtual superclass for complete Bernstein functions — CompleteBernsteinFunction-class","text":"object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity). x non-negativ numeric vector iterated difference Bernstein function evaluated. difference_order non-negative integer order alternating iterated forward differences taken Bernstein function. n, k non-negative numbers binomial factor. cscale positive numeric scalar composite scaling factor. ... pass-parameter method Method calculate result; use method = \"levy\" using Lévy representation method = \"stieltjes\" using Stieltjes representation. tolerance (Relative) tolerance, passed stats::integrate()","code":""},{"path":"/reference/CompleteBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Virtual superclass for complete Bernstein functions — CompleteBernsteinFunction-class","text":"continuous Stieltjes densities, values Bernstein function calculated stats::integrate() using representation $$   \\psi(x)     = \\int_{0}^{\\infty} x \\mathrm{Beta}(1, x + u) \\sigma(du), \\quad x > 0 , $$ values iterated differences calculated using representation $$   (-1)^{j-1} \\Delta^{j} \\psi(x)     = \\int_{0}^{\\infty} u \\mathrm{Beta}(j+1, x + u) \\sigma(du) ,     \\quad x > 0 . $$ discrete Lévy densities \\(\\sigma(du) = \\sum_{} y_i \\delta_{u_i}(du)\\), values Bernstein function calculated using representation $$   \\psi(x)     = \\sum_{} x \\mathrm{Beta}(1, x + u_i) y_i, \\quad x > 0 , $$ values iterated differences calculated using representation $$   (-1)^{j-1} \\Delta^{j} \\psi(x)     = \\sum_{} u_i \\mathrm{Beta}(j+1, x + u_i) y_i ,     \\quad x > 0 . $$","code":""},{"path":"/reference/CompleteBernsteinFunction-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Virtual superclass for complete Bernstein functions — CompleteBernsteinFunction-class","text":"stieltjesDensity(): returns Stieltjes density lower, upper, type attributes continuous returns data.frame named columns x (atoms) y (weights) well type attribute discrete. type attribute either \"continuous\" \"discrete\". valueOf(CompleteBernsteinFunction): Calculates iterated differences Bernstein function, see valueOf()","code":""},{"path":[]},{"path":"/reference/CompositeScaledBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for composite scaled Bernstein functions — CompositeScaledBernsteinFunction-class","title":"Class for composite scaled Bernstein functions — CompositeScaledBernsteinFunction-class","text":"Bernstein functions stable composition, .e. \\(\\psi\\) Bernstein function c > 0, $$   x \\mapsto \\psi(c x) $$ also Bernstein function.","code":""},{"path":"/reference/CompositeScaledBernsteinFunction-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for composite scaled Bernstein functions — CompositeScaledBernsteinFunction-class","text":"","code":"# S4 method for CompositeScaledBernsteinFunction initialize(.Object, cscale, original)  # S4 method for CompositeScaledBernsteinFunction show(object)  # S4 method for CompositeScaledBernsteinFunction valueOf(object, x, difference_order = 0L, n = 1, k = 0, cscale = 1, ...)"},{"path":"/reference/CompositeScaledBernsteinFunction-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for composite scaled Bernstein functions — CompositeScaledBernsteinFunction-class","text":".Object object:  see “Initialize Methods” section. cscale Positive number. original Derives BernsteinFunction. object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity). x non-negativ numeric vector iterated difference Bernstein function evaluated. difference_order non-negative integer order alternating iterated forward differences taken Bernstein function. n, k non-negative numbers binomial factor. ... arguments specify properties new object,       passed initialize().","code":""},{"path":"/reference/CompositeScaledBernsteinFunction-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Class for composite scaled Bernstein functions — CompositeScaledBernsteinFunction-class","text":"initialize(CompositeScaledBernsteinFunction): Constructor show(CompositeScaledBernsteinFunction): Display object. valueOf(CompositeScaledBernsteinFunction): Calculates iterated differences Bernstein function, see valueOf()","code":""},{"path":"/reference/CompositeScaledBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for composite scaled Bernstein functions — CompositeScaledBernsteinFunction-class","text":"cscale scale inner linear Bernstein function composition. original original Bernstein function.","code":""},{"path":[]},{"path":"/reference/CompositeScaledBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for composite scaled Bernstein functions — CompositeScaledBernsteinFunction-class","text":"","code":"CompositeScaledBernsteinFunction() #> An object of class \"CompositeScaledBernsteinFunction\" #> \t (invalid or not initialized) cscale <- 0.5 bf_original <- AlphaStableBernsteinFunction() CompositeScaledBernsteinFunction(cscale = cscale, original = bf_original) #> An object of class \"CompositeScaledBernsteinFunction\" #> - cscale: 0.5 #> - original: #> \tAn object of class \"AlphaStableBernsteinFunction\" #> \t\t (invalid or not initialized)"},{"path":"/reference/ConstantBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for (almost) constant Bernstein functions — ConstantBernsteinFunction-class","title":"Class for (almost) constant Bernstein functions — ConstantBernsteinFunction-class","text":"constant Bernstein function Bernstein function constant part (\\(x > 0\\)), .e. \\(b = 0\\) \\(\\nu = 0\\). particular, $$   \\psi(x) = , x > 0 $$","code":""},{"path":"/reference/ConstantBernsteinFunction-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for (almost) constant Bernstein functions — ConstantBernsteinFunction-class","text":"","code":"# S4 method for ConstantBernsteinFunction initialize(.Object, constant)  # S4 method for ConstantBernsteinFunction show(object)  # S4 method for ConstantBernsteinFunction valueOf(object, x, difference_order = 0L, n = 1L, k = 0L, cscale = 1, ...)"},{"path":"/reference/ConstantBernsteinFunction-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for (almost) constant Bernstein functions — ConstantBernsteinFunction-class","text":".Object object:  see “Initialize Methods” section. constant Non-negative number. object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity). x non-negativ numeric vector iterated difference Bernstein function evaluated. difference_order non-negative integer order alternating iterated forward differences taken Bernstein function. n, k non-negative numbers binomial factor. cscale positive numeric scalar composite scaling factor. ... arguments specify properties new object,       passed initialize().","code":""},{"path":"/reference/ConstantBernsteinFunction-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Class for (almost) constant Bernstein functions — ConstantBernsteinFunction-class","text":"initialize(ConstantBernsteinFunction): Constructor show(ConstantBernsteinFunction): Display object. valueOf(ConstantBernsteinFunction): Calculates iterated differences Bernstein function, see valueOf()","code":""},{"path":"/reference/ConstantBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for (almost) constant Bernstein functions — ConstantBernsteinFunction-class","text":"constant non-negative killing parameter (.e. \\(\\) representation)","code":""},{"path":[]},{"path":"/reference/ConstantBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for (almost) constant Bernstein functions — ConstantBernsteinFunction-class","text":"","code":"ConstantBernsteinFunction() #> An object of class \"ConstantBernsteinFunction\" #> \t (invalid or not initialized) ConstantBernsteinFunction(constant = 0.2) #> An object of class \"ConstantBernsteinFunction\" #> - constant: 0.2"},{"path":"/reference/ConvexCombinationOfBernsteinFunctions-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for convex combinations of Bernstein functions — ConvexCombinationOfBernsteinFunctions-class","title":"Class for convex combinations of Bernstein functions — ConvexCombinationOfBernsteinFunctions-class","text":"Bernstein functions stable convex combinations, .e. \\(\\psi_1, \\ldots, \\psi_n\\) Bernstein functions \\(c_1, \\ldots, c_n > 0\\) positive real values, $$   x \\mapsto c_1 \\psi_1(x) + \\cdots + c_n \\psi_n(x) , x>0, $$ also Bernstein function.","code":""},{"path":"/reference/ConvexCombinationOfBernsteinFunctions-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for convex combinations of Bernstein functions — ConvexCombinationOfBernsteinFunctions-class","text":"","code":"# S4 method for ConvexCombinationOfBernsteinFunctions initialize(.Object, coefficients, points)  # S4 method for ConvexCombinationOfBernsteinFunctions show(object)  # S4 method for ConvexCombinationOfBernsteinFunctions valueOf(object, x, difference_order = 0L, n = 1L, k = 0L, cscale = 1, ...)"},{"path":"/reference/ConvexCombinationOfBernsteinFunctions-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for convex combinations of Bernstein functions — ConvexCombinationOfBernsteinFunctions-class","text":".Object object:  see “Initialize Methods” section. coefficients Derives ConvexCombinationOfBernsteinFunctions. points Derives ConvexCombinationOfBernsteinFunctions. object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity). x non-negativ numeric vector iterated difference Bernstein function evaluated. difference_order non-negative integer order alternating iterated forward differences taken Bernstein function. n, k non-negative numbers binomial factor. cscale positive numeric scalar composite scaling factor. ... arguments specify properties new object,       passed initialize().","code":""},{"path":"/reference/ConvexCombinationOfBernsteinFunctions-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Class for convex combinations of Bernstein functions — ConvexCombinationOfBernsteinFunctions-class","text":"initialize(ConvexCombinationOfBernsteinFunctions): Constructor show(ConvexCombinationOfBernsteinFunctions): Display object. valueOf(ConvexCombinationOfBernsteinFunctions): Calculates iterated differences Bernstein function, see valueOf()","code":""},{"path":"/reference/ConvexCombinationOfBernsteinFunctions-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for convex combinations of Bernstein functions — ConvexCombinationOfBernsteinFunctions-class","text":"coefficients Numeric vector positive real values. points List Bernstein functions.","code":""},{"path":"/reference/ConvexCombinationOfBernsteinFunctions-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for convex combinations of Bernstein functions — ConvexCombinationOfBernsteinFunctions-class","text":"","code":"ConvexCombinationOfBernsteinFunctions() #> An object of class \"ConvexCombinationOfBernsteinFunctions\" #> \t (invalid or not initialized) bf1 <- LinearBernsteinFunction(scale = 0.2) bf2 <- ConstantBernsteinFunction(constant = 0.5) bf3 <- AlphaStableBernsteinFunction(alpha = 0.5) ConvexCombinationOfBernsteinFunctions(     coefficients = c(0.2, 0.5, 0.1),     points = list(bf1, bf2, bf3) ) #> An object of class \"ConvexCombinationOfBernsteinFunctions\" #> - coefficient: 0.2 #> - point: #> \tAn object of class \"LinearBernsteinFunction\" #> \t- scale: 0.2 #> - coefficient: 0.5 #> - point: #> \tAn object of class \"ConstantBernsteinFunction\" #> \t- constant: 0.5 #> - coefficient: 0.1 #> - point: #> \tAn object of class \"AlphaStableBernsteinFunction\" #> \t- alpha: 0.5"},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"Exponential jump CPP subordinator \\(\\lambda > 0\\), corresponding Bernstein function $$   \\psi(x) = \\frac{x}{x + \\lambda}, x>0. $$","code":""},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"","code":"# S4 method for ExponentialBernsteinFunction initialize(.Object, lambda)  # S4 method for ExponentialBernsteinFunction show(object)  # S4 method for ExponentialBernsteinFunction levyDensity(object)  # S4 method for ExponentialBernsteinFunction stieltjesDensity(object)"},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":".Object object:  see “Initialize Methods” section. lambda Positive number. object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity).","code":""},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"Exponential jump CPP Bernstein function, higher order alternating iterated forward differences known closed form: $$   {(-1)}^{k-1} \\Delta^k \\psi(x)    = \\lambda \\cdot B(k+1, x+\\lambda), x>0, k>0 . $$ Bernstein function . 4 list complete Bernstein functions Chp. 16 (Schilling et al. 2012) .","code":""},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"initialize(ExponentialBernsteinFunction): Constructor show(ExponentialBernsteinFunction): Display object. levyDensity(ExponentialBernsteinFunction): see LevyBernsteinFunction stieltjesDensity(ExponentialBernsteinFunction): see CompleteBernsteinFunction","code":""},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"lambda index \\(\\lambda\\).","code":""},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":"l-vy-density","dir":"Reference","previous_headings":"","what":"Lévy density","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"$$   \\nu(du)     = \\lambda \\operatorname{e}^{-\\lambda u}, \\quad u > 0 . $$","code":""},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":"stieltjes-density","dir":"Reference","previous_headings":"","what":"Stieltjes density","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"$$   \\sigma(du)     = \\delta_{\\lambda}(du), \\quad u > 0 . $$","code":""},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"Schilling RL, Song R, Vondracek Z (2012). Bernstein functions, 2 edition. De Gruyter. doi:10.1515/9783110269338 .","code":""},{"path":[]},{"path":"/reference/ExponentialBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Exponential Bernstein functions — ExponentialBernsteinFunction-class","text":"","code":"ExponentialBernsteinFunction() #> An object of class \"ExponentialBernsteinFunction\" #> \t (invalid or not initialized) ExponentialBernsteinFunction(lambda = 0.5) #> An object of class \"ExponentialBernsteinFunction\" #> - lambda: 0.5"},{"path":"/reference/GammaBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"Gamma Bernstein function, Bernstein function subordinator (scaled) Gamma distribution. representation \\(> 0\\) $$   \\psi(x) = \\log(1 + \\frac{x}{}), x > 0. $$","code":""},{"path":"/reference/GammaBernsteinFunction-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"","code":"# S4 method for GammaBernsteinFunction initialize(.Object, a)  # S4 method for GammaBernsteinFunction show(object)  # S4 method for GammaBernsteinFunction levyDensity(object)  # S4 method for GammaBernsteinFunction stieltjesDensity(object)"},{"path":"/reference/GammaBernsteinFunction-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":".Object object:  see “Initialize Methods” section. Positive number. object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity).","code":""},{"path":"/reference/GammaBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"Bernstein function, higher-order alternating iterated forward differences known closed form evaluated numerically without danger loss significance. can use numerical integration (: stats::integrate()) approximate following representation: $$   {(-1)}^{k-1} \\Delta^{k} \\psi(x)     = \\int_{0}^{\\infty} e^{-ux} {(1 - e^{-u})}^{k}       \\frac{e^{-au}}{u} du, x>0, k>0. $$ Bernstein function . 26 list complete Bernstein functions Chp. 16 (Schilling et al. 2012) .","code":""},{"path":"/reference/GammaBernsteinFunction-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"initialize(GammaBernsteinFunction): Constructor show(GammaBernsteinFunction): Display object. levyDensity(GammaBernsteinFunction): see LevyBernsteinFunction stieltjesDensity(GammaBernsteinFunction): see CompleteBernsteinFunction","code":""},{"path":"/reference/GammaBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"Scale parameter Lévy measure.","code":""},{"path":"/reference/GammaBernsteinFunction-class.html","id":"l-vy-density","dir":"Reference","previous_headings":"","what":"Lévy density","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"$$   \\nu(du)     = \\frac{\\operatorname{e}^{-u}}{u}, \\quad u > 0 . $$","code":""},{"path":"/reference/GammaBernsteinFunction-class.html","id":"stieltjes-density","dir":"Reference","previous_headings":"","what":"Stieltjes density","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"$$   \\sigma(du)     = 1 / u du, u > . $$","code":""},{"path":"/reference/GammaBernsteinFunction-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"Schilling RL, Song R, Vondracek Z (2012). Bernstein functions, 2 edition. De Gruyter. doi:10.1515/9783110269338 .","code":""},{"path":[]},{"path":"/reference/GammaBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Gamma Bernstein functions — GammaBernsteinFunction-class","text":"","code":"GammaBernsteinFunction() #> An object of class \"GammaBernsteinFunction\" #> \t (invalid or not initialized) GammaBernsteinFunction(a = 2) #> An object of class \"GammaBernsteinFunction\" #> - a: 2"},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"inverse Gaussian Lévy subordinator \\(\\eta > 0\\), corresponding Bernstein function function $$   \\psi(x) = \\sqrt{2x + \\eta^2} - \\eta, x>0. $$","code":""},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"","code":"# S4 method for InverseGaussianBernsteinFunction initialize(.Object, eta)  # S4 method for InverseGaussianBernsteinFunction show(object)  # S4 method for InverseGaussianBernsteinFunction levyDensity(object)  # S4 method for InverseGaussianBernsteinFunction stieltjesDensity(object)"},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":".Object object:  see “Initialize Methods” section. eta Non-negative number. object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity).","code":""},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"inverse Gaussian Bernstein function, higher-order alternating iterated forward differences known closed-form, can use numerical integration (: stats::integrate()) approximate following representation: $$  {(-1)}^{k-1} \\Delta^{k} \\psi(x)    = \\int_0^\\infty e^{-ux} (1-e^{-u})^k \\frac{1}{\\sqrt{2\\pi}      u^{3/2}} e^{-\\frac{1}{2}\\eta^2 u} du, x>0, k>0. $$ Bernstein function can found p. 309 (Mai Scherer 2017) . Furthermore  transformation . 2 list complete Bernstein functions Chp. 16 (Schilling et al. 2012) .","code":""},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"initialize(InverseGaussianBernsteinFunction): Constructor show(InverseGaussianBernsteinFunction): Display object. levyDensity(InverseGaussianBernsteinFunction): see LevyBernsteinFunction stieltjesDensity(InverseGaussianBernsteinFunction): see CompleteBernsteinFunction","code":""},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"eta distribution parameter (drift underlying Gaussian process)","code":""},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":"l-vy-density","dir":"Reference","previous_headings":"","what":"Lévy density","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"$$   \\nu(du)     = \\frac{1}{\\sqrt{2 \\pi u^3}} \\operatorname{e}^{-\\frac{1}{2} \\eta^2 u} ,     \\quad u > 0 . $$","code":""},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":"stieltjes-density","dir":"Reference","previous_headings":"","what":"Stieltjes density","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"$$   \\sigma(du)     = \\frac{\\sin(\\pi / 2)}{\\pi} \\cdot \\frac{\\sqrt{2 x - \\eta^2}}{x} , \\quad u > \\eta^2 / 2 . $$","code":""},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"Mai J, Scherer M (2017). Simulating copulas: stochastic models, sampling algorithms applications,  Series Quantitative Finance, 2 edition. World Scientific. doi:10.1142/10265 . Schilling RL, Song R, Vondracek Z (2012). Bernstein functions, 2 edition. De Gruyter. doi:10.1515/9783110269338 .","code":""},{"path":[]},{"path":"/reference/InverseGaussianBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Inverse Gaussian Bernstein function — InverseGaussianBernsteinFunction-class","text":"","code":"InverseGaussianBernsteinFunction() #> An object of class \"InverseGaussianBernsteinFunction\" #> \t (invalid or not initialized) InverseGaussianBernsteinFunction(eta = 0.3) #> An object of class \"InverseGaussianBernsteinFunction\" #> - eta: 0.3"},{"path":"/reference/LevyBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Virtual superclass for Bernstein functions with non-zero Lévy density — LevyBernsteinFunction-class","title":"Virtual superclass for Bernstein functions with non-zero Lévy density — LevyBernsteinFunction-class","text":"virtual superclass Bernstein functions can representated Lévy density (drift killing rate). means exists Lévy measure \\(\\nu\\) $$   \\psi(x) = \\int_0^\\infty (1 - e^{-ux}) \\nu(du) , x > 0 . $$","code":""},{"path":"/reference/LevyBernsteinFunction-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Virtual superclass for Bernstein functions with non-zero Lévy density — LevyBernsteinFunction-class","text":"","code":"levyDensity(object)  # S4 method for LevyBernsteinFunction valueOf(   object,   x,   difference_order,   n = 1L,   k = 0L,   cscale = 1,   ...,   method = c(\"default\", \"levy\"),   tolerance = .Machine$double.eps^0.5 )"},{"path":"/reference/LevyBernsteinFunction-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Virtual superclass for Bernstein functions with non-zero Lévy density — LevyBernsteinFunction-class","text":"object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity). x non-negativ numeric vector iterated difference Bernstein function evaluated. difference_order non-negative integer order alternating iterated forward differences taken Bernstein function. n, k non-negative numbers binomial factor. cscale positive numeric scalar composite scaling factor. ... pass-parameter method Method calculate result; use method = \"levy\" using Lévy representation method = \"stieltjes\" using Stieltjes representation. tolerance (Relative) tolerance, passed stats::integrate()","code":""},{"path":"/reference/LevyBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Virtual superclass for Bernstein functions with non-zero Lévy density — LevyBernsteinFunction-class","text":"continuous Lévy densities, values Bernstein function calculated stats::integrate() using representation $$   \\psi(x)     = \\int_{0}^{\\infty} (1 - \\operatorname{e}^{-ux}) \\nu(du), \\quad x > 0 , $$ values iterated differences calculated using representation $$   (-1)^{j-1} \\Delta^{j} \\psi(x)     = \\int_{0}^{\\infty} \\operatorname{e}^{-ux} (1 - \\operatorname{e}^{-u})^j \\nu(du) ,     \\quad x > 0 . $$ discrete Lévy densities \\(\\nu(du) = \\sum_{} y_i \\delta_{u_i}(du)\\), values Bernstein function calculated using representation $$   \\psi(x)     = \\sum_{} (1 - \\operatorname{e}^{-u_i x}) y_i, \\quad x > 0 , $$ values iterated differences calculated using representation $$   (-1)^{j-1} \\Delta^{j} \\psi(x)     = \\sum_{} \\operatorname{e}^{-u_i x} (1 - \\operatorname{e}^{-u_i})^j y_i ,     \\quad x > 0 . $$","code":""},{"path":"/reference/LevyBernsteinFunction-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Virtual superclass for Bernstein functions with non-zero Lévy density — LevyBernsteinFunction-class","text":"levyDensity(): returns Lévy density lower, upper, type attributes continuous returns data.frame named columns x (atoms) y (weights) well type attribute discrete. type attribute either \"continuous\" \"discrete\". valueOf(LevyBernsteinFunction): Calculates iterated differences Bernstein function, see valueOf()","code":""},{"path":[]},{"path":"/reference/LinearBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for linear Bernstein functions — LinearBernsteinFunction-class","title":"Class for linear Bernstein functions — LinearBernsteinFunction-class","text":"linear Bernstein function Bernstein function drift, .e. \\(= 0\\) \\(\\nu = 0\\). particular, $$  \\psi(x) = b x, x > 0. $$","code":""},{"path":"/reference/LinearBernsteinFunction-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for linear Bernstein functions — LinearBernsteinFunction-class","text":"","code":"# S4 method for LinearBernsteinFunction initialize(.Object, scale)  # S4 method for LinearBernsteinFunction show(object)  # S4 method for LinearBernsteinFunction valueOf(object, x, difference_order = 0L, n = 1L, k = 0L, cscale = 1, ...)"},{"path":"/reference/LinearBernsteinFunction-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for linear Bernstein functions — LinearBernsteinFunction-class","text":".Object object:  see “Initialize Methods” section. scale Non-negative number. object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity). x non-negativ numeric vector iterated difference Bernstein function evaluated. difference_order non-negative integer order alternating iterated forward differences taken Bernstein function. n, k non-negative numbers binomial factor. cscale positive numeric scalar composite scaling factor. ... arguments specify properties new object,       passed initialize().","code":""},{"path":"/reference/LinearBernsteinFunction-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Class for linear Bernstein functions — LinearBernsteinFunction-class","text":"initialize(LinearBernsteinFunction): Constructor show(LinearBernsteinFunction): Display object. valueOf(LinearBernsteinFunction): Calculates iterated differences Bernstein function, see valueOf()","code":""},{"path":"/reference/LinearBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for linear Bernstein functions — LinearBernsteinFunction-class","text":"scale non-negative drift parameter (.e. \\(b\\) representation)","code":""},{"path":[]},{"path":"/reference/LinearBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for linear Bernstein functions — LinearBernsteinFunction-class","text":"","code":"LinearBernsteinFunction() #> An object of class \"LinearBernsteinFunction\" #> \t (invalid or not initialized) LinearBernsteinFunction(scale = 2) #> An object of class \"LinearBernsteinFunction\" #> - scale: 2"},{"path":"/reference/ParetoBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":"Pareto-jump compound Poisson process index \\(0 < \\alpha < 1\\) cutoff point \\(x0\\), corresponding Bernstein function $$   \\psi(x)   = 1 - e^{-x x_0} + (x_0 x)^\\alpha \\Gamma(1-\\alpha, x_0 x) ,   x>0 . $$","code":""},{"path":"/reference/ParetoBernsteinFunction-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":"","code":"# S4 method for ParetoBernsteinFunction initialize(.Object, alpha, x0)  # S4 method for ParetoBernsteinFunction show(object)  # S4 method for ParetoBernsteinFunction levyDensity(object)"},{"path":"/reference/ParetoBernsteinFunction-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":".Object object:  see “Initialize Methods” section. alpha Positive number zero one (bounds excl.). x0 Positive number. object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity).","code":""},{"path":"/reference/ParetoBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":"Bernstein function, higher-order alternating iterated forward differences known closed form evaluated numerically without danger loss significance. can use numerical integration (: stats::integrate()) approximate following representation: $$   {(-1)}^{k-1} \\Delta^k \\psi(x)   = \\int_{x_0}^\\infty e^{-ux} (1-e^{-u})^k   \\alpha \\frac{{x_0}^\\alpha}{t^{1+\\alpha}} du,   x>0, k>0 . $$ Pareto Bernstein function, combination linear Bernstein function can used approximate Bernstein function \\(\\alpha\\)-stable subordinator, see Sec. 5.3 (Loroño 2015) .","code":""},{"path":"/reference/ParetoBernsteinFunction-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":"initialize(ParetoBernsteinFunction): Constructor show(ParetoBernsteinFunction): Display object. levyDensity(ParetoBernsteinFunction): see LevyBernsteinFunction","code":""},{"path":"/reference/ParetoBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":"alpha index \\(\\alpha\\) x0 cutoff point \\(x_0\\)","code":""},{"path":"/reference/ParetoBernsteinFunction-class.html","id":"l-vy-density","dir":"Reference","previous_headings":"","what":"Lévy density","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":"$$   \\nu(du)     = \\alpha \\frac{x_0^\\alpha}{u^{\\alpha + 1}}, \\quad u > x_0 . $$","code":""},{"path":"/reference/ParetoBernsteinFunction-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":"Loroño LF (2015). Selected topics financial engineering: first-exit times dependence structures Marshall-Olkin Kind. Ph.D. thesis, University Basque Country.","code":""},{"path":[]},{"path":"/reference/ParetoBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Pareto Bernstein functions — ParetoBernsteinFunction-class","text":"","code":"ParetoBernsteinFunction() #> An object of class \"ParetoBernsteinFunction\" #> \t (invalid or not initialized) ParetoBernsteinFunction(alpha = 0.2, x0 = 1) #> An object of class \"ParetoBernsteinFunction\" #> - alpha: 0.2 #> - x0: 1"},{"path":"/reference/PoissonBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","title":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","text":"Poisson process arrival-rate \\(\\lambda\\) fixed jump size \\(\\eta\\) Lévy subordinator corresponding Bernstein function $$   \\psi(x) = 1 - e^{-x\\eta}, x>0. $$","code":""},{"path":"/reference/PoissonBernsteinFunction-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","text":"","code":"# S4 method for PoissonBernsteinFunction initialize(.Object, eta)  # S4 method for PoissonBernsteinFunction show(object)  # S4 method for PoissonBernsteinFunction levyDensity(object)"},{"path":"/reference/PoissonBernsteinFunction-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","text":".Object object:  see “Initialize Methods” section. eta Positive number. object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity).","code":""},{"path":"/reference/PoissonBernsteinFunction-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","text":"Poisson Bernstein function, higher-order alternating iterated forward differences can calculated closed form: $$   {(-1)}^{k-1} \\Delta^k \\psi(x) = e^{-u\\eta} (1-e^{-\\eta})^k, x>0, k>0. $$","code":""},{"path":"/reference/PoissonBernsteinFunction-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","text":"initialize(PoissonBernsteinFunction): Constructor show(PoissonBernsteinFunction): Display object. levyDensity(PoissonBernsteinFunction): see LevyBernsteinFunction","code":""},{"path":"/reference/PoissonBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","text":"lambda (positive) arrival rate underlying Poisson process. eta fixed (positive) jump size Poisson process.","code":""},{"path":"/reference/PoissonBernsteinFunction-class.html","id":"l-vy-density","dir":"Reference","previous_headings":"","what":"Lévy density","title":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","text":"$$   \\nu(du)     = \\lambda \\delta_{\\eta}(du), \\quad u > 0 . $$","code":""},{"path":[]},{"path":"/reference/PoissonBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for Poisson Bernstein functions — PoissonBernsteinFunction-class","text":"","code":"PoissonBernsteinFunction() #> An object of class \"PoissonBernsteinFunction\" #> \t (invalid or not initialized) PoissonBernsteinFunction(eta = 2) #> An object of class \"PoissonBernsteinFunction\" #> - eta: 2"},{"path":"/reference/ScaledBernsteinFunction-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for scaled Bernstein functions — ScaledBernsteinFunction-class","title":"Class for scaled Bernstein functions — ScaledBernsteinFunction-class","text":"Bernstein functions stable (non-negative) scalar multiplication, .e. \\(\\psi\\) Bernstein function \\(\\lambda \\geq 0\\) , $$   x \\mapsto \\lambda \\psi(x), x > 0, $$ also Bernstein function.","code":""},{"path":"/reference/ScaledBernsteinFunction-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for scaled Bernstein functions — ScaledBernsteinFunction-class","text":"","code":"# S4 method for ScaledBernsteinFunction initialize(.Object, scale, original)  # S4 method for ScaledBernsteinFunction show(object)  # S4 method for ScaledBernsteinFunction valueOf(object, x, difference_order = 0L, n = 1L, k = 0L, cscale = 1, ...)"},{"path":"/reference/ScaledBernsteinFunction-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for scaled Bernstein functions — ScaledBernsteinFunction-class","text":".Object object:  see “Initialize Methods” section. scale Positive number. original Derives BernsteinFunction. object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity). x non-negativ numeric vector iterated difference Bernstein function evaluated. difference_order non-negative integer order alternating iterated forward differences taken Bernstein function. n, k non-negative numbers binomial factor. cscale positive numeric scalar composite scaling factor. ... arguments specify properties new object,       passed initialize().","code":""},{"path":"/reference/ScaledBernsteinFunction-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Class for scaled Bernstein functions — ScaledBernsteinFunction-class","text":"initialize(ScaledBernsteinFunction): Constructor show(ScaledBernsteinFunction): Display object. valueOf(ScaledBernsteinFunction): Calculates iterated differences Bernstein function, see valueOf()","code":""},{"path":"/reference/ScaledBernsteinFunction-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for scaled Bernstein functions — ScaledBernsteinFunction-class","text":"scale scalar factor original Bernstein function multiplied. original original Bernstein function multiplied.","code":""},{"path":[]},{"path":"/reference/ScaledBernsteinFunction-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for scaled Bernstein functions — ScaledBernsteinFunction-class","text":"","code":"ScaledBernsteinFunction() #> An object of class \"ScaledBernsteinFunction\" #> \t (invalid or not initialized) original_bf <- AlphaStableBernsteinFunction(alpha = 0.5) ScaledBernsteinFunction(scale = 2, original = original_bf) #> An object of class \"ScaledBernsteinFunction\" #> - scale: 2 #> - original: #> \tAn object of class \"AlphaStableBernsteinFunction\" #> \t- alpha: 0.5"},{"path":"/reference/SumOfBernsteinFunctions-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class for sums of two Bernstein functions — SumOfBernsteinFunctions-class","title":"Class for sums of two Bernstein functions — SumOfBernsteinFunctions-class","text":"Bernstein functions stable addition, .e. \\(\\psi_1\\) \\(\\psi_2\\) two Bernstein functions, $$   x \\mapsto \\psi_1(x) + \\psi_2(x) , x>0, $$ also Bernstein function.","code":""},{"path":"/reference/SumOfBernsteinFunctions-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class for sums of two Bernstein functions — SumOfBernsteinFunctions-class","text":"","code":"# S4 method for SumOfBernsteinFunctions initialize(.Object, first, second)  # S4 method for SumOfBernsteinFunctions show(object)  # S4 method for SumOfBernsteinFunctions valueOf(object, x, difference_order = 0L, n = 1L, k = 0L, cscale = 1, ...)"},{"path":"/reference/SumOfBernsteinFunctions-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class for sums of two Bernstein functions — SumOfBernsteinFunctions-class","text":".Object object:  see “Initialize Methods” section. first Derives BernsteinFunction. second Derives BernsteinFunction. object object deriving LevyBernsteinFunction (levyDensity) CompleteBernsteinFunction (stieltjesDensity). x non-negativ numeric vector iterated difference Bernstein function evaluated. difference_order non-negative integer order alternating iterated forward differences taken Bernstein function. n, k non-negative numbers binomial factor. cscale positive numeric scalar composite scaling factor. ... arguments specify properties new object,       passed initialize().","code":""},{"path":"/reference/SumOfBernsteinFunctions-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Class for sums of two Bernstein functions — SumOfBernsteinFunctions-class","text":"initialize(SumOfBernsteinFunctions): Constructor show(SumOfBernsteinFunctions): Display object. valueOf(SumOfBernsteinFunctions): Calculates iterated differences Bernstein function, see valueOf()","code":""},{"path":"/reference/SumOfBernsteinFunctions-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class for sums of two Bernstein functions — SumOfBernsteinFunctions-class","text":"first first summand (derived BernsteinFunction). second second summand (derived BernsteinFunction).","code":""},{"path":[]},{"path":"/reference/SumOfBernsteinFunctions-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class for sums of two Bernstein functions — SumOfBernsteinFunctions-class","text":"","code":"SumOfBernsteinFunctions() #> An object of class \"SumOfBernsteinFunctions\" #> \t (invalid or not initialized) first_bf <- LinearBernsteinFunction(scale = 0.2) second_bf <- AlphaStableBernsteinFunction(alpha = 0.5) SumOfBernsteinFunctions(first = first_bf, second = second_bf) #> An object of class \"SumOfBernsteinFunctions\" #> - first: #> \tAn object of class \"LinearBernsteinFunction\" #> \t- scale: 0.2 #> - second: #> \tAn object of class \"AlphaStableBernsteinFunction\" #> \t- alpha: 0.5"},{"path":"/reference/parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience functions to MO parameters — parameter","title":"Convenience functions to MO parameters — parameter","text":"following functions convenience wrappers create intensities parameters MO distribution ex_intensities parameters exMO distribution.","code":""},{"path":"/reference/parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience functions to MO parameters — parameter","text":"","code":"ex_intensities_constant(d, constant)  intensities_constant(d, constant)  ex_intensities_linear(d, scale)  intensities_linear(d, scale)  ex_intensities_armageddon(d, alpha, beta)  intensities_armageddon(d, alpha, beta)  ex_intensities_poisson(d, eta)  intensities_poisson(d, eta)  ex_intensities_alpha_stable(d, alpha)  intensities_alpha_stable(d, alpha)  ex_intensities_exponential(d, lambda)  intensities_exponential(d, lambda)  ex_intensities_gamma(d, a)  intensities_gamma(d, a)  ex_intensities_pareto(d, alpha, x0)  intensities_pareto(d, alpha, x0)  ex_intensities_inverse_gaussian(d, eta)  intensities_inverse_gaussian(d, eta)"},{"path":"/reference/parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience functions to MO parameters — parameter","text":"d Dimension distribution constant Rate global shock, passed constant parameter ConstantBernsteinFunction scale Rates individual shocks, passed scale parameter LinearBernsteinFunction alpha Alpha parameter Pareto CPP, passed alpha parameter ParetoBernsteinFunction beta Rate global shock, passed constant parameter ConstantBernsteinFunction eta eta parameter inverse Gaussian BF, passed eta parameter InverseGaussianBernsteinFunction lambda lambda parameter Exponential-jump CPP subordinator, passed lambda parameter ExponentialBernsteinFunction Shape parameter Gamma subordinator, passed parameter GammaBernsteinFunction x0 Cutoff parameter Pareto CPP, passed x0 parameter ParetoBernsteinFunction","code":""},{"path":"/reference/parameter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convenience functions to MO parameters — parameter","text":"information, please read corresponding  documentation respective Bernstein function.","code":""},{"path":[]},{"path":"/reference/parameter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience functions to MO parameters — parameter","text":"","code":"ex_intensities_constant(10L, constant = 1) #>  [1] 0 0 0 0 0 0 0 0 0 1  intensities_constant(10L, constant = 1) #>    [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>   [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>   [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [112] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [149] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [186] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [223] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [260] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [297] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [334] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [371] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [408] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [445] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [482] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [519] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [556] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [593] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [630] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [667] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [704] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [741] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [778] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [815] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [852] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [889] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [926] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [963] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #> [1000] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1  ex_intensities_linear(10L, scale = 1) #>  [1] 10  0  0  0  0  0  0  0  0  0  intensities_linear(10L, scale = 1) #>    [1] 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 #>   [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 #>   [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [112] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [149] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [186] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [223] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 #>  [260] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [297] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [334] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [371] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [408] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [445] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [482] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 #>  [519] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [556] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [593] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [630] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [667] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [704] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [741] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [778] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [815] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [852] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [889] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [926] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #>  [963] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 #> [1000] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  ex_intensities_armageddon(10L, alpha = 1, beta = 0.5) #>  [1] 10.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.0  0.5  intensities_armageddon(10L, alpha = 1, beta = 0.5) #>    [1] 1.0 1.0 0.0 1.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 #>   [19] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 #>   [37] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>   [55] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>   [73] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>   [91] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [109] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [127] 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [145] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [163] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [181] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [199] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [217] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [235] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [253] 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [271] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [289] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [307] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [325] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [343] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [361] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [379] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [397] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [415] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [433] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [451] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [469] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [487] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [505] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [523] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [541] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [559] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [577] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [595] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [613] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [631] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [649] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [667] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [685] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [703] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [721] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [739] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [757] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [775] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [793] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [811] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [829] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [847] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [865] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [883] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [901] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [919] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [937] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [955] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [973] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #>  [991] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 #> [1009] 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.5  ex_intensities_poisson(10L, eta = 0.2) #>  [1] 2.996360e-01 2.985311e-01 1.762550e-01 6.829084e-02 1.814374e-02 #>  [6] 3.347561e-03 4.235196e-04 3.516315e-05 1.730048e-06 3.830375e-08  intensities_poisson(10L, eta = 0.2) #>    [1] 2.996360e-02 2.996360e-02 6.634025e-03 2.996360e-02 6.634025e-03 #>    [6] 6.634025e-03 1.468791e-03 2.996360e-02 6.634025e-03 6.634025e-03 #>   [11] 1.468791e-03 6.634025e-03 1.468791e-03 1.468791e-03 3.251945e-04 #>   [16] 2.996360e-02 6.634025e-03 6.634025e-03 1.468791e-03 6.634025e-03 #>   [21] 1.468791e-03 1.468791e-03 3.251945e-04 6.634025e-03 1.468791e-03 #>   [26] 1.468791e-03 3.251945e-04 1.468791e-03 3.251945e-04 3.251945e-04 #>   [31] 7.199895e-05 2.996360e-02 6.634025e-03 6.634025e-03 1.468791e-03 #>   [36] 6.634025e-03 1.468791e-03 1.468791e-03 3.251945e-04 6.634025e-03 #>   [41] 1.468791e-03 1.468791e-03 3.251945e-04 1.468791e-03 3.251945e-04 #>   [46] 3.251945e-04 7.199895e-05 6.634025e-03 1.468791e-03 1.468791e-03 #>   [51] 3.251945e-04 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 #>   [56] 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 #>   [61] 7.199895e-05 7.199895e-05 1.594077e-05 2.996360e-02 6.634025e-03 #>   [66] 6.634025e-03 1.468791e-03 6.634025e-03 1.468791e-03 1.468791e-03 #>   [71] 3.251945e-04 6.634025e-03 1.468791e-03 1.468791e-03 3.251945e-04 #>   [76] 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 6.634025e-03 #>   [81] 1.468791e-03 1.468791e-03 3.251945e-04 1.468791e-03 3.251945e-04 #>   [86] 3.251945e-04 7.199895e-05 1.468791e-03 3.251945e-04 3.251945e-04 #>   [91] 7.199895e-05 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 #>   [96] 6.634025e-03 1.468791e-03 1.468791e-03 3.251945e-04 1.468791e-03 #>  [101] 3.251945e-04 3.251945e-04 7.199895e-05 1.468791e-03 3.251945e-04 #>  [106] 3.251945e-04 7.199895e-05 3.251945e-04 7.199895e-05 7.199895e-05 #>  [111] 1.594077e-05 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 #>  [116] 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 3.251945e-04 #>  [121] 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 #>  [126] 1.594077e-05 3.529330e-06 2.996360e-02 6.634025e-03 6.634025e-03 #>  [131] 1.468791e-03 6.634025e-03 1.468791e-03 1.468791e-03 3.251945e-04 #>  [136] 6.634025e-03 1.468791e-03 1.468791e-03 3.251945e-04 1.468791e-03 #>  [141] 3.251945e-04 3.251945e-04 7.199895e-05 6.634025e-03 1.468791e-03 #>  [146] 1.468791e-03 3.251945e-04 1.468791e-03 3.251945e-04 3.251945e-04 #>  [151] 7.199895e-05 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 #>  [156] 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 6.634025e-03 #>  [161] 1.468791e-03 1.468791e-03 3.251945e-04 1.468791e-03 3.251945e-04 #>  [166] 3.251945e-04 7.199895e-05 1.468791e-03 3.251945e-04 3.251945e-04 #>  [171] 7.199895e-05 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 #>  [176] 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 #>  [181] 7.199895e-05 7.199895e-05 1.594077e-05 3.251945e-04 7.199895e-05 #>  [186] 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 #>  [191] 3.529330e-06 6.634025e-03 1.468791e-03 1.468791e-03 3.251945e-04 #>  [196] 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 1.468791e-03 #>  [201] 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 7.199895e-05 #>  [206] 7.199895e-05 1.594077e-05 1.468791e-03 3.251945e-04 3.251945e-04 #>  [211] 7.199895e-05 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 #>  [216] 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 #>  [221] 1.594077e-05 1.594077e-05 3.529330e-06 1.468791e-03 3.251945e-04 #>  [226] 3.251945e-04 7.199895e-05 3.251945e-04 7.199895e-05 7.199895e-05 #>  [231] 1.594077e-05 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 #>  [236] 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 3.251945e-04 #>  [241] 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 #>  [246] 1.594077e-05 3.529330e-06 7.199895e-05 1.594077e-05 1.594077e-05 #>  [251] 3.529330e-06 1.594077e-05 3.529330e-06 3.529330e-06 7.814033e-07 #>  [256] 2.996360e-02 6.634025e-03 6.634025e-03 1.468791e-03 6.634025e-03 #>  [261] 1.468791e-03 1.468791e-03 3.251945e-04 6.634025e-03 1.468791e-03 #>  [266] 1.468791e-03 3.251945e-04 1.468791e-03 3.251945e-04 3.251945e-04 #>  [271] 7.199895e-05 6.634025e-03 1.468791e-03 1.468791e-03 3.251945e-04 #>  [276] 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 1.468791e-03 #>  [281] 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 7.199895e-05 #>  [286] 7.199895e-05 1.594077e-05 6.634025e-03 1.468791e-03 1.468791e-03 #>  [291] 3.251945e-04 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 #>  [296] 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 #>  [301] 7.199895e-05 7.199895e-05 1.594077e-05 1.468791e-03 3.251945e-04 #>  [306] 3.251945e-04 7.199895e-05 3.251945e-04 7.199895e-05 7.199895e-05 #>  [311] 1.594077e-05 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 #>  [316] 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 6.634025e-03 #>  [321] 1.468791e-03 1.468791e-03 3.251945e-04 1.468791e-03 3.251945e-04 #>  [326] 3.251945e-04 7.199895e-05 1.468791e-03 3.251945e-04 3.251945e-04 #>  [331] 7.199895e-05 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 #>  [336] 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 #>  [341] 7.199895e-05 7.199895e-05 1.594077e-05 3.251945e-04 7.199895e-05 #>  [346] 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 #>  [351] 3.529330e-06 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 #>  [356] 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 3.251945e-04 #>  [361] 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 #>  [366] 1.594077e-05 3.529330e-06 3.251945e-04 7.199895e-05 7.199895e-05 #>  [371] 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 #>  [376] 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 1.594077e-05 #>  [381] 3.529330e-06 3.529330e-06 7.814033e-07 6.634025e-03 1.468791e-03 #>  [386] 1.468791e-03 3.251945e-04 1.468791e-03 3.251945e-04 3.251945e-04 #>  [391] 7.199895e-05 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 #>  [396] 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 1.468791e-03 #>  [401] 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 7.199895e-05 #>  [406] 7.199895e-05 1.594077e-05 3.251945e-04 7.199895e-05 7.199895e-05 #>  [411] 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 #>  [416] 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 #>  [421] 7.199895e-05 7.199895e-05 1.594077e-05 3.251945e-04 7.199895e-05 #>  [426] 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 #>  [431] 3.529330e-06 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 #>  [436] 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 7.199895e-05 #>  [441] 1.594077e-05 1.594077e-05 3.529330e-06 1.594077e-05 3.529330e-06 #>  [446] 3.529330e-06 7.814033e-07 1.468791e-03 3.251945e-04 3.251945e-04 #>  [451] 7.199895e-05 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 #>  [456] 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 #>  [461] 1.594077e-05 1.594077e-05 3.529330e-06 3.251945e-04 7.199895e-05 #>  [466] 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 #>  [471] 3.529330e-06 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 #>  [476] 1.594077e-05 3.529330e-06 3.529330e-06 7.814033e-07 3.251945e-04 #>  [481] 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 #>  [486] 1.594077e-05 3.529330e-06 7.199895e-05 1.594077e-05 1.594077e-05 #>  [491] 3.529330e-06 1.594077e-05 3.529330e-06 3.529330e-06 7.814033e-07 #>  [496] 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 1.594077e-05 #>  [501] 3.529330e-06 3.529330e-06 7.814033e-07 1.594077e-05 3.529330e-06 #>  [506] 3.529330e-06 7.814033e-07 3.529330e-06 7.814033e-07 7.814033e-07 #>  [511] 1.730048e-07 2.996360e-02 6.634025e-03 6.634025e-03 1.468791e-03 #>  [516] 6.634025e-03 1.468791e-03 1.468791e-03 3.251945e-04 6.634025e-03 #>  [521] 1.468791e-03 1.468791e-03 3.251945e-04 1.468791e-03 3.251945e-04 #>  [526] 3.251945e-04 7.199895e-05 6.634025e-03 1.468791e-03 1.468791e-03 #>  [531] 3.251945e-04 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 #>  [536] 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 #>  [541] 7.199895e-05 7.199895e-05 1.594077e-05 6.634025e-03 1.468791e-03 #>  [546] 1.468791e-03 3.251945e-04 1.468791e-03 3.251945e-04 3.251945e-04 #>  [551] 7.199895e-05 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 #>  [556] 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 1.468791e-03 #>  [561] 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 7.199895e-05 #>  [566] 7.199895e-05 1.594077e-05 3.251945e-04 7.199895e-05 7.199895e-05 #>  [571] 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 #>  [576] 6.634025e-03 1.468791e-03 1.468791e-03 3.251945e-04 1.468791e-03 #>  [581] 3.251945e-04 3.251945e-04 7.199895e-05 1.468791e-03 3.251945e-04 #>  [586] 3.251945e-04 7.199895e-05 3.251945e-04 7.199895e-05 7.199895e-05 #>  [591] 1.594077e-05 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 #>  [596] 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 3.251945e-04 #>  [601] 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 #>  [606] 1.594077e-05 3.529330e-06 1.468791e-03 3.251945e-04 3.251945e-04 #>  [611] 7.199895e-05 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 #>  [616] 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 #>  [621] 1.594077e-05 1.594077e-05 3.529330e-06 3.251945e-04 7.199895e-05 #>  [626] 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 #>  [631] 3.529330e-06 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 #>  [636] 1.594077e-05 3.529330e-06 3.529330e-06 7.814033e-07 6.634025e-03 #>  [641] 1.468791e-03 1.468791e-03 3.251945e-04 1.468791e-03 3.251945e-04 #>  [646] 3.251945e-04 7.199895e-05 1.468791e-03 3.251945e-04 3.251945e-04 #>  [651] 7.199895e-05 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 #>  [656] 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 #>  [661] 7.199895e-05 7.199895e-05 1.594077e-05 3.251945e-04 7.199895e-05 #>  [666] 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 #>  [671] 3.529330e-06 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 #>  [676] 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 3.251945e-04 #>  [681] 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 #>  [686] 1.594077e-05 3.529330e-06 3.251945e-04 7.199895e-05 7.199895e-05 #>  [691] 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 #>  [696] 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 1.594077e-05 #>  [701] 3.529330e-06 3.529330e-06 7.814033e-07 1.468791e-03 3.251945e-04 #>  [706] 3.251945e-04 7.199895e-05 3.251945e-04 7.199895e-05 7.199895e-05 #>  [711] 1.594077e-05 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 #>  [716] 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 3.251945e-04 #>  [721] 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 #>  [726] 1.594077e-05 3.529330e-06 7.199895e-05 1.594077e-05 1.594077e-05 #>  [731] 3.529330e-06 1.594077e-05 3.529330e-06 3.529330e-06 7.814033e-07 #>  [736] 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 #>  [741] 1.594077e-05 1.594077e-05 3.529330e-06 7.199895e-05 1.594077e-05 #>  [746] 1.594077e-05 3.529330e-06 1.594077e-05 3.529330e-06 3.529330e-06 #>  [751] 7.814033e-07 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 #>  [756] 1.594077e-05 3.529330e-06 3.529330e-06 7.814033e-07 1.594077e-05 #>  [761] 3.529330e-06 3.529330e-06 7.814033e-07 3.529330e-06 7.814033e-07 #>  [766] 7.814033e-07 1.730048e-07 6.634025e-03 1.468791e-03 1.468791e-03 #>  [771] 3.251945e-04 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 #>  [776] 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 #>  [781] 7.199895e-05 7.199895e-05 1.594077e-05 1.468791e-03 3.251945e-04 #>  [786] 3.251945e-04 7.199895e-05 3.251945e-04 7.199895e-05 7.199895e-05 #>  [791] 1.594077e-05 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 #>  [796] 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 1.468791e-03 #>  [801] 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 7.199895e-05 #>  [806] 7.199895e-05 1.594077e-05 3.251945e-04 7.199895e-05 7.199895e-05 #>  [811] 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 #>  [816] 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 #>  [821] 1.594077e-05 1.594077e-05 3.529330e-06 7.199895e-05 1.594077e-05 #>  [826] 1.594077e-05 3.529330e-06 1.594077e-05 3.529330e-06 3.529330e-06 #>  [831] 7.814033e-07 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 #>  [836] 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 3.251945e-04 #>  [841] 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 #>  [846] 1.594077e-05 3.529330e-06 3.251945e-04 7.199895e-05 7.199895e-05 #>  [851] 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 #>  [856] 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 1.594077e-05 #>  [861] 3.529330e-06 3.529330e-06 7.814033e-07 3.251945e-04 7.199895e-05 #>  [866] 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 #>  [871] 3.529330e-06 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 #>  [876] 1.594077e-05 3.529330e-06 3.529330e-06 7.814033e-07 7.199895e-05 #>  [881] 1.594077e-05 1.594077e-05 3.529330e-06 1.594077e-05 3.529330e-06 #>  [886] 3.529330e-06 7.814033e-07 1.594077e-05 3.529330e-06 3.529330e-06 #>  [891] 7.814033e-07 3.529330e-06 7.814033e-07 7.814033e-07 1.730048e-07 #>  [896] 1.468791e-03 3.251945e-04 3.251945e-04 7.199895e-05 3.251945e-04 #>  [901] 7.199895e-05 7.199895e-05 1.594077e-05 3.251945e-04 7.199895e-05 #>  [906] 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 #>  [911] 3.529330e-06 3.251945e-04 7.199895e-05 7.199895e-05 1.594077e-05 #>  [916] 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 7.199895e-05 #>  [921] 1.594077e-05 1.594077e-05 3.529330e-06 1.594077e-05 3.529330e-06 #>  [926] 3.529330e-06 7.814033e-07 3.251945e-04 7.199895e-05 7.199895e-05 #>  [931] 1.594077e-05 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 #>  [936] 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 1.594077e-05 #>  [941] 3.529330e-06 3.529330e-06 7.814033e-07 7.199895e-05 1.594077e-05 #>  [946] 1.594077e-05 3.529330e-06 1.594077e-05 3.529330e-06 3.529330e-06 #>  [951] 7.814033e-07 1.594077e-05 3.529330e-06 3.529330e-06 7.814033e-07 #>  [956] 3.529330e-06 7.814033e-07 7.814033e-07 1.730048e-07 3.251945e-04 #>  [961] 7.199895e-05 7.199895e-05 1.594077e-05 7.199895e-05 1.594077e-05 #>  [966] 1.594077e-05 3.529330e-06 7.199895e-05 1.594077e-05 1.594077e-05 #>  [971] 3.529330e-06 1.594077e-05 3.529330e-06 3.529330e-06 7.814033e-07 #>  [976] 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 1.594077e-05 #>  [981] 3.529330e-06 3.529330e-06 7.814033e-07 1.594077e-05 3.529330e-06 #>  [986] 3.529330e-06 7.814033e-07 3.529330e-06 7.814033e-07 7.814033e-07 #>  [991] 1.730048e-07 7.199895e-05 1.594077e-05 1.594077e-05 3.529330e-06 #>  [996] 1.594077e-05 3.529330e-06 3.529330e-06 7.814033e-07 1.594077e-05 #> [1001] 3.529330e-06 3.529330e-06 7.814033e-07 3.529330e-06 7.814033e-07 #> [1006] 7.814033e-07 1.730048e-07 1.594077e-05 3.529330e-06 3.529330e-06 #> [1011] 7.814033e-07 3.529330e-06 7.814033e-07 7.814033e-07 1.730048e-07 #> [1016] 3.529330e-06 7.814033e-07 7.814033e-07 1.730048e-07 7.814033e-07 #> [1021] 1.730048e-07 1.730048e-07 3.830375e-08  ex_intensities_alpha_stable(10L, alpha = 0.4) #>  [1] 1.03661746 0.32248031 0.17952974 0.12289967 0.09436818 0.07861548 #>  [7] 0.07046094 0.06897917 0.07971455 0.45822094  intensities_alpha_stable(10L, alpha = 0.4) #>    [1] 0.1036617462 0.1036617462 0.0071662291 0.1036617462 0.0071662291 #>    [6] 0.0071662291 0.0014960812 0.1036617462 0.0071662291 0.0071662291 #>   [11] 0.0014960812 0.0071662291 0.0014960812 0.0014960812 0.0005852365 #>   [16] 0.1036617462 0.0071662291 0.0071662291 0.0014960812 0.0071662291 #>   [21] 0.0014960812 0.0014960812 0.0005852365 0.0071662291 0.0014960812 #>   [26] 0.0014960812 0.0005852365 0.0014960812 0.0005852365 0.0005852365 #>   [31] 0.0003744769 0.1036617462 0.0071662291 0.0071662291 0.0014960812 #>   [36] 0.0071662291 0.0014960812 0.0014960812 0.0005852365 0.0071662291 #>   [41] 0.0014960812 0.0014960812 0.0005852365 0.0014960812 0.0005852365 #>   [46] 0.0005852365 0.0003744769 0.0071662291 0.0014960812 0.0014960812 #>   [51] 0.0005852365 0.0014960812 0.0005852365 0.0005852365 0.0003744769 #>   [56] 0.0014960812 0.0005852365 0.0005852365 0.0003744769 0.0005852365 #>   [61] 0.0003744769 0.0003744769 0.0003743594 0.1036617462 0.0071662291 #>   [66] 0.0071662291 0.0014960812 0.0071662291 0.0014960812 0.0014960812 #>   [71] 0.0005852365 0.0071662291 0.0014960812 0.0014960812 0.0005852365 #>   [76] 0.0014960812 0.0005852365 0.0005852365 0.0003744769 0.0071662291 #>   [81] 0.0014960812 0.0014960812 0.0005852365 0.0014960812 0.0005852365 #>   [86] 0.0005852365 0.0003744769 0.0014960812 0.0005852365 0.0005852365 #>   [91] 0.0003744769 0.0005852365 0.0003744769 0.0003744769 0.0003743594 #>   [96] 0.0071662291 0.0014960812 0.0014960812 0.0005852365 0.0014960812 #>  [101] 0.0005852365 0.0005852365 0.0003744769 0.0014960812 0.0005852365 #>  [106] 0.0005852365 0.0003744769 0.0005852365 0.0003744769 0.0003744769 #>  [111] 0.0003743594 0.0014960812 0.0005852365 0.0005852365 0.0003744769 #>  [116] 0.0005852365 0.0003744769 0.0003744769 0.0003743594 0.0005852365 #>  [121] 0.0003744769 0.0003744769 0.0003743594 0.0003744769 0.0003743594 #>  [126] 0.0003743594 0.0005871745 0.1036617462 0.0071662291 0.0071662291 #>  [131] 0.0014960812 0.0071662291 0.0014960812 0.0014960812 0.0005852365 #>  [136] 0.0071662291 0.0014960812 0.0014960812 0.0005852365 0.0014960812 #>  [141] 0.0005852365 0.0005852365 0.0003744769 0.0071662291 0.0014960812 #>  [146] 0.0014960812 0.0005852365 0.0014960812 0.0005852365 0.0005852365 #>  [151] 0.0003744769 0.0014960812 0.0005852365 0.0005852365 0.0003744769 #>  [156] 0.0005852365 0.0003744769 0.0003744769 0.0003743594 0.0071662291 #>  [161] 0.0014960812 0.0014960812 0.0005852365 0.0014960812 0.0005852365 #>  [166] 0.0005852365 0.0003744769 0.0014960812 0.0005852365 0.0005852365 #>  [171] 0.0003744769 0.0005852365 0.0003744769 0.0003744769 0.0003743594 #>  [176] 0.0014960812 0.0005852365 0.0005852365 0.0003744769 0.0005852365 #>  [181] 0.0003744769 0.0003744769 0.0003743594 0.0005852365 0.0003744769 #>  [186] 0.0003744769 0.0003743594 0.0003744769 0.0003743594 0.0003743594 #>  [191] 0.0005871745 0.0071662291 0.0014960812 0.0014960812 0.0005852365 #>  [196] 0.0014960812 0.0005852365 0.0005852365 0.0003744769 0.0014960812 #>  [201] 0.0005852365 0.0005852365 0.0003744769 0.0005852365 0.0003744769 #>  [206] 0.0003744769 0.0003743594 0.0014960812 0.0005852365 0.0005852365 #>  [211] 0.0003744769 0.0005852365 0.0003744769 0.0003744769 0.0003743594 #>  [216] 0.0005852365 0.0003744769 0.0003744769 0.0003743594 0.0003744769 #>  [221] 0.0003743594 0.0003743594 0.0005871745 0.0014960812 0.0005852365 #>  [226] 0.0005852365 0.0003744769 0.0005852365 0.0003744769 0.0003744769 #>  [231] 0.0003743594 0.0005852365 0.0003744769 0.0003744769 0.0003743594 #>  [236] 0.0003744769 0.0003743594 0.0003743594 0.0005871745 0.0005852365 #>  [241] 0.0003744769 0.0003744769 0.0003743594 0.0003744769 0.0003743594 #>  [246] 0.0003743594 0.0005871745 0.0003744769 0.0003743594 0.0003743594 #>  [251] 0.0005871745 0.0003743594 0.0005871745 0.0005871745 0.0015328704 #>  [256] 0.1036617462 0.0071662291 0.0071662291 0.0014960812 0.0071662291 #>  [261] 0.0014960812 0.0014960812 0.0005852365 0.0071662291 0.0014960812 #>  [266] 0.0014960812 0.0005852365 0.0014960812 0.0005852365 0.0005852365 #>  [271] 0.0003744769 0.0071662291 0.0014960812 0.0014960812 0.0005852365 #>  [276] 0.0014960812 0.0005852365 0.0005852365 0.0003744769 0.0014960812 #>  [281] 0.0005852365 0.0005852365 0.0003744769 0.0005852365 0.0003744769 #>  [286] 0.0003744769 0.0003743594 0.0071662291 0.0014960812 0.0014960812 #>  [291] 0.0005852365 0.0014960812 0.0005852365 0.0005852365 0.0003744769 #>  [296] 0.0014960812 0.0005852365 0.0005852365 0.0003744769 0.0005852365 #>  [301] 0.0003744769 0.0003744769 0.0003743594 0.0014960812 0.0005852365 #>  [306] 0.0005852365 0.0003744769 0.0005852365 0.0003744769 0.0003744769 #>  [311] 0.0003743594 0.0005852365 0.0003744769 0.0003744769 0.0003743594 #>  [316] 0.0003744769 0.0003743594 0.0003743594 0.0005871745 0.0071662291 #>  [321] 0.0014960812 0.0014960812 0.0005852365 0.0014960812 0.0005852365 #>  [326] 0.0005852365 0.0003744769 0.0014960812 0.0005852365 0.0005852365 #>  [331] 0.0003744769 0.0005852365 0.0003744769 0.0003744769 0.0003743594 #>  [336] 0.0014960812 0.0005852365 0.0005852365 0.0003744769 0.0005852365 #>  [341] 0.0003744769 0.0003744769 0.0003743594 0.0005852365 0.0003744769 #>  [346] 0.0003744769 0.0003743594 0.0003744769 0.0003743594 0.0003743594 #>  [351] 0.0005871745 0.0014960812 0.0005852365 0.0005852365 0.0003744769 #>  [356] 0.0005852365 0.0003744769 0.0003744769 0.0003743594 0.0005852365 #>  [361] 0.0003744769 0.0003744769 0.0003743594 0.0003744769 0.0003743594 #>  [366] 0.0003743594 0.0005871745 0.0005852365 0.0003744769 0.0003744769 #>  [371] 0.0003743594 0.0003744769 0.0003743594 0.0003743594 0.0005871745 #>  [376] 0.0003744769 0.0003743594 0.0003743594 0.0005871745 0.0003743594 #>  [381] 0.0005871745 0.0005871745 0.0015328704 0.0071662291 0.0014960812 #>  [386] 0.0014960812 0.0005852365 0.0014960812 0.0005852365 0.0005852365 #>  [391] 0.0003744769 0.0014960812 0.0005852365 0.0005852365 0.0003744769 #>  [396] 0.0005852365 0.0003744769 0.0003744769 0.0003743594 0.0014960812 #>  [401] 0.0005852365 0.0005852365 0.0003744769 0.0005852365 0.0003744769 #>  [406] 0.0003744769 0.0003743594 0.0005852365 0.0003744769 0.0003744769 #>  [411] 0.0003743594 0.0003744769 0.0003743594 0.0003743594 0.0005871745 #>  [416] 0.0014960812 0.0005852365 0.0005852365 0.0003744769 0.0005852365 #>  [421] 0.0003744769 0.0003744769 0.0003743594 0.0005852365 0.0003744769 #>  [426] 0.0003744769 0.0003743594 0.0003744769 0.0003743594 0.0003743594 #>  [431] 0.0005871745 0.0005852365 0.0003744769 0.0003744769 0.0003743594 #>  [436] 0.0003744769 0.0003743594 0.0003743594 0.0005871745 0.0003744769 #>  [441] 0.0003743594 0.0003743594 0.0005871745 0.0003743594 0.0005871745 #>  [446] 0.0005871745 0.0015328704 0.0014960812 0.0005852365 0.0005852365 #>  [451] 0.0003744769 0.0005852365 0.0003744769 0.0003744769 0.0003743594 #>  [456] 0.0005852365 0.0003744769 0.0003744769 0.0003743594 0.0003744769 #>  [461] 0.0003743594 0.0003743594 0.0005871745 0.0005852365 0.0003744769 #>  [466] 0.0003744769 0.0003743594 0.0003744769 0.0003743594 0.0003743594 #>  [471] 0.0005871745 0.0003744769 0.0003743594 0.0003743594 0.0005871745 #>  [476] 0.0003743594 0.0005871745 0.0005871745 0.0015328704 0.0005852365 #>  [481] 0.0003744769 0.0003744769 0.0003743594 0.0003744769 0.0003743594 #>  [486] 0.0003743594 0.0005871745 0.0003744769 0.0003743594 0.0003743594 #>  [491] 0.0005871745 0.0003743594 0.0005871745 0.0005871745 0.0015328704 #>  [496] 0.0003744769 0.0003743594 0.0003743594 0.0005871745 0.0003743594 #>  [501] 0.0005871745 0.0005871745 0.0015328704 0.0003743594 0.0005871745 #>  [506] 0.0005871745 0.0015328704 0.0005871745 0.0015328704 0.0015328704 #>  [511] 0.0079714547 0.1036617462 0.0071662291 0.0071662291 0.0014960812 #>  [516] 0.0071662291 0.0014960812 0.0014960812 0.0005852365 0.0071662291 #>  [521] 0.0014960812 0.0014960812 0.0005852365 0.0014960812 0.0005852365 #>  [526] 0.0005852365 0.0003744769 0.0071662291 0.0014960812 0.0014960812 #>  [531] 0.0005852365 0.0014960812 0.0005852365 0.0005852365 0.0003744769 #>  [536] 0.0014960812 0.0005852365 0.0005852365 0.0003744769 0.0005852365 #>  [541] 0.0003744769 0.0003744769 0.0003743594 0.0071662291 0.0014960812 #>  [546] 0.0014960812 0.0005852365 0.0014960812 0.0005852365 0.0005852365 #>  [551] 0.0003744769 0.0014960812 0.0005852365 0.0005852365 0.0003744769 #>  [556] 0.0005852365 0.0003744769 0.0003744769 0.0003743594 0.0014960812 #>  [561] 0.0005852365 0.0005852365 0.0003744769 0.0005852365 0.0003744769 #>  [566] 0.0003744769 0.0003743594 0.0005852365 0.0003744769 0.0003744769 #>  [571] 0.0003743594 0.0003744769 0.0003743594 0.0003743594 0.0005871745 #>  [576] 0.0071662291 0.0014960812 0.0014960812 0.0005852365 0.0014960812 #>  [581] 0.0005852365 0.0005852365 0.0003744769 0.0014960812 0.0005852365 #>  [586] 0.0005852365 0.0003744769 0.0005852365 0.0003744769 0.0003744769 #>  [591] 0.0003743594 0.0014960812 0.0005852365 0.0005852365 0.0003744769 #>  [596] 0.0005852365 0.0003744769 0.0003744769 0.0003743594 0.0005852365 #>  [601] 0.0003744769 0.0003744769 0.0003743594 0.0003744769 0.0003743594 #>  [606] 0.0003743594 0.0005871745 0.0014960812 0.0005852365 0.0005852365 #>  [611] 0.0003744769 0.0005852365 0.0003744769 0.0003744769 0.0003743594 #>  [616] 0.0005852365 0.0003744769 0.0003744769 0.0003743594 0.0003744769 #>  [621] 0.0003743594 0.0003743594 0.0005871745 0.0005852365 0.0003744769 #>  [626] 0.0003744769 0.0003743594 0.0003744769 0.0003743594 0.0003743594 #>  [631] 0.0005871745 0.0003744769 0.0003743594 0.0003743594 0.0005871745 #>  [636] 0.0003743594 0.0005871745 0.0005871745 0.0015328704 0.0071662291 #>  [641] 0.0014960812 0.0014960812 0.0005852365 0.0014960812 0.0005852365 #>  [646] 0.0005852365 0.0003744769 0.0014960812 0.0005852365 0.0005852365 #>  [651] 0.0003744769 0.0005852365 0.0003744769 0.0003744769 0.0003743594 #>  [656] 0.0014960812 0.0005852365 0.0005852365 0.0003744769 0.0005852365 #>  [661] 0.0003744769 0.0003744769 0.0003743594 0.0005852365 0.0003744769 #>  [666] 0.0003744769 0.0003743594 0.0003744769 0.0003743594 0.0003743594 #>  [671] 0.0005871745 0.0014960812 0.0005852365 0.0005852365 0.0003744769 #>  [676] 0.0005852365 0.0003744769 0.0003744769 0.0003743594 0.0005852365 #>  [681] 0.0003744769 0.0003744769 0.0003743594 0.0003744769 0.0003743594 #>  [686] 0.0003743594 0.0005871745 0.0005852365 0.0003744769 0.0003744769 #>  [691] 0.0003743594 0.0003744769 0.0003743594 0.0003743594 0.0005871745 #>  [696] 0.0003744769 0.0003743594 0.0003743594 0.0005871745 0.0003743594 #>  [701] 0.0005871745 0.0005871745 0.0015328704 0.0014960812 0.0005852365 #>  [706] 0.0005852365 0.0003744769 0.0005852365 0.0003744769 0.0003744769 #>  [711] 0.0003743594 0.0005852365 0.0003744769 0.0003744769 0.0003743594 #>  [716] 0.0003744769 0.0003743594 0.0003743594 0.0005871745 0.0005852365 #>  [721] 0.0003744769 0.0003744769 0.0003743594 0.0003744769 0.0003743594 #>  [726] 0.0003743594 0.0005871745 0.0003744769 0.0003743594 0.0003743594 #>  [731] 0.0005871745 0.0003743594 0.0005871745 0.0005871745 0.0015328704 #>  [736] 0.0005852365 0.0003744769 0.0003744769 0.0003743594 0.0003744769 #>  [741] 0.0003743594 0.0003743594 0.0005871745 0.0003744769 0.0003743594 #>  [746] 0.0003743594 0.0005871745 0.0003743594 0.0005871745 0.0005871745 #>  [751] 0.0015328704 0.0003744769 0.0003743594 0.0003743594 0.0005871745 #>  [756] 0.0003743594 0.0005871745 0.0005871745 0.0015328704 0.0003743594 #>  [761] 0.0005871745 0.0005871745 0.0015328704 0.0005871745 0.0015328704 #>  [766] 0.0015328704 0.0079714547 0.0071662291 0.0014960812 0.0014960812 #>  [771] 0.0005852365 0.0014960812 0.0005852365 0.0005852365 0.0003744769 #>  [776] 0.0014960812 0.0005852365 0.0005852365 0.0003744769 0.0005852365 #>  [781] 0.0003744769 0.0003744769 0.0003743594 0.0014960812 0.0005852365 #>  [786] 0.0005852365 0.0003744769 0.0005852365 0.0003744769 0.0003744769 #>  [791] 0.0003743594 0.0005852365 0.0003744769 0.0003744769 0.0003743594 #>  [796] 0.0003744769 0.0003743594 0.0003743594 0.0005871745 0.0014960812 #>  [801] 0.0005852365 0.0005852365 0.0003744769 0.0005852365 0.0003744769 #>  [806] 0.0003744769 0.0003743594 0.0005852365 0.0003744769 0.0003744769 #>  [811] 0.0003743594 0.0003744769 0.0003743594 0.0003743594 0.0005871745 #>  [816] 0.0005852365 0.0003744769 0.0003744769 0.0003743594 0.0003744769 #>  [821] 0.0003743594 0.0003743594 0.0005871745 0.0003744769 0.0003743594 #>  [826] 0.0003743594 0.0005871745 0.0003743594 0.0005871745 0.0005871745 #>  [831] 0.0015328704 0.0014960812 0.0005852365 0.0005852365 0.0003744769 #>  [836] 0.0005852365 0.0003744769 0.0003744769 0.0003743594 0.0005852365 #>  [841] 0.0003744769 0.0003744769 0.0003743594 0.0003744769 0.0003743594 #>  [846] 0.0003743594 0.0005871745 0.0005852365 0.0003744769 0.0003744769 #>  [851] 0.0003743594 0.0003744769 0.0003743594 0.0003743594 0.0005871745 #>  [856] 0.0003744769 0.0003743594 0.0003743594 0.0005871745 0.0003743594 #>  [861] 0.0005871745 0.0005871745 0.0015328704 0.0005852365 0.0003744769 #>  [866] 0.0003744769 0.0003743594 0.0003744769 0.0003743594 0.0003743594 #>  [871] 0.0005871745 0.0003744769 0.0003743594 0.0003743594 0.0005871745 #>  [876] 0.0003743594 0.0005871745 0.0005871745 0.0015328704 0.0003744769 #>  [881] 0.0003743594 0.0003743594 0.0005871745 0.0003743594 0.0005871745 #>  [886] 0.0005871745 0.0015328704 0.0003743594 0.0005871745 0.0005871745 #>  [891] 0.0015328704 0.0005871745 0.0015328704 0.0015328704 0.0079714547 #>  [896] 0.0014960812 0.0005852365 0.0005852365 0.0003744769 0.0005852365 #>  [901] 0.0003744769 0.0003744769 0.0003743594 0.0005852365 0.0003744769 #>  [906] 0.0003744769 0.0003743594 0.0003744769 0.0003743594 0.0003743594 #>  [911] 0.0005871745 0.0005852365 0.0003744769 0.0003744769 0.0003743594 #>  [916] 0.0003744769 0.0003743594 0.0003743594 0.0005871745 0.0003744769 #>  [921] 0.0003743594 0.0003743594 0.0005871745 0.0003743594 0.0005871745 #>  [926] 0.0005871745 0.0015328704 0.0005852365 0.0003744769 0.0003744769 #>  [931] 0.0003743594 0.0003744769 0.0003743594 0.0003743594 0.0005871745 #>  [936] 0.0003744769 0.0003743594 0.0003743594 0.0005871745 0.0003743594 #>  [941] 0.0005871745 0.0005871745 0.0015328704 0.0003744769 0.0003743594 #>  [946] 0.0003743594 0.0005871745 0.0003743594 0.0005871745 0.0005871745 #>  [951] 0.0015328704 0.0003743594 0.0005871745 0.0005871745 0.0015328704 #>  [956] 0.0005871745 0.0015328704 0.0015328704 0.0079714547 0.0005852365 #>  [961] 0.0003744769 0.0003744769 0.0003743594 0.0003744769 0.0003743594 #>  [966] 0.0003743594 0.0005871745 0.0003744769 0.0003743594 0.0003743594 #>  [971] 0.0005871745 0.0003743594 0.0005871745 0.0005871745 0.0015328704 #>  [976] 0.0003744769 0.0003743594 0.0003743594 0.0005871745 0.0003743594 #>  [981] 0.0005871745 0.0005871745 0.0015328704 0.0003743594 0.0005871745 #>  [986] 0.0005871745 0.0015328704 0.0005871745 0.0015328704 0.0015328704 #>  [991] 0.0079714547 0.0003744769 0.0003743594 0.0003743594 0.0005871745 #>  [996] 0.0003743594 0.0005871745 0.0005871745 0.0015328704 0.0003743594 #> [1001] 0.0005871745 0.0005871745 0.0015328704 0.0005871745 0.0015328704 #> [1006] 0.0015328704 0.0079714547 0.0003743594 0.0005871745 0.0005871745 #> [1011] 0.0015328704 0.0005871745 0.0015328704 0.0015328704 0.0079714547 #> [1016] 0.0005871745 0.0015328704 0.0015328704 0.0079714547 0.0015328704 #> [1021] 0.0079714547 0.0079714547 0.4582209400  ex_intensities_exponential(10L, lambda = 0.4) #>  [1] 0.04091653 0.04383914 0.04739366 0.05183682 0.05759647 0.06545053 #>  [7] 0.07700062 0.09625078 0.13750112 0.34375279  intensities_exponential(10L, lambda = 0.4) #>    [1] 0.0040916530 0.0040916530 0.0009742031 0.0040916530 0.0009742031 #>    [6] 0.0009742031 0.0003949472 0.0040916530 0.0009742031 0.0009742031 #>   [11] 0.0003949472 0.0009742031 0.0003949472 0.0003949472 0.0002468420 #>   [16] 0.0040916530 0.0009742031 0.0009742031 0.0003949472 0.0009742031 #>   [21] 0.0003949472 0.0003949472 0.0002468420 0.0009742031 0.0003949472 #>   [26] 0.0003949472 0.0002468420 0.0003949472 0.0002468420 0.0002468420 #>   [31] 0.0002285574 0.0040916530 0.0009742031 0.0009742031 0.0003949472 #>   [36] 0.0009742031 0.0003949472 0.0003949472 0.0002468420 0.0009742031 #>   [41] 0.0003949472 0.0003949472 0.0002468420 0.0003949472 0.0002468420 #>   [46] 0.0002468420 0.0002285574 0.0009742031 0.0003949472 0.0003949472 #>   [51] 0.0002468420 0.0003949472 0.0002468420 0.0002468420 0.0002285574 #>   [56] 0.0003949472 0.0002468420 0.0002468420 0.0002285574 0.0002468420 #>   [61] 0.0002285574 0.0002285574 0.0003116692 0.0040916530 0.0009742031 #>   [66] 0.0009742031 0.0003949472 0.0009742031 0.0003949472 0.0003949472 #>   [71] 0.0002468420 0.0009742031 0.0003949472 0.0003949472 0.0002468420 #>   [76] 0.0003949472 0.0002468420 0.0002468420 0.0002285574 0.0009742031 #>   [81] 0.0003949472 0.0003949472 0.0002468420 0.0003949472 0.0002468420 #>   [86] 0.0002468420 0.0002285574 0.0003949472 0.0002468420 0.0002468420 #>   [91] 0.0002285574 0.0002468420 0.0002285574 0.0002285574 0.0003116692 #>   [96] 0.0009742031 0.0003949472 0.0003949472 0.0002468420 0.0003949472 #>  [101] 0.0002468420 0.0002468420 0.0002285574 0.0003949472 0.0002468420 #>  [106] 0.0002468420 0.0002285574 0.0002468420 0.0002285574 0.0002285574 #>  [111] 0.0003116692 0.0003949472 0.0002468420 0.0002468420 0.0002285574 #>  [116] 0.0002468420 0.0002285574 0.0002285574 0.0003116692 0.0002468420 #>  [121] 0.0002285574 0.0002285574 0.0003116692 0.0002285574 0.0003116692 #>  [126] 0.0003116692 0.0006416719 0.0040916530 0.0009742031 0.0009742031 #>  [131] 0.0003949472 0.0009742031 0.0003949472 0.0003949472 0.0002468420 #>  [136] 0.0009742031 0.0003949472 0.0003949472 0.0002468420 0.0003949472 #>  [141] 0.0002468420 0.0002468420 0.0002285574 0.0009742031 0.0003949472 #>  [146] 0.0003949472 0.0002468420 0.0003949472 0.0002468420 0.0002468420 #>  [151] 0.0002285574 0.0003949472 0.0002468420 0.0002468420 0.0002285574 #>  [156] 0.0002468420 0.0002285574 0.0002285574 0.0003116692 0.0009742031 #>  [161] 0.0003949472 0.0003949472 0.0002468420 0.0003949472 0.0002468420 #>  [166] 0.0002468420 0.0002285574 0.0003949472 0.0002468420 0.0002468420 #>  [171] 0.0002285574 0.0002468420 0.0002285574 0.0002285574 0.0003116692 #>  [176] 0.0003949472 0.0002468420 0.0002468420 0.0002285574 0.0002468420 #>  [181] 0.0002285574 0.0002285574 0.0003116692 0.0002468420 0.0002285574 #>  [186] 0.0002285574 0.0003116692 0.0002285574 0.0003116692 0.0003116692 #>  [191] 0.0006416719 0.0009742031 0.0003949472 0.0003949472 0.0002468420 #>  [196] 0.0003949472 0.0002468420 0.0002468420 0.0002285574 0.0003949472 #>  [201] 0.0002468420 0.0002468420 0.0002285574 0.0002468420 0.0002285574 #>  [206] 0.0002285574 0.0003116692 0.0003949472 0.0002468420 0.0002468420 #>  [211] 0.0002285574 0.0002468420 0.0002285574 0.0002285574 0.0003116692 #>  [216] 0.0002468420 0.0002285574 0.0002285574 0.0003116692 0.0002285574 #>  [221] 0.0003116692 0.0003116692 0.0006416719 0.0003949472 0.0002468420 #>  [226] 0.0002468420 0.0002285574 0.0002468420 0.0002285574 0.0002285574 #>  [231] 0.0003116692 0.0002468420 0.0002285574 0.0002285574 0.0003116692 #>  [236] 0.0002285574 0.0003116692 0.0003116692 0.0006416719 0.0002468420 #>  [241] 0.0002285574 0.0002285574 0.0003116692 0.0002285574 0.0003116692 #>  [246] 0.0003116692 0.0006416719 0.0002285574 0.0003116692 0.0003116692 #>  [251] 0.0006416719 0.0003116692 0.0006416719 0.0006416719 0.0021389062 #>  [256] 0.0040916530 0.0009742031 0.0009742031 0.0003949472 0.0009742031 #>  [261] 0.0003949472 0.0003949472 0.0002468420 0.0009742031 0.0003949472 #>  [266] 0.0003949472 0.0002468420 0.0003949472 0.0002468420 0.0002468420 #>  [271] 0.0002285574 0.0009742031 0.0003949472 0.0003949472 0.0002468420 #>  [276] 0.0003949472 0.0002468420 0.0002468420 0.0002285574 0.0003949472 #>  [281] 0.0002468420 0.0002468420 0.0002285574 0.0002468420 0.0002285574 #>  [286] 0.0002285574 0.0003116692 0.0009742031 0.0003949472 0.0003949472 #>  [291] 0.0002468420 0.0003949472 0.0002468420 0.0002468420 0.0002285574 #>  [296] 0.0003949472 0.0002468420 0.0002468420 0.0002285574 0.0002468420 #>  [301] 0.0002285574 0.0002285574 0.0003116692 0.0003949472 0.0002468420 #>  [306] 0.0002468420 0.0002285574 0.0002468420 0.0002285574 0.0002285574 #>  [311] 0.0003116692 0.0002468420 0.0002285574 0.0002285574 0.0003116692 #>  [316] 0.0002285574 0.0003116692 0.0003116692 0.0006416719 0.0009742031 #>  [321] 0.0003949472 0.0003949472 0.0002468420 0.0003949472 0.0002468420 #>  [326] 0.0002468420 0.0002285574 0.0003949472 0.0002468420 0.0002468420 #>  [331] 0.0002285574 0.0002468420 0.0002285574 0.0002285574 0.0003116692 #>  [336] 0.0003949472 0.0002468420 0.0002468420 0.0002285574 0.0002468420 #>  [341] 0.0002285574 0.0002285574 0.0003116692 0.0002468420 0.0002285574 #>  [346] 0.0002285574 0.0003116692 0.0002285574 0.0003116692 0.0003116692 #>  [351] 0.0006416719 0.0003949472 0.0002468420 0.0002468420 0.0002285574 #>  [356] 0.0002468420 0.0002285574 0.0002285574 0.0003116692 0.0002468420 #>  [361] 0.0002285574 0.0002285574 0.0003116692 0.0002285574 0.0003116692 #>  [366] 0.0003116692 0.0006416719 0.0002468420 0.0002285574 0.0002285574 #>  [371] 0.0003116692 0.0002285574 0.0003116692 0.0003116692 0.0006416719 #>  [376] 0.0002285574 0.0003116692 0.0003116692 0.0006416719 0.0003116692 #>  [381] 0.0006416719 0.0006416719 0.0021389062 0.0009742031 0.0003949472 #>  [386] 0.0003949472 0.0002468420 0.0003949472 0.0002468420 0.0002468420 #>  [391] 0.0002285574 0.0003949472 0.0002468420 0.0002468420 0.0002285574 #>  [396] 0.0002468420 0.0002285574 0.0002285574 0.0003116692 0.0003949472 #>  [401] 0.0002468420 0.0002468420 0.0002285574 0.0002468420 0.0002285574 #>  [406] 0.0002285574 0.0003116692 0.0002468420 0.0002285574 0.0002285574 #>  [411] 0.0003116692 0.0002285574 0.0003116692 0.0003116692 0.0006416719 #>  [416] 0.0003949472 0.0002468420 0.0002468420 0.0002285574 0.0002468420 #>  [421] 0.0002285574 0.0002285574 0.0003116692 0.0002468420 0.0002285574 #>  [426] 0.0002285574 0.0003116692 0.0002285574 0.0003116692 0.0003116692 #>  [431] 0.0006416719 0.0002468420 0.0002285574 0.0002285574 0.0003116692 #>  [436] 0.0002285574 0.0003116692 0.0003116692 0.0006416719 0.0002285574 #>  [441] 0.0003116692 0.0003116692 0.0006416719 0.0003116692 0.0006416719 #>  [446] 0.0006416719 0.0021389062 0.0003949472 0.0002468420 0.0002468420 #>  [451] 0.0002285574 0.0002468420 0.0002285574 0.0002285574 0.0003116692 #>  [456] 0.0002468420 0.0002285574 0.0002285574 0.0003116692 0.0002285574 #>  [461] 0.0003116692 0.0003116692 0.0006416719 0.0002468420 0.0002285574 #>  [466] 0.0002285574 0.0003116692 0.0002285574 0.0003116692 0.0003116692 #>  [471] 0.0006416719 0.0002285574 0.0003116692 0.0003116692 0.0006416719 #>  [476] 0.0003116692 0.0006416719 0.0006416719 0.0021389062 0.0002468420 #>  [481] 0.0002285574 0.0002285574 0.0003116692 0.0002285574 0.0003116692 #>  [486] 0.0003116692 0.0006416719 0.0002285574 0.0003116692 0.0003116692 #>  [491] 0.0006416719 0.0003116692 0.0006416719 0.0006416719 0.0021389062 #>  [496] 0.0002285574 0.0003116692 0.0003116692 0.0006416719 0.0003116692 #>  [501] 0.0006416719 0.0006416719 0.0021389062 0.0003116692 0.0006416719 #>  [506] 0.0006416719 0.0021389062 0.0006416719 0.0021389062 0.0021389062 #>  [511] 0.0137501115 0.0040916530 0.0009742031 0.0009742031 0.0003949472 #>  [516] 0.0009742031 0.0003949472 0.0003949472 0.0002468420 0.0009742031 #>  [521] 0.0003949472 0.0003949472 0.0002468420 0.0003949472 0.0002468420 #>  [526] 0.0002468420 0.0002285574 0.0009742031 0.0003949472 0.0003949472 #>  [531] 0.0002468420 0.0003949472 0.0002468420 0.0002468420 0.0002285574 #>  [536] 0.0003949472 0.0002468420 0.0002468420 0.0002285574 0.0002468420 #>  [541] 0.0002285574 0.0002285574 0.0003116692 0.0009742031 0.0003949472 #>  [546] 0.0003949472 0.0002468420 0.0003949472 0.0002468420 0.0002468420 #>  [551] 0.0002285574 0.0003949472 0.0002468420 0.0002468420 0.0002285574 #>  [556] 0.0002468420 0.0002285574 0.0002285574 0.0003116692 0.0003949472 #>  [561] 0.0002468420 0.0002468420 0.0002285574 0.0002468420 0.0002285574 #>  [566] 0.0002285574 0.0003116692 0.0002468420 0.0002285574 0.0002285574 #>  [571] 0.0003116692 0.0002285574 0.0003116692 0.0003116692 0.0006416719 #>  [576] 0.0009742031 0.0003949472 0.0003949472 0.0002468420 0.0003949472 #>  [581] 0.0002468420 0.0002468420 0.0002285574 0.0003949472 0.0002468420 #>  [586] 0.0002468420 0.0002285574 0.0002468420 0.0002285574 0.0002285574 #>  [591] 0.0003116692 0.0003949472 0.0002468420 0.0002468420 0.0002285574 #>  [596] 0.0002468420 0.0002285574 0.0002285574 0.0003116692 0.0002468420 #>  [601] 0.0002285574 0.0002285574 0.0003116692 0.0002285574 0.0003116692 #>  [606] 0.0003116692 0.0006416719 0.0003949472 0.0002468420 0.0002468420 #>  [611] 0.0002285574 0.0002468420 0.0002285574 0.0002285574 0.0003116692 #>  [616] 0.0002468420 0.0002285574 0.0002285574 0.0003116692 0.0002285574 #>  [621] 0.0003116692 0.0003116692 0.0006416719 0.0002468420 0.0002285574 #>  [626] 0.0002285574 0.0003116692 0.0002285574 0.0003116692 0.0003116692 #>  [631] 0.0006416719 0.0002285574 0.0003116692 0.0003116692 0.0006416719 #>  [636] 0.0003116692 0.0006416719 0.0006416719 0.0021389062 0.0009742031 #>  [641] 0.0003949472 0.0003949472 0.0002468420 0.0003949472 0.0002468420 #>  [646] 0.0002468420 0.0002285574 0.0003949472 0.0002468420 0.0002468420 #>  [651] 0.0002285574 0.0002468420 0.0002285574 0.0002285574 0.0003116692 #>  [656] 0.0003949472 0.0002468420 0.0002468420 0.0002285574 0.0002468420 #>  [661] 0.0002285574 0.0002285574 0.0003116692 0.0002468420 0.0002285574 #>  [666] 0.0002285574 0.0003116692 0.0002285574 0.0003116692 0.0003116692 #>  [671] 0.0006416719 0.0003949472 0.0002468420 0.0002468420 0.0002285574 #>  [676] 0.0002468420 0.0002285574 0.0002285574 0.0003116692 0.0002468420 #>  [681] 0.0002285574 0.0002285574 0.0003116692 0.0002285574 0.0003116692 #>  [686] 0.0003116692 0.0006416719 0.0002468420 0.0002285574 0.0002285574 #>  [691] 0.0003116692 0.0002285574 0.0003116692 0.0003116692 0.0006416719 #>  [696] 0.0002285574 0.0003116692 0.0003116692 0.0006416719 0.0003116692 #>  [701] 0.0006416719 0.0006416719 0.0021389062 0.0003949472 0.0002468420 #>  [706] 0.0002468420 0.0002285574 0.0002468420 0.0002285574 0.0002285574 #>  [711] 0.0003116692 0.0002468420 0.0002285574 0.0002285574 0.0003116692 #>  [716] 0.0002285574 0.0003116692 0.0003116692 0.0006416719 0.0002468420 #>  [721] 0.0002285574 0.0002285574 0.0003116692 0.0002285574 0.0003116692 #>  [726] 0.0003116692 0.0006416719 0.0002285574 0.0003116692 0.0003116692 #>  [731] 0.0006416719 0.0003116692 0.0006416719 0.0006416719 0.0021389062 #>  [736] 0.0002468420 0.0002285574 0.0002285574 0.0003116692 0.0002285574 #>  [741] 0.0003116692 0.0003116692 0.0006416719 0.0002285574 0.0003116692 #>  [746] 0.0003116692 0.0006416719 0.0003116692 0.0006416719 0.0006416719 #>  [751] 0.0021389062 0.0002285574 0.0003116692 0.0003116692 0.0006416719 #>  [756] 0.0003116692 0.0006416719 0.0006416719 0.0021389062 0.0003116692 #>  [761] 0.0006416719 0.0006416719 0.0021389062 0.0006416719 0.0021389062 #>  [766] 0.0021389062 0.0137501115 0.0009742031 0.0003949472 0.0003949472 #>  [771] 0.0002468420 0.0003949472 0.0002468420 0.0002468420 0.0002285574 #>  [776] 0.0003949472 0.0002468420 0.0002468420 0.0002285574 0.0002468420 #>  [781] 0.0002285574 0.0002285574 0.0003116692 0.0003949472 0.0002468420 #>  [786] 0.0002468420 0.0002285574 0.0002468420 0.0002285574 0.0002285574 #>  [791] 0.0003116692 0.0002468420 0.0002285574 0.0002285574 0.0003116692 #>  [796] 0.0002285574 0.0003116692 0.0003116692 0.0006416719 0.0003949472 #>  [801] 0.0002468420 0.0002468420 0.0002285574 0.0002468420 0.0002285574 #>  [806] 0.0002285574 0.0003116692 0.0002468420 0.0002285574 0.0002285574 #>  [811] 0.0003116692 0.0002285574 0.0003116692 0.0003116692 0.0006416719 #>  [816] 0.0002468420 0.0002285574 0.0002285574 0.0003116692 0.0002285574 #>  [821] 0.0003116692 0.0003116692 0.0006416719 0.0002285574 0.0003116692 #>  [826] 0.0003116692 0.0006416719 0.0003116692 0.0006416719 0.0006416719 #>  [831] 0.0021389062 0.0003949472 0.0002468420 0.0002468420 0.0002285574 #>  [836] 0.0002468420 0.0002285574 0.0002285574 0.0003116692 0.0002468420 #>  [841] 0.0002285574 0.0002285574 0.0003116692 0.0002285574 0.0003116692 #>  [846] 0.0003116692 0.0006416719 0.0002468420 0.0002285574 0.0002285574 #>  [851] 0.0003116692 0.0002285574 0.0003116692 0.0003116692 0.0006416719 #>  [856] 0.0002285574 0.0003116692 0.0003116692 0.0006416719 0.0003116692 #>  [861] 0.0006416719 0.0006416719 0.0021389062 0.0002468420 0.0002285574 #>  [866] 0.0002285574 0.0003116692 0.0002285574 0.0003116692 0.0003116692 #>  [871] 0.0006416719 0.0002285574 0.0003116692 0.0003116692 0.0006416719 #>  [876] 0.0003116692 0.0006416719 0.0006416719 0.0021389062 0.0002285574 #>  [881] 0.0003116692 0.0003116692 0.0006416719 0.0003116692 0.0006416719 #>  [886] 0.0006416719 0.0021389062 0.0003116692 0.0006416719 0.0006416719 #>  [891] 0.0021389062 0.0006416719 0.0021389062 0.0021389062 0.0137501115 #>  [896] 0.0003949472 0.0002468420 0.0002468420 0.0002285574 0.0002468420 #>  [901] 0.0002285574 0.0002285574 0.0003116692 0.0002468420 0.0002285574 #>  [906] 0.0002285574 0.0003116692 0.0002285574 0.0003116692 0.0003116692 #>  [911] 0.0006416719 0.0002468420 0.0002285574 0.0002285574 0.0003116692 #>  [916] 0.0002285574 0.0003116692 0.0003116692 0.0006416719 0.0002285574 #>  [921] 0.0003116692 0.0003116692 0.0006416719 0.0003116692 0.0006416719 #>  [926] 0.0006416719 0.0021389062 0.0002468420 0.0002285574 0.0002285574 #>  [931] 0.0003116692 0.0002285574 0.0003116692 0.0003116692 0.0006416719 #>  [936] 0.0002285574 0.0003116692 0.0003116692 0.0006416719 0.0003116692 #>  [941] 0.0006416719 0.0006416719 0.0021389062 0.0002285574 0.0003116692 #>  [946] 0.0003116692 0.0006416719 0.0003116692 0.0006416719 0.0006416719 #>  [951] 0.0021389062 0.0003116692 0.0006416719 0.0006416719 0.0021389062 #>  [956] 0.0006416719 0.0021389062 0.0021389062 0.0137501115 0.0002468420 #>  [961] 0.0002285574 0.0002285574 0.0003116692 0.0002285574 0.0003116692 #>  [966] 0.0003116692 0.0006416719 0.0002285574 0.0003116692 0.0003116692 #>  [971] 0.0006416719 0.0003116692 0.0006416719 0.0006416719 0.0021389062 #>  [976] 0.0002285574 0.0003116692 0.0003116692 0.0006416719 0.0003116692 #>  [981] 0.0006416719 0.0006416719 0.0021389062 0.0003116692 0.0006416719 #>  [986] 0.0006416719 0.0021389062 0.0006416719 0.0021389062 0.0021389062 #>  [991] 0.0137501115 0.0002285574 0.0003116692 0.0003116692 0.0006416719 #>  [996] 0.0003116692 0.0006416719 0.0006416719 0.0021389062 0.0003116692 #> [1001] 0.0006416719 0.0006416719 0.0021389062 0.0006416719 0.0021389062 #> [1006] 0.0021389062 0.0137501115 0.0003116692 0.0006416719 0.0006416719 #> [1011] 0.0021389062 0.0006416719 0.0021389062 0.0021389062 0.0137501115 #> [1016] 0.0006416719 0.0021389062 0.0021389062 0.0137501115 0.0021389062 #> [1021] 0.0137501115 0.0137501115 0.3437527882  ex_intensities_gamma(10L, a = 0.3) #>  [1] 1.0212950 0.5233226 0.3591469 0.2789589 0.2330767 0.2054108 0.1900017 #>  [8] 0.1862096 0.2023288 0.3363659  intensities_gamma(10L, a = 0.3) #>    [1] 0.1021294951 0.1021294951 0.0116293903 0.1021294951 0.0116293903 #>    [6] 0.0116293903 0.0029928910 0.1021294951 0.0116293903 0.0116293903 #>   [11] 0.0029928910 0.0116293903 0.0029928910 0.0029928910 0.0013283758 #>   [16] 0.1021294951 0.0116293903 0.0116293903 0.0029928910 0.0116293903 #>   [21] 0.0029928910 0.0029928910 0.0013283758 0.0116293903 0.0029928910 #>   [26] 0.0029928910 0.0013283758 0.0029928910 0.0013283758 0.0013283758 #>   [31] 0.0009249074 0.1021294951 0.0116293903 0.0116293903 0.0029928910 #>   [36] 0.0116293903 0.0029928910 0.0029928910 0.0013283758 0.0116293903 #>   [41] 0.0029928910 0.0029928910 0.0013283758 0.0029928910 0.0013283758 #>   [46] 0.0013283758 0.0009249074 0.0116293903 0.0029928910 0.0029928910 #>   [51] 0.0013283758 0.0029928910 0.0013283758 0.0013283758 0.0009249074 #>   [56] 0.0029928910 0.0013283758 0.0013283758 0.0009249074 0.0013283758 #>   [61] 0.0009249074 0.0009249074 0.0009781465 0.1021294951 0.0116293903 #>   [66] 0.0116293903 0.0029928910 0.0116293903 0.0029928910 0.0029928910 #>   [71] 0.0013283758 0.0116293903 0.0029928910 0.0029928910 0.0013283758 #>   [76] 0.0029928910 0.0013283758 0.0013283758 0.0009249074 0.0116293903 #>   [81] 0.0029928910 0.0029928910 0.0013283758 0.0029928910 0.0013283758 #>   [86] 0.0013283758 0.0009249074 0.0029928910 0.0013283758 0.0013283758 #>   [91] 0.0009249074 0.0013283758 0.0009249074 0.0009249074 0.0009781465 #>   [96] 0.0116293903 0.0029928910 0.0029928910 0.0013283758 0.0029928910 #>  [101] 0.0013283758 0.0013283758 0.0009249074 0.0029928910 0.0013283758 #>  [106] 0.0013283758 0.0009249074 0.0013283758 0.0009249074 0.0009249074 #>  [111] 0.0009781465 0.0029928910 0.0013283758 0.0013283758 0.0009249074 #>  [116] 0.0013283758 0.0009249074 0.0009249074 0.0009781465 0.0013283758 #>  [121] 0.0009249074 0.0009249074 0.0009781465 0.0009249074 0.0009781465 #>  [126] 0.0009781465 0.0015833472 0.1021294951 0.0116293903 0.0116293903 #>  [131] 0.0029928910 0.0116293903 0.0029928910 0.0029928910 0.0013283758 #>  [136] 0.0116293903 0.0029928910 0.0029928910 0.0013283758 0.0029928910 #>  [141] 0.0013283758 0.0013283758 0.0009249074 0.0116293903 0.0029928910 #>  [146] 0.0029928910 0.0013283758 0.0029928910 0.0013283758 0.0013283758 #>  [151] 0.0009249074 0.0029928910 0.0013283758 0.0013283758 0.0009249074 #>  [156] 0.0013283758 0.0009249074 0.0009249074 0.0009781465 0.0116293903 #>  [161] 0.0029928910 0.0029928910 0.0013283758 0.0029928910 0.0013283758 #>  [166] 0.0013283758 0.0009249074 0.0029928910 0.0013283758 0.0013283758 #>  [171] 0.0009249074 0.0013283758 0.0009249074 0.0009249074 0.0009781465 #>  [176] 0.0029928910 0.0013283758 0.0013283758 0.0009249074 0.0013283758 #>  [181] 0.0009249074 0.0009249074 0.0009781465 0.0013283758 0.0009249074 #>  [186] 0.0009249074 0.0009781465 0.0009249074 0.0009781465 0.0009781465 #>  [191] 0.0015833472 0.0116293903 0.0029928910 0.0029928910 0.0013283758 #>  [196] 0.0029928910 0.0013283758 0.0013283758 0.0009249074 0.0029928910 #>  [201] 0.0013283758 0.0013283758 0.0009249074 0.0013283758 0.0009249074 #>  [206] 0.0009249074 0.0009781465 0.0029928910 0.0013283758 0.0013283758 #>  [211] 0.0009249074 0.0013283758 0.0009249074 0.0009249074 0.0009781465 #>  [216] 0.0013283758 0.0009249074 0.0009249074 0.0009781465 0.0009249074 #>  [221] 0.0009781465 0.0009781465 0.0015833472 0.0029928910 0.0013283758 #>  [226] 0.0013283758 0.0009249074 0.0013283758 0.0009249074 0.0009249074 #>  [231] 0.0009781465 0.0013283758 0.0009249074 0.0009249074 0.0009781465 #>  [236] 0.0009249074 0.0009781465 0.0009781465 0.0015833472 0.0013283758 #>  [241] 0.0009249074 0.0009249074 0.0009781465 0.0009249074 0.0009781465 #>  [246] 0.0009781465 0.0015833472 0.0009249074 0.0009781465 0.0009781465 #>  [251] 0.0015833472 0.0009781465 0.0015833472 0.0015833472 0.0041379909 #>  [256] 0.1021294951 0.0116293903 0.0116293903 0.0029928910 0.0116293903 #>  [261] 0.0029928910 0.0029928910 0.0013283758 0.0116293903 0.0029928910 #>  [266] 0.0029928910 0.0013283758 0.0029928910 0.0013283758 0.0013283758 #>  [271] 0.0009249074 0.0116293903 0.0029928910 0.0029928910 0.0013283758 #>  [276] 0.0029928910 0.0013283758 0.0013283758 0.0009249074 0.0029928910 #>  [281] 0.0013283758 0.0013283758 0.0009249074 0.0013283758 0.0009249074 #>  [286] 0.0009249074 0.0009781465 0.0116293903 0.0029928910 0.0029928910 #>  [291] 0.0013283758 0.0029928910 0.0013283758 0.0013283758 0.0009249074 #>  [296] 0.0029928910 0.0013283758 0.0013283758 0.0009249074 0.0013283758 #>  [301] 0.0009249074 0.0009249074 0.0009781465 0.0029928910 0.0013283758 #>  [306] 0.0013283758 0.0009249074 0.0013283758 0.0009249074 0.0009249074 #>  [311] 0.0009781465 0.0013283758 0.0009249074 0.0009249074 0.0009781465 #>  [316] 0.0009249074 0.0009781465 0.0009781465 0.0015833472 0.0116293903 #>  [321] 0.0029928910 0.0029928910 0.0013283758 0.0029928910 0.0013283758 #>  [326] 0.0013283758 0.0009249074 0.0029928910 0.0013283758 0.0013283758 #>  [331] 0.0009249074 0.0013283758 0.0009249074 0.0009249074 0.0009781465 #>  [336] 0.0029928910 0.0013283758 0.0013283758 0.0009249074 0.0013283758 #>  [341] 0.0009249074 0.0009249074 0.0009781465 0.0013283758 0.0009249074 #>  [346] 0.0009249074 0.0009781465 0.0009249074 0.0009781465 0.0009781465 #>  [351] 0.0015833472 0.0029928910 0.0013283758 0.0013283758 0.0009249074 #>  [356] 0.0013283758 0.0009249074 0.0009249074 0.0009781465 0.0013283758 #>  [361] 0.0009249074 0.0009249074 0.0009781465 0.0009249074 0.0009781465 #>  [366] 0.0009781465 0.0015833472 0.0013283758 0.0009249074 0.0009249074 #>  [371] 0.0009781465 0.0009249074 0.0009781465 0.0009781465 0.0015833472 #>  [376] 0.0009249074 0.0009781465 0.0009781465 0.0015833472 0.0009781465 #>  [381] 0.0015833472 0.0015833472 0.0041379909 0.0116293903 0.0029928910 #>  [386] 0.0029928910 0.0013283758 0.0029928910 0.0013283758 0.0013283758 #>  [391] 0.0009249074 0.0029928910 0.0013283758 0.0013283758 0.0009249074 #>  [396] 0.0013283758 0.0009249074 0.0009249074 0.0009781465 0.0029928910 #>  [401] 0.0013283758 0.0013283758 0.0009249074 0.0013283758 0.0009249074 #>  [406] 0.0009249074 0.0009781465 0.0013283758 0.0009249074 0.0009249074 #>  [411] 0.0009781465 0.0009249074 0.0009781465 0.0009781465 0.0015833472 #>  [416] 0.0029928910 0.0013283758 0.0013283758 0.0009249074 0.0013283758 #>  [421] 0.0009249074 0.0009249074 0.0009781465 0.0013283758 0.0009249074 #>  [426] 0.0009249074 0.0009781465 0.0009249074 0.0009781465 0.0009781465 #>  [431] 0.0015833472 0.0013283758 0.0009249074 0.0009249074 0.0009781465 #>  [436] 0.0009249074 0.0009781465 0.0009781465 0.0015833472 0.0009249074 #>  [441] 0.0009781465 0.0009781465 0.0015833472 0.0009781465 0.0015833472 #>  [446] 0.0015833472 0.0041379909 0.0029928910 0.0013283758 0.0013283758 #>  [451] 0.0009249074 0.0013283758 0.0009249074 0.0009249074 0.0009781465 #>  [456] 0.0013283758 0.0009249074 0.0009249074 0.0009781465 0.0009249074 #>  [461] 0.0009781465 0.0009781465 0.0015833472 0.0013283758 0.0009249074 #>  [466] 0.0009249074 0.0009781465 0.0009249074 0.0009781465 0.0009781465 #>  [471] 0.0015833472 0.0009249074 0.0009781465 0.0009781465 0.0015833472 #>  [476] 0.0009781465 0.0015833472 0.0015833472 0.0041379909 0.0013283758 #>  [481] 0.0009249074 0.0009249074 0.0009781465 0.0009249074 0.0009781465 #>  [486] 0.0009781465 0.0015833472 0.0009249074 0.0009781465 0.0009781465 #>  [491] 0.0015833472 0.0009781465 0.0015833472 0.0015833472 0.0041379909 #>  [496] 0.0009249074 0.0009781465 0.0009781465 0.0015833472 0.0009781465 #>  [501] 0.0015833472 0.0015833472 0.0041379909 0.0009781465 0.0015833472 #>  [506] 0.0015833472 0.0041379909 0.0015833472 0.0041379909 0.0041379909 #>  [511] 0.0202328832 0.1021294951 0.0116293903 0.0116293903 0.0029928910 #>  [516] 0.0116293903 0.0029928910 0.0029928910 0.0013283758 0.0116293903 #>  [521] 0.0029928910 0.0029928910 0.0013283758 0.0029928910 0.0013283758 #>  [526] 0.0013283758 0.0009249074 0.0116293903 0.0029928910 0.0029928910 #>  [531] 0.0013283758 0.0029928910 0.0013283758 0.0013283758 0.0009249074 #>  [536] 0.0029928910 0.0013283758 0.0013283758 0.0009249074 0.0013283758 #>  [541] 0.0009249074 0.0009249074 0.0009781465 0.0116293903 0.0029928910 #>  [546] 0.0029928910 0.0013283758 0.0029928910 0.0013283758 0.0013283758 #>  [551] 0.0009249074 0.0029928910 0.0013283758 0.0013283758 0.0009249074 #>  [556] 0.0013283758 0.0009249074 0.0009249074 0.0009781465 0.0029928910 #>  [561] 0.0013283758 0.0013283758 0.0009249074 0.0013283758 0.0009249074 #>  [566] 0.0009249074 0.0009781465 0.0013283758 0.0009249074 0.0009249074 #>  [571] 0.0009781465 0.0009249074 0.0009781465 0.0009781465 0.0015833472 #>  [576] 0.0116293903 0.0029928910 0.0029928910 0.0013283758 0.0029928910 #>  [581] 0.0013283758 0.0013283758 0.0009249074 0.0029928910 0.0013283758 #>  [586] 0.0013283758 0.0009249074 0.0013283758 0.0009249074 0.0009249074 #>  [591] 0.0009781465 0.0029928910 0.0013283758 0.0013283758 0.0009249074 #>  [596] 0.0013283758 0.0009249074 0.0009249074 0.0009781465 0.0013283758 #>  [601] 0.0009249074 0.0009249074 0.0009781465 0.0009249074 0.0009781465 #>  [606] 0.0009781465 0.0015833472 0.0029928910 0.0013283758 0.0013283758 #>  [611] 0.0009249074 0.0013283758 0.0009249074 0.0009249074 0.0009781465 #>  [616] 0.0013283758 0.0009249074 0.0009249074 0.0009781465 0.0009249074 #>  [621] 0.0009781465 0.0009781465 0.0015833472 0.0013283758 0.0009249074 #>  [626] 0.0009249074 0.0009781465 0.0009249074 0.0009781465 0.0009781465 #>  [631] 0.0015833472 0.0009249074 0.0009781465 0.0009781465 0.0015833472 #>  [636] 0.0009781465 0.0015833472 0.0015833472 0.0041379909 0.0116293903 #>  [641] 0.0029928910 0.0029928910 0.0013283758 0.0029928910 0.0013283758 #>  [646] 0.0013283758 0.0009249074 0.0029928910 0.0013283758 0.0013283758 #>  [651] 0.0009249074 0.0013283758 0.0009249074 0.0009249074 0.0009781465 #>  [656] 0.0029928910 0.0013283758 0.0013283758 0.0009249074 0.0013283758 #>  [661] 0.0009249074 0.0009249074 0.0009781465 0.0013283758 0.0009249074 #>  [666] 0.0009249074 0.0009781465 0.0009249074 0.0009781465 0.0009781465 #>  [671] 0.0015833472 0.0029928910 0.0013283758 0.0013283758 0.0009249074 #>  [676] 0.0013283758 0.0009249074 0.0009249074 0.0009781465 0.0013283758 #>  [681] 0.0009249074 0.0009249074 0.0009781465 0.0009249074 0.0009781465 #>  [686] 0.0009781465 0.0015833472 0.0013283758 0.0009249074 0.0009249074 #>  [691] 0.0009781465 0.0009249074 0.0009781465 0.0009781465 0.0015833472 #>  [696] 0.0009249074 0.0009781465 0.0009781465 0.0015833472 0.0009781465 #>  [701] 0.0015833472 0.0015833472 0.0041379909 0.0029928910 0.0013283758 #>  [706] 0.0013283758 0.0009249074 0.0013283758 0.0009249074 0.0009249074 #>  [711] 0.0009781465 0.0013283758 0.0009249074 0.0009249074 0.0009781465 #>  [716] 0.0009249074 0.0009781465 0.0009781465 0.0015833472 0.0013283758 #>  [721] 0.0009249074 0.0009249074 0.0009781465 0.0009249074 0.0009781465 #>  [726] 0.0009781465 0.0015833472 0.0009249074 0.0009781465 0.0009781465 #>  [731] 0.0015833472 0.0009781465 0.0015833472 0.0015833472 0.0041379909 #>  [736] 0.0013283758 0.0009249074 0.0009249074 0.0009781465 0.0009249074 #>  [741] 0.0009781465 0.0009781465 0.0015833472 0.0009249074 0.0009781465 #>  [746] 0.0009781465 0.0015833472 0.0009781465 0.0015833472 0.0015833472 #>  [751] 0.0041379909 0.0009249074 0.0009781465 0.0009781465 0.0015833472 #>  [756] 0.0009781465 0.0015833472 0.0015833472 0.0041379909 0.0009781465 #>  [761] 0.0015833472 0.0015833472 0.0041379909 0.0015833472 0.0041379909 #>  [766] 0.0041379909 0.0202328832 0.0116293903 0.0029928910 0.0029928910 #>  [771] 0.0013283758 0.0029928910 0.0013283758 0.0013283758 0.0009249074 #>  [776] 0.0029928910 0.0013283758 0.0013283758 0.0009249074 0.0013283758 #>  [781] 0.0009249074 0.0009249074 0.0009781465 0.0029928910 0.0013283758 #>  [786] 0.0013283758 0.0009249074 0.0013283758 0.0009249074 0.0009249074 #>  [791] 0.0009781465 0.0013283758 0.0009249074 0.0009249074 0.0009781465 #>  [796] 0.0009249074 0.0009781465 0.0009781465 0.0015833472 0.0029928910 #>  [801] 0.0013283758 0.0013283758 0.0009249074 0.0013283758 0.0009249074 #>  [806] 0.0009249074 0.0009781465 0.0013283758 0.0009249074 0.0009249074 #>  [811] 0.0009781465 0.0009249074 0.0009781465 0.0009781465 0.0015833472 #>  [816] 0.0013283758 0.0009249074 0.0009249074 0.0009781465 0.0009249074 #>  [821] 0.0009781465 0.0009781465 0.0015833472 0.0009249074 0.0009781465 #>  [826] 0.0009781465 0.0015833472 0.0009781465 0.0015833472 0.0015833472 #>  [831] 0.0041379909 0.0029928910 0.0013283758 0.0013283758 0.0009249074 #>  [836] 0.0013283758 0.0009249074 0.0009249074 0.0009781465 0.0013283758 #>  [841] 0.0009249074 0.0009249074 0.0009781465 0.0009249074 0.0009781465 #>  [846] 0.0009781465 0.0015833472 0.0013283758 0.0009249074 0.0009249074 #>  [851] 0.0009781465 0.0009249074 0.0009781465 0.0009781465 0.0015833472 #>  [856] 0.0009249074 0.0009781465 0.0009781465 0.0015833472 0.0009781465 #>  [861] 0.0015833472 0.0015833472 0.0041379909 0.0013283758 0.0009249074 #>  [866] 0.0009249074 0.0009781465 0.0009249074 0.0009781465 0.0009781465 #>  [871] 0.0015833472 0.0009249074 0.0009781465 0.0009781465 0.0015833472 #>  [876] 0.0009781465 0.0015833472 0.0015833472 0.0041379909 0.0009249074 #>  [881] 0.0009781465 0.0009781465 0.0015833472 0.0009781465 0.0015833472 #>  [886] 0.0015833472 0.0041379909 0.0009781465 0.0015833472 0.0015833472 #>  [891] 0.0041379909 0.0015833472 0.0041379909 0.0041379909 0.0202328832 #>  [896] 0.0029928910 0.0013283758 0.0013283758 0.0009249074 0.0013283758 #>  [901] 0.0009249074 0.0009249074 0.0009781465 0.0013283758 0.0009249074 #>  [906] 0.0009249074 0.0009781465 0.0009249074 0.0009781465 0.0009781465 #>  [911] 0.0015833472 0.0013283758 0.0009249074 0.0009249074 0.0009781465 #>  [916] 0.0009249074 0.0009781465 0.0009781465 0.0015833472 0.0009249074 #>  [921] 0.0009781465 0.0009781465 0.0015833472 0.0009781465 0.0015833472 #>  [926] 0.0015833472 0.0041379909 0.0013283758 0.0009249074 0.0009249074 #>  [931] 0.0009781465 0.0009249074 0.0009781465 0.0009781465 0.0015833472 #>  [936] 0.0009249074 0.0009781465 0.0009781465 0.0015833472 0.0009781465 #>  [941] 0.0015833472 0.0015833472 0.0041379909 0.0009249074 0.0009781465 #>  [946] 0.0009781465 0.0015833472 0.0009781465 0.0015833472 0.0015833472 #>  [951] 0.0041379909 0.0009781465 0.0015833472 0.0015833472 0.0041379909 #>  [956] 0.0015833472 0.0041379909 0.0041379909 0.0202328832 0.0013283758 #>  [961] 0.0009249074 0.0009249074 0.0009781465 0.0009249074 0.0009781465 #>  [966] 0.0009781465 0.0015833472 0.0009249074 0.0009781465 0.0009781465 #>  [971] 0.0015833472 0.0009781465 0.0015833472 0.0015833472 0.0041379909 #>  [976] 0.0009249074 0.0009781465 0.0009781465 0.0015833472 0.0009781465 #>  [981] 0.0015833472 0.0015833472 0.0041379909 0.0009781465 0.0015833472 #>  [986] 0.0015833472 0.0041379909 0.0015833472 0.0041379909 0.0041379909 #>  [991] 0.0202328832 0.0009249074 0.0009781465 0.0009781465 0.0015833472 #>  [996] 0.0009781465 0.0015833472 0.0015833472 0.0041379909 0.0009781465 #> [1001] 0.0015833472 0.0015833472 0.0041379909 0.0015833472 0.0041379909 #> [1006] 0.0041379909 0.0202328832 0.0009781465 0.0015833472 0.0015833472 #> [1011] 0.0041379909 0.0015833472 0.0041379909 0.0041379909 0.0202328832 #> [1016] 0.0015833472 0.0041379909 0.0041379909 0.0202328832 0.0041379909 #> [1021] 0.0202328832 0.0202328832 0.3363658526  ex_intensities_pareto(10L, alpha = 0.4, x0 = 5e-4) #>  [1] 0.070489748 0.022960901 0.012784245 0.008751640 0.006719924 0.005598180 #>  [7] 0.005017498 0.004911982 0.005676444 0.032629747  intensities_pareto(10L, alpha = 0.4, x0 = 5e-4) #>    [1] 7.048975e-03 7.048975e-03 5.102422e-04 7.048975e-03 5.102422e-04 #>    [6] 5.102422e-04 1.065354e-04 7.048975e-03 5.102422e-04 5.102422e-04 #>   [11] 1.065354e-04 5.102422e-04 1.065354e-04 1.065354e-04 4.167448e-05 #>   [16] 7.048975e-03 5.102422e-04 5.102422e-04 1.065354e-04 5.102422e-04 #>   [21] 1.065354e-04 1.065354e-04 4.167448e-05 5.102422e-04 1.065354e-04 #>   [26] 1.065354e-04 4.167448e-05 1.065354e-04 4.167448e-05 4.167448e-05 #>   [31] 2.666636e-05 7.048975e-03 5.102422e-04 5.102422e-04 1.065354e-04 #>   [36] 5.102422e-04 1.065354e-04 1.065354e-04 4.167448e-05 5.102422e-04 #>   [41] 1.065354e-04 1.065354e-04 4.167448e-05 1.065354e-04 4.167448e-05 #>   [46] 4.167448e-05 2.666636e-05 5.102422e-04 1.065354e-04 1.065354e-04 #>   [51] 4.167448e-05 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 #>   [56] 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 #>   [61] 2.666636e-05 2.666636e-05 2.665800e-05 7.048975e-03 5.102422e-04 #>   [66] 5.102422e-04 1.065354e-04 5.102422e-04 1.065354e-04 1.065354e-04 #>   [71] 4.167448e-05 5.102422e-04 1.065354e-04 1.065354e-04 4.167448e-05 #>   [76] 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 5.102422e-04 #>   [81] 1.065354e-04 1.065354e-04 4.167448e-05 1.065354e-04 4.167448e-05 #>   [86] 4.167448e-05 2.666636e-05 1.065354e-04 4.167448e-05 4.167448e-05 #>   [91] 2.666636e-05 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 #>   [96] 5.102422e-04 1.065354e-04 1.065354e-04 4.167448e-05 1.065354e-04 #>  [101] 4.167448e-05 4.167448e-05 2.666636e-05 1.065354e-04 4.167448e-05 #>  [106] 4.167448e-05 2.666636e-05 4.167448e-05 2.666636e-05 2.666636e-05 #>  [111] 2.665800e-05 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 #>  [116] 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 4.167448e-05 #>  [121] 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 #>  [126] 2.665800e-05 4.181248e-05 7.048975e-03 5.102422e-04 5.102422e-04 #>  [131] 1.065354e-04 5.102422e-04 1.065354e-04 1.065354e-04 4.167448e-05 #>  [136] 5.102422e-04 1.065354e-04 1.065354e-04 4.167448e-05 1.065354e-04 #>  [141] 4.167448e-05 4.167448e-05 2.666636e-05 5.102422e-04 1.065354e-04 #>  [146] 1.065354e-04 4.167448e-05 1.065354e-04 4.167448e-05 4.167448e-05 #>  [151] 2.666636e-05 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 #>  [156] 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 5.102422e-04 #>  [161] 1.065354e-04 1.065354e-04 4.167448e-05 1.065354e-04 4.167448e-05 #>  [166] 4.167448e-05 2.666636e-05 1.065354e-04 4.167448e-05 4.167448e-05 #>  [171] 2.666636e-05 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 #>  [176] 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 #>  [181] 2.666636e-05 2.666636e-05 2.665800e-05 4.167448e-05 2.666636e-05 #>  [186] 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 #>  [191] 4.181248e-05 5.102422e-04 1.065354e-04 1.065354e-04 4.167448e-05 #>  [196] 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 1.065354e-04 #>  [201] 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 2.666636e-05 #>  [206] 2.666636e-05 2.665800e-05 1.065354e-04 4.167448e-05 4.167448e-05 #>  [211] 2.666636e-05 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 #>  [216] 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 #>  [221] 2.665800e-05 2.665800e-05 4.181248e-05 1.065354e-04 4.167448e-05 #>  [226] 4.167448e-05 2.666636e-05 4.167448e-05 2.666636e-05 2.666636e-05 #>  [231] 2.665800e-05 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 #>  [236] 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 4.167448e-05 #>  [241] 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 #>  [246] 2.665800e-05 4.181248e-05 2.666636e-05 2.665800e-05 2.665800e-05 #>  [251] 4.181248e-05 2.665800e-05 4.181248e-05 4.181248e-05 1.091551e-04 #>  [256] 7.048975e-03 5.102422e-04 5.102422e-04 1.065354e-04 5.102422e-04 #>  [261] 1.065354e-04 1.065354e-04 4.167448e-05 5.102422e-04 1.065354e-04 #>  [266] 1.065354e-04 4.167448e-05 1.065354e-04 4.167448e-05 4.167448e-05 #>  [271] 2.666636e-05 5.102422e-04 1.065354e-04 1.065354e-04 4.167448e-05 #>  [276] 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 1.065354e-04 #>  [281] 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 2.666636e-05 #>  [286] 2.666636e-05 2.665800e-05 5.102422e-04 1.065354e-04 1.065354e-04 #>  [291] 4.167448e-05 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 #>  [296] 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 #>  [301] 2.666636e-05 2.666636e-05 2.665800e-05 1.065354e-04 4.167448e-05 #>  [306] 4.167448e-05 2.666636e-05 4.167448e-05 2.666636e-05 2.666636e-05 #>  [311] 2.665800e-05 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 #>  [316] 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 5.102422e-04 #>  [321] 1.065354e-04 1.065354e-04 4.167448e-05 1.065354e-04 4.167448e-05 #>  [326] 4.167448e-05 2.666636e-05 1.065354e-04 4.167448e-05 4.167448e-05 #>  [331] 2.666636e-05 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 #>  [336] 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 #>  [341] 2.666636e-05 2.666636e-05 2.665800e-05 4.167448e-05 2.666636e-05 #>  [346] 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 #>  [351] 4.181248e-05 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 #>  [356] 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 4.167448e-05 #>  [361] 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 #>  [366] 2.665800e-05 4.181248e-05 4.167448e-05 2.666636e-05 2.666636e-05 #>  [371] 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 #>  [376] 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 2.665800e-05 #>  [381] 4.181248e-05 4.181248e-05 1.091551e-04 5.102422e-04 1.065354e-04 #>  [386] 1.065354e-04 4.167448e-05 1.065354e-04 4.167448e-05 4.167448e-05 #>  [391] 2.666636e-05 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 #>  [396] 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 1.065354e-04 #>  [401] 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 2.666636e-05 #>  [406] 2.666636e-05 2.665800e-05 4.167448e-05 2.666636e-05 2.666636e-05 #>  [411] 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 #>  [416] 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 #>  [421] 2.666636e-05 2.666636e-05 2.665800e-05 4.167448e-05 2.666636e-05 #>  [426] 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 #>  [431] 4.181248e-05 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 #>  [436] 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 2.666636e-05 #>  [441] 2.665800e-05 2.665800e-05 4.181248e-05 2.665800e-05 4.181248e-05 #>  [446] 4.181248e-05 1.091551e-04 1.065354e-04 4.167448e-05 4.167448e-05 #>  [451] 2.666636e-05 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 #>  [456] 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 #>  [461] 2.665800e-05 2.665800e-05 4.181248e-05 4.167448e-05 2.666636e-05 #>  [466] 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 #>  [471] 4.181248e-05 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 #>  [476] 2.665800e-05 4.181248e-05 4.181248e-05 1.091551e-04 4.167448e-05 #>  [481] 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 #>  [486] 2.665800e-05 4.181248e-05 2.666636e-05 2.665800e-05 2.665800e-05 #>  [491] 4.181248e-05 2.665800e-05 4.181248e-05 4.181248e-05 1.091551e-04 #>  [496] 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 2.665800e-05 #>  [501] 4.181248e-05 4.181248e-05 1.091551e-04 2.665800e-05 4.181248e-05 #>  [506] 4.181248e-05 1.091551e-04 4.181248e-05 1.091551e-04 1.091551e-04 #>  [511] 5.676444e-04 7.048975e-03 5.102422e-04 5.102422e-04 1.065354e-04 #>  [516] 5.102422e-04 1.065354e-04 1.065354e-04 4.167448e-05 5.102422e-04 #>  [521] 1.065354e-04 1.065354e-04 4.167448e-05 1.065354e-04 4.167448e-05 #>  [526] 4.167448e-05 2.666636e-05 5.102422e-04 1.065354e-04 1.065354e-04 #>  [531] 4.167448e-05 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 #>  [536] 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 #>  [541] 2.666636e-05 2.666636e-05 2.665800e-05 5.102422e-04 1.065354e-04 #>  [546] 1.065354e-04 4.167448e-05 1.065354e-04 4.167448e-05 4.167448e-05 #>  [551] 2.666636e-05 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 #>  [556] 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 1.065354e-04 #>  [561] 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 2.666636e-05 #>  [566] 2.666636e-05 2.665800e-05 4.167448e-05 2.666636e-05 2.666636e-05 #>  [571] 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 #>  [576] 5.102422e-04 1.065354e-04 1.065354e-04 4.167448e-05 1.065354e-04 #>  [581] 4.167448e-05 4.167448e-05 2.666636e-05 1.065354e-04 4.167448e-05 #>  [586] 4.167448e-05 2.666636e-05 4.167448e-05 2.666636e-05 2.666636e-05 #>  [591] 2.665800e-05 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 #>  [596] 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 4.167448e-05 #>  [601] 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 #>  [606] 2.665800e-05 4.181248e-05 1.065354e-04 4.167448e-05 4.167448e-05 #>  [611] 2.666636e-05 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 #>  [616] 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 #>  [621] 2.665800e-05 2.665800e-05 4.181248e-05 4.167448e-05 2.666636e-05 #>  [626] 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 #>  [631] 4.181248e-05 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 #>  [636] 2.665800e-05 4.181248e-05 4.181248e-05 1.091551e-04 5.102422e-04 #>  [641] 1.065354e-04 1.065354e-04 4.167448e-05 1.065354e-04 4.167448e-05 #>  [646] 4.167448e-05 2.666636e-05 1.065354e-04 4.167448e-05 4.167448e-05 #>  [651] 2.666636e-05 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 #>  [656] 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 #>  [661] 2.666636e-05 2.666636e-05 2.665800e-05 4.167448e-05 2.666636e-05 #>  [666] 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 #>  [671] 4.181248e-05 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 #>  [676] 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 4.167448e-05 #>  [681] 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 #>  [686] 2.665800e-05 4.181248e-05 4.167448e-05 2.666636e-05 2.666636e-05 #>  [691] 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 #>  [696] 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 2.665800e-05 #>  [701] 4.181248e-05 4.181248e-05 1.091551e-04 1.065354e-04 4.167448e-05 #>  [706] 4.167448e-05 2.666636e-05 4.167448e-05 2.666636e-05 2.666636e-05 #>  [711] 2.665800e-05 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 #>  [716] 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 4.167448e-05 #>  [721] 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 #>  [726] 2.665800e-05 4.181248e-05 2.666636e-05 2.665800e-05 2.665800e-05 #>  [731] 4.181248e-05 2.665800e-05 4.181248e-05 4.181248e-05 1.091551e-04 #>  [736] 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 #>  [741] 2.665800e-05 2.665800e-05 4.181248e-05 2.666636e-05 2.665800e-05 #>  [746] 2.665800e-05 4.181248e-05 2.665800e-05 4.181248e-05 4.181248e-05 #>  [751] 1.091551e-04 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 #>  [756] 2.665800e-05 4.181248e-05 4.181248e-05 1.091551e-04 2.665800e-05 #>  [761] 4.181248e-05 4.181248e-05 1.091551e-04 4.181248e-05 1.091551e-04 #>  [766] 1.091551e-04 5.676444e-04 5.102422e-04 1.065354e-04 1.065354e-04 #>  [771] 4.167448e-05 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 #>  [776] 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 #>  [781] 2.666636e-05 2.666636e-05 2.665800e-05 1.065354e-04 4.167448e-05 #>  [786] 4.167448e-05 2.666636e-05 4.167448e-05 2.666636e-05 2.666636e-05 #>  [791] 2.665800e-05 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 #>  [796] 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 1.065354e-04 #>  [801] 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 2.666636e-05 #>  [806] 2.666636e-05 2.665800e-05 4.167448e-05 2.666636e-05 2.666636e-05 #>  [811] 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 #>  [816] 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 #>  [821] 2.665800e-05 2.665800e-05 4.181248e-05 2.666636e-05 2.665800e-05 #>  [826] 2.665800e-05 4.181248e-05 2.665800e-05 4.181248e-05 4.181248e-05 #>  [831] 1.091551e-04 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 #>  [836] 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 4.167448e-05 #>  [841] 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 #>  [846] 2.665800e-05 4.181248e-05 4.167448e-05 2.666636e-05 2.666636e-05 #>  [851] 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 #>  [856] 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 2.665800e-05 #>  [861] 4.181248e-05 4.181248e-05 1.091551e-04 4.167448e-05 2.666636e-05 #>  [866] 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 #>  [871] 4.181248e-05 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 #>  [876] 2.665800e-05 4.181248e-05 4.181248e-05 1.091551e-04 2.666636e-05 #>  [881] 2.665800e-05 2.665800e-05 4.181248e-05 2.665800e-05 4.181248e-05 #>  [886] 4.181248e-05 1.091551e-04 2.665800e-05 4.181248e-05 4.181248e-05 #>  [891] 1.091551e-04 4.181248e-05 1.091551e-04 1.091551e-04 5.676444e-04 #>  [896] 1.065354e-04 4.167448e-05 4.167448e-05 2.666636e-05 4.167448e-05 #>  [901] 2.666636e-05 2.666636e-05 2.665800e-05 4.167448e-05 2.666636e-05 #>  [906] 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 #>  [911] 4.181248e-05 4.167448e-05 2.666636e-05 2.666636e-05 2.665800e-05 #>  [916] 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 2.666636e-05 #>  [921] 2.665800e-05 2.665800e-05 4.181248e-05 2.665800e-05 4.181248e-05 #>  [926] 4.181248e-05 1.091551e-04 4.167448e-05 2.666636e-05 2.666636e-05 #>  [931] 2.665800e-05 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 #>  [936] 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 2.665800e-05 #>  [941] 4.181248e-05 4.181248e-05 1.091551e-04 2.666636e-05 2.665800e-05 #>  [946] 2.665800e-05 4.181248e-05 2.665800e-05 4.181248e-05 4.181248e-05 #>  [951] 1.091551e-04 2.665800e-05 4.181248e-05 4.181248e-05 1.091551e-04 #>  [956] 4.181248e-05 1.091551e-04 1.091551e-04 5.676444e-04 4.167448e-05 #>  [961] 2.666636e-05 2.666636e-05 2.665800e-05 2.666636e-05 2.665800e-05 #>  [966] 2.665800e-05 4.181248e-05 2.666636e-05 2.665800e-05 2.665800e-05 #>  [971] 4.181248e-05 2.665800e-05 4.181248e-05 4.181248e-05 1.091551e-04 #>  [976] 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 2.665800e-05 #>  [981] 4.181248e-05 4.181248e-05 1.091551e-04 2.665800e-05 4.181248e-05 #>  [986] 4.181248e-05 1.091551e-04 4.181248e-05 1.091551e-04 1.091551e-04 #>  [991] 5.676444e-04 2.666636e-05 2.665800e-05 2.665800e-05 4.181248e-05 #>  [996] 2.665800e-05 4.181248e-05 4.181248e-05 1.091551e-04 2.665800e-05 #> [1001] 4.181248e-05 4.181248e-05 1.091551e-04 4.181248e-05 1.091551e-04 #> [1006] 1.091551e-04 5.676444e-04 2.665800e-05 4.181248e-05 4.181248e-05 #> [1011] 1.091551e-04 4.181248e-05 1.091551e-04 1.091551e-04 5.676444e-04 #> [1016] 4.181248e-05 1.091551e-04 1.091551e-04 5.676444e-04 1.091551e-04 #> [1021] 5.676444e-04 5.676444e-04 3.262975e-02  ex_intensities_inverse_gaussian(10L, eta = 0.4) #>  [1] 2.28533714 0.58370348 0.29959361 0.19346675 0.14122976 0.11202407 #>  [7] 0.09527639 0.08757488 0.09210827 0.19967450  intensities_inverse_gaussian(10L, eta = 0.4) #>    [1] 0.2285337136 0.2285337136 0.0129711885 0.2285337136 0.0129711885 #>    [6] 0.0129711885 0.0024966134 0.2285337136 0.0129711885 0.0129711885 #>   [11] 0.0024966134 0.0129711885 0.0024966134 0.0024966134 0.0009212703 #>   [16] 0.2285337136 0.0129711885 0.0129711885 0.0024966134 0.0129711885 #>   [21] 0.0024966134 0.0024966134 0.0009212703 0.0129711885 0.0024966134 #>   [26] 0.0024966134 0.0009212703 0.0024966134 0.0009212703 0.0009212703 #>   [31] 0.0005604356 0.2285337136 0.0129711885 0.0129711885 0.0024966134 #>   [36] 0.0129711885 0.0024966134 0.0024966134 0.0009212703 0.0129711885 #>   [41] 0.0024966134 0.0024966134 0.0009212703 0.0024966134 0.0009212703 #>   [46] 0.0009212703 0.0005604356 0.0129711885 0.0024966134 0.0024966134 #>   [51] 0.0009212703 0.0024966134 0.0009212703 0.0009212703 0.0005604356 #>   [56] 0.0024966134 0.0009212703 0.0009212703 0.0005604356 0.0009212703 #>   [61] 0.0005604356 0.0005604356 0.0005334480 0.2285337136 0.0129711885 #>   [66] 0.0129711885 0.0024966134 0.0129711885 0.0024966134 0.0024966134 #>   [71] 0.0009212703 0.0129711885 0.0024966134 0.0024966134 0.0009212703 #>   [76] 0.0024966134 0.0009212703 0.0009212703 0.0005604356 0.0129711885 #>   [81] 0.0024966134 0.0024966134 0.0009212703 0.0024966134 0.0009212703 #>   [86] 0.0009212703 0.0005604356 0.0024966134 0.0009212703 0.0009212703 #>   [91] 0.0005604356 0.0009212703 0.0005604356 0.0005604356 0.0005334480 #>   [96] 0.0129711885 0.0024966134 0.0024966134 0.0009212703 0.0024966134 #>  [101] 0.0009212703 0.0009212703 0.0005604356 0.0024966134 0.0009212703 #>  [106] 0.0009212703 0.0005604356 0.0009212703 0.0005604356 0.0005604356 #>  [111] 0.0005334480 0.0024966134 0.0009212703 0.0009212703 0.0005604356 #>  [116] 0.0009212703 0.0005604356 0.0005604356 0.0005334480 0.0009212703 #>  [121] 0.0005604356 0.0005604356 0.0005334480 0.0005604356 0.0005334480 #>  [126] 0.0005334480 0.0007939700 0.2285337136 0.0129711885 0.0129711885 #>  [131] 0.0024966134 0.0129711885 0.0024966134 0.0024966134 0.0009212703 #>  [136] 0.0129711885 0.0024966134 0.0024966134 0.0009212703 0.0024966134 #>  [141] 0.0009212703 0.0009212703 0.0005604356 0.0129711885 0.0024966134 #>  [146] 0.0024966134 0.0009212703 0.0024966134 0.0009212703 0.0009212703 #>  [151] 0.0005604356 0.0024966134 0.0009212703 0.0009212703 0.0005604356 #>  [156] 0.0009212703 0.0005604356 0.0005604356 0.0005334480 0.0129711885 #>  [161] 0.0024966134 0.0024966134 0.0009212703 0.0024966134 0.0009212703 #>  [166] 0.0009212703 0.0005604356 0.0024966134 0.0009212703 0.0009212703 #>  [171] 0.0005604356 0.0009212703 0.0005604356 0.0005604356 0.0005334480 #>  [176] 0.0024966134 0.0009212703 0.0009212703 0.0005604356 0.0009212703 #>  [181] 0.0005604356 0.0005604356 0.0005334480 0.0009212703 0.0005604356 #>  [186] 0.0005604356 0.0005334480 0.0005604356 0.0005334480 0.0005334480 #>  [191] 0.0007939700 0.0129711885 0.0024966134 0.0024966134 0.0009212703 #>  [196] 0.0024966134 0.0009212703 0.0009212703 0.0005604356 0.0024966134 #>  [201] 0.0009212703 0.0009212703 0.0005604356 0.0009212703 0.0005604356 #>  [206] 0.0005604356 0.0005334480 0.0024966134 0.0009212703 0.0009212703 #>  [211] 0.0005604356 0.0009212703 0.0005604356 0.0005604356 0.0005334480 #>  [216] 0.0009212703 0.0005604356 0.0005604356 0.0005334480 0.0005604356 #>  [221] 0.0005334480 0.0005334480 0.0007939700 0.0024966134 0.0009212703 #>  [226] 0.0009212703 0.0005604356 0.0009212703 0.0005604356 0.0005604356 #>  [231] 0.0005334480 0.0009212703 0.0005604356 0.0005604356 0.0005334480 #>  [236] 0.0005604356 0.0005334480 0.0005334480 0.0007939700 0.0009212703 #>  [241] 0.0005604356 0.0005604356 0.0005334480 0.0005604356 0.0005334480 #>  [246] 0.0005334480 0.0007939700 0.0005604356 0.0005334480 0.0005334480 #>  [251] 0.0007939700 0.0005334480 0.0007939700 0.0007939700 0.0019461084 #>  [256] 0.2285337136 0.0129711885 0.0129711885 0.0024966134 0.0129711885 #>  [261] 0.0024966134 0.0024966134 0.0009212703 0.0129711885 0.0024966134 #>  [266] 0.0024966134 0.0009212703 0.0024966134 0.0009212703 0.0009212703 #>  [271] 0.0005604356 0.0129711885 0.0024966134 0.0024966134 0.0009212703 #>  [276] 0.0024966134 0.0009212703 0.0009212703 0.0005604356 0.0024966134 #>  [281] 0.0009212703 0.0009212703 0.0005604356 0.0009212703 0.0005604356 #>  [286] 0.0005604356 0.0005334480 0.0129711885 0.0024966134 0.0024966134 #>  [291] 0.0009212703 0.0024966134 0.0009212703 0.0009212703 0.0005604356 #>  [296] 0.0024966134 0.0009212703 0.0009212703 0.0005604356 0.0009212703 #>  [301] 0.0005604356 0.0005604356 0.0005334480 0.0024966134 0.0009212703 #>  [306] 0.0009212703 0.0005604356 0.0009212703 0.0005604356 0.0005604356 #>  [311] 0.0005334480 0.0009212703 0.0005604356 0.0005604356 0.0005334480 #>  [316] 0.0005604356 0.0005334480 0.0005334480 0.0007939700 0.0129711885 #>  [321] 0.0024966134 0.0024966134 0.0009212703 0.0024966134 0.0009212703 #>  [326] 0.0009212703 0.0005604356 0.0024966134 0.0009212703 0.0009212703 #>  [331] 0.0005604356 0.0009212703 0.0005604356 0.0005604356 0.0005334480 #>  [336] 0.0024966134 0.0009212703 0.0009212703 0.0005604356 0.0009212703 #>  [341] 0.0005604356 0.0005604356 0.0005334480 0.0009212703 0.0005604356 #>  [346] 0.0005604356 0.0005334480 0.0005604356 0.0005334480 0.0005334480 #>  [351] 0.0007939700 0.0024966134 0.0009212703 0.0009212703 0.0005604356 #>  [356] 0.0009212703 0.0005604356 0.0005604356 0.0005334480 0.0009212703 #>  [361] 0.0005604356 0.0005604356 0.0005334480 0.0005604356 0.0005334480 #>  [366] 0.0005334480 0.0007939700 0.0009212703 0.0005604356 0.0005604356 #>  [371] 0.0005334480 0.0005604356 0.0005334480 0.0005334480 0.0007939700 #>  [376] 0.0005604356 0.0005334480 0.0005334480 0.0007939700 0.0005334480 #>  [381] 0.0007939700 0.0007939700 0.0019461084 0.0129711885 0.0024966134 #>  [386] 0.0024966134 0.0009212703 0.0024966134 0.0009212703 0.0009212703 #>  [391] 0.0005604356 0.0024966134 0.0009212703 0.0009212703 0.0005604356 #>  [396] 0.0009212703 0.0005604356 0.0005604356 0.0005334480 0.0024966134 #>  [401] 0.0009212703 0.0009212703 0.0005604356 0.0009212703 0.0005604356 #>  [406] 0.0005604356 0.0005334480 0.0009212703 0.0005604356 0.0005604356 #>  [411] 0.0005334480 0.0005604356 0.0005334480 0.0005334480 0.0007939700 #>  [416] 0.0024966134 0.0009212703 0.0009212703 0.0005604356 0.0009212703 #>  [421] 0.0005604356 0.0005604356 0.0005334480 0.0009212703 0.0005604356 #>  [426] 0.0005604356 0.0005334480 0.0005604356 0.0005334480 0.0005334480 #>  [431] 0.0007939700 0.0009212703 0.0005604356 0.0005604356 0.0005334480 #>  [436] 0.0005604356 0.0005334480 0.0005334480 0.0007939700 0.0005604356 #>  [441] 0.0005334480 0.0005334480 0.0007939700 0.0005334480 0.0007939700 #>  [446] 0.0007939700 0.0019461084 0.0024966134 0.0009212703 0.0009212703 #>  [451] 0.0005604356 0.0009212703 0.0005604356 0.0005604356 0.0005334480 #>  [456] 0.0009212703 0.0005604356 0.0005604356 0.0005334480 0.0005604356 #>  [461] 0.0005334480 0.0005334480 0.0007939700 0.0009212703 0.0005604356 #>  [466] 0.0005604356 0.0005334480 0.0005604356 0.0005334480 0.0005334480 #>  [471] 0.0007939700 0.0005604356 0.0005334480 0.0005334480 0.0007939700 #>  [476] 0.0005334480 0.0007939700 0.0007939700 0.0019461084 0.0009212703 #>  [481] 0.0005604356 0.0005604356 0.0005334480 0.0005604356 0.0005334480 #>  [486] 0.0005334480 0.0007939700 0.0005604356 0.0005334480 0.0005334480 #>  [491] 0.0007939700 0.0005334480 0.0007939700 0.0007939700 0.0019461084 #>  [496] 0.0005604356 0.0005334480 0.0005334480 0.0007939700 0.0005334480 #>  [501] 0.0007939700 0.0007939700 0.0019461084 0.0005334480 0.0007939700 #>  [506] 0.0007939700 0.0019461084 0.0007939700 0.0019461084 0.0019461084 #>  [511] 0.0092108273 0.2285337136 0.0129711885 0.0129711885 0.0024966134 #>  [516] 0.0129711885 0.0024966134 0.0024966134 0.0009212703 0.0129711885 #>  [521] 0.0024966134 0.0024966134 0.0009212703 0.0024966134 0.0009212703 #>  [526] 0.0009212703 0.0005604356 0.0129711885 0.0024966134 0.0024966134 #>  [531] 0.0009212703 0.0024966134 0.0009212703 0.0009212703 0.0005604356 #>  [536] 0.0024966134 0.0009212703 0.0009212703 0.0005604356 0.0009212703 #>  [541] 0.0005604356 0.0005604356 0.0005334480 0.0129711885 0.0024966134 #>  [546] 0.0024966134 0.0009212703 0.0024966134 0.0009212703 0.0009212703 #>  [551] 0.0005604356 0.0024966134 0.0009212703 0.0009212703 0.0005604356 #>  [556] 0.0009212703 0.0005604356 0.0005604356 0.0005334480 0.0024966134 #>  [561] 0.0009212703 0.0009212703 0.0005604356 0.0009212703 0.0005604356 #>  [566] 0.0005604356 0.0005334480 0.0009212703 0.0005604356 0.0005604356 #>  [571] 0.0005334480 0.0005604356 0.0005334480 0.0005334480 0.0007939700 #>  [576] 0.0129711885 0.0024966134 0.0024966134 0.0009212703 0.0024966134 #>  [581] 0.0009212703 0.0009212703 0.0005604356 0.0024966134 0.0009212703 #>  [586] 0.0009212703 0.0005604356 0.0009212703 0.0005604356 0.0005604356 #>  [591] 0.0005334480 0.0024966134 0.0009212703 0.0009212703 0.0005604356 #>  [596] 0.0009212703 0.0005604356 0.0005604356 0.0005334480 0.0009212703 #>  [601] 0.0005604356 0.0005604356 0.0005334480 0.0005604356 0.0005334480 #>  [606] 0.0005334480 0.0007939700 0.0024966134 0.0009212703 0.0009212703 #>  [611] 0.0005604356 0.0009212703 0.0005604356 0.0005604356 0.0005334480 #>  [616] 0.0009212703 0.0005604356 0.0005604356 0.0005334480 0.0005604356 #>  [621] 0.0005334480 0.0005334480 0.0007939700 0.0009212703 0.0005604356 #>  [626] 0.0005604356 0.0005334480 0.0005604356 0.0005334480 0.0005334480 #>  [631] 0.0007939700 0.0005604356 0.0005334480 0.0005334480 0.0007939700 #>  [636] 0.0005334480 0.0007939700 0.0007939700 0.0019461084 0.0129711885 #>  [641] 0.0024966134 0.0024966134 0.0009212703 0.0024966134 0.0009212703 #>  [646] 0.0009212703 0.0005604356 0.0024966134 0.0009212703 0.0009212703 #>  [651] 0.0005604356 0.0009212703 0.0005604356 0.0005604356 0.0005334480 #>  [656] 0.0024966134 0.0009212703 0.0009212703 0.0005604356 0.0009212703 #>  [661] 0.0005604356 0.0005604356 0.0005334480 0.0009212703 0.0005604356 #>  [666] 0.0005604356 0.0005334480 0.0005604356 0.0005334480 0.0005334480 #>  [671] 0.0007939700 0.0024966134 0.0009212703 0.0009212703 0.0005604356 #>  [676] 0.0009212703 0.0005604356 0.0005604356 0.0005334480 0.0009212703 #>  [681] 0.0005604356 0.0005604356 0.0005334480 0.0005604356 0.0005334480 #>  [686] 0.0005334480 0.0007939700 0.0009212703 0.0005604356 0.0005604356 #>  [691] 0.0005334480 0.0005604356 0.0005334480 0.0005334480 0.0007939700 #>  [696] 0.0005604356 0.0005334480 0.0005334480 0.0007939700 0.0005334480 #>  [701] 0.0007939700 0.0007939700 0.0019461084 0.0024966134 0.0009212703 #>  [706] 0.0009212703 0.0005604356 0.0009212703 0.0005604356 0.0005604356 #>  [711] 0.0005334480 0.0009212703 0.0005604356 0.0005604356 0.0005334480 #>  [716] 0.0005604356 0.0005334480 0.0005334480 0.0007939700 0.0009212703 #>  [721] 0.0005604356 0.0005604356 0.0005334480 0.0005604356 0.0005334480 #>  [726] 0.0005334480 0.0007939700 0.0005604356 0.0005334480 0.0005334480 #>  [731] 0.0007939700 0.0005334480 0.0007939700 0.0007939700 0.0019461084 #>  [736] 0.0009212703 0.0005604356 0.0005604356 0.0005334480 0.0005604356 #>  [741] 0.0005334480 0.0005334480 0.0007939700 0.0005604356 0.0005334480 #>  [746] 0.0005334480 0.0007939700 0.0005334480 0.0007939700 0.0007939700 #>  [751] 0.0019461084 0.0005604356 0.0005334480 0.0005334480 0.0007939700 #>  [756] 0.0005334480 0.0007939700 0.0007939700 0.0019461084 0.0005334480 #>  [761] 0.0007939700 0.0007939700 0.0019461084 0.0007939700 0.0019461084 #>  [766] 0.0019461084 0.0092108273 0.0129711885 0.0024966134 0.0024966134 #>  [771] 0.0009212703 0.0024966134 0.0009212703 0.0009212703 0.0005604356 #>  [776] 0.0024966134 0.0009212703 0.0009212703 0.0005604356 0.0009212703 #>  [781] 0.0005604356 0.0005604356 0.0005334480 0.0024966134 0.0009212703 #>  [786] 0.0009212703 0.0005604356 0.0009212703 0.0005604356 0.0005604356 #>  [791] 0.0005334480 0.0009212703 0.0005604356 0.0005604356 0.0005334480 #>  [796] 0.0005604356 0.0005334480 0.0005334480 0.0007939700 0.0024966134 #>  [801] 0.0009212703 0.0009212703 0.0005604356 0.0009212703 0.0005604356 #>  [806] 0.0005604356 0.0005334480 0.0009212703 0.0005604356 0.0005604356 #>  [811] 0.0005334480 0.0005604356 0.0005334480 0.0005334480 0.0007939700 #>  [816] 0.0009212703 0.0005604356 0.0005604356 0.0005334480 0.0005604356 #>  [821] 0.0005334480 0.0005334480 0.0007939700 0.0005604356 0.0005334480 #>  [826] 0.0005334480 0.0007939700 0.0005334480 0.0007939700 0.0007939700 #>  [831] 0.0019461084 0.0024966134 0.0009212703 0.0009212703 0.0005604356 #>  [836] 0.0009212703 0.0005604356 0.0005604356 0.0005334480 0.0009212703 #>  [841] 0.0005604356 0.0005604356 0.0005334480 0.0005604356 0.0005334480 #>  [846] 0.0005334480 0.0007939700 0.0009212703 0.0005604356 0.0005604356 #>  [851] 0.0005334480 0.0005604356 0.0005334480 0.0005334480 0.0007939700 #>  [856] 0.0005604356 0.0005334480 0.0005334480 0.0007939700 0.0005334480 #>  [861] 0.0007939700 0.0007939700 0.0019461084 0.0009212703 0.0005604356 #>  [866] 0.0005604356 0.0005334480 0.0005604356 0.0005334480 0.0005334480 #>  [871] 0.0007939700 0.0005604356 0.0005334480 0.0005334480 0.0007939700 #>  [876] 0.0005334480 0.0007939700 0.0007939700 0.0019461084 0.0005604356 #>  [881] 0.0005334480 0.0005334480 0.0007939700 0.0005334480 0.0007939700 #>  [886] 0.0007939700 0.0019461084 0.0005334480 0.0007939700 0.0007939700 #>  [891] 0.0019461084 0.0007939700 0.0019461084 0.0019461084 0.0092108273 #>  [896] 0.0024966134 0.0009212703 0.0009212703 0.0005604356 0.0009212703 #>  [901] 0.0005604356 0.0005604356 0.0005334480 0.0009212703 0.0005604356 #>  [906] 0.0005604356 0.0005334480 0.0005604356 0.0005334480 0.0005334480 #>  [911] 0.0007939700 0.0009212703 0.0005604356 0.0005604356 0.0005334480 #>  [916] 0.0005604356 0.0005334480 0.0005334480 0.0007939700 0.0005604356 #>  [921] 0.0005334480 0.0005334480 0.0007939700 0.0005334480 0.0007939700 #>  [926] 0.0007939700 0.0019461084 0.0009212703 0.0005604356 0.0005604356 #>  [931] 0.0005334480 0.0005604356 0.0005334480 0.0005334480 0.0007939700 #>  [936] 0.0005604356 0.0005334480 0.0005334480 0.0007939700 0.0005334480 #>  [941] 0.0007939700 0.0007939700 0.0019461084 0.0005604356 0.0005334480 #>  [946] 0.0005334480 0.0007939700 0.0005334480 0.0007939700 0.0007939700 #>  [951] 0.0019461084 0.0005334480 0.0007939700 0.0007939700 0.0019461084 #>  [956] 0.0007939700 0.0019461084 0.0019461084 0.0092108273 0.0009212703 #>  [961] 0.0005604356 0.0005604356 0.0005334480 0.0005604356 0.0005334480 #>  [966] 0.0005334480 0.0007939700 0.0005604356 0.0005334480 0.0005334480 #>  [971] 0.0007939700 0.0005334480 0.0007939700 0.0007939700 0.0019461084 #>  [976] 0.0005604356 0.0005334480 0.0005334480 0.0007939700 0.0005334480 #>  [981] 0.0007939700 0.0007939700 0.0019461084 0.0005334480 0.0007939700 #>  [986] 0.0007939700 0.0019461084 0.0007939700 0.0019461084 0.0019461084 #>  [991] 0.0092108273 0.0005604356 0.0005334480 0.0005334480 0.0007939700 #>  [996] 0.0005334480 0.0007939700 0.0007939700 0.0019461084 0.0005334480 #> [1001] 0.0007939700 0.0007939700 0.0019461084 0.0007939700 0.0019461084 #> [1006] 0.0019461084 0.0092108273 0.0005334480 0.0007939700 0.0007939700 #> [1011] 0.0019461084 0.0007939700 0.0019461084 0.0019461084 0.0092108273 #> [1016] 0.0007939700 0.0019461084 0.0019461084 0.0092108273 0.0019461084 #> [1021] 0.0092108273 0.0092108273 0.1996745035"},{"path":"/reference/rexmo.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from exchangeable Marshall–Olkin distributions — rexmo","title":"Sample from exchangeable Marshall–Olkin distributions — rexmo","text":"Draws n iid samples d-variate exchangeable Marshall–Olkin distribution parametrized exchangeable shock-size-arrival intensities.","code":""},{"path":"/reference/rexmo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from exchangeable Marshall–Olkin distributions — rexmo","text":"","code":"rexmo(n, d, ex_intensities, method = c(\"MDCM\", \"AM\", \"ESM\"))"},{"path":"/reference/rexmo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from exchangeable Marshall–Olkin distributions — rexmo","text":"n integer number samples. d integer dimension. ex_intensities numeric vector exchangeable shock-size-arrival intensities. method string indicating sampling algorithm used. Use \"MDCM\" Markovian death-counting model, \"\" Arnold model, \"ESM\" exogenous shock model. recommend using ESM small dimensions; can used dimension \\(30\\).","code":""},{"path":"/reference/rexmo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from exchangeable Marshall–Olkin distributions — rexmo","text":"rexmo returns numeric matrix n rows d columns rows corresponding iid distributed samples d-variate exchangeable Marshall–Olkin distribution exchangeable shock-size-arrival intensities  ex_intensities.","code":""},{"path":"/reference/rexmo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample from exchangeable Marshall–Olkin distributions — rexmo","text":"exchangeable Marshall–Olkin distribution survival function $$     \\bar{F}{(t)}         = \\exp{\\left\\{ -\\sum_{=1}^{d}{ \\eta_{} \\tau_{[]} } \\right\\}} ,             \\quad t = {(t_{1}, \\ldots, t_{d})} > 0 , $$ exchangeable shock-size-arrival intensities \\(\\eta_{} \\geq 0\\), \\(1 \\leq \\leq d\\) \\(t_{[1]} \\geq \\cdots \\geq t_{[d]}\\), see (Mai Scherer 2017) . called shock-size-arrival intensities correspond rates minimums independent exponential random variables corresponding \\(\\)-sized shocks exogenous shock model (ESM), shock-size-arrival intensity \\(\\eta_{}\\) shock-size \\(\\) equal zero implies shock size \\(\\) occurs. relationsip exchangeable shock-size-arrival intensities shock-arrival intensities Marshall–Olkin distribution, see rmo(), follows: $$     \\eta_{}         = \\binom{d}{} \\lambda_{} . $$","code":""},{"path":[]},{"path":"/reference/rexmo.html","id":"general-marshall-olkin-sampling-algorithms","dir":"Reference","previous_headings":"","what":"General Marshall–Olkin sampling algorithms","title":"Sample from exchangeable Marshall–Olkin distributions — rexmo","text":"exogenous shock model (ESM) Arnold model () simulation algorithms general Marshall–Olkin distribution can used. , exchangeable shock-size-arrival intensities converted corresponding shock-arrival intensities passed rmo().","code":""},{"path":"/reference/rexmo.html","id":"markovian-death-set-model","dir":"Reference","previous_headings":"","what":"Markovian death-set model","title":"Sample from exchangeable Marshall–Olkin distributions — rexmo","text":"TBD; see (see pp. 122 psqq. Mai Scherer 2017)  similar algorithm.","code":""},{"path":"/reference/rexmo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample from exchangeable Marshall–Olkin distributions — rexmo","text":"Mai J, Scherer M (2017). Simulating copulas: stochastic models, sampling algorithms applications,  Series Quantitative Finance, 2 edition. World Scientific. doi:10.1142/10265 .","code":""},{"path":[]},{"path":"/reference/rexmo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from exchangeable Marshall–Olkin distributions — rexmo","text":"","code":"rexmo(     10, 3,     c(1.2, 0.3, 0.4) ) #>             [,1]      [,2]       [,3] #>  [1,] 0.03910310 2.7629531 0.75005638 #>  [2,] 1.49167079 0.2813662 0.28136623 #>  [3,] 1.31018563 0.6964609 0.43799461 #>  [4,] 0.73271421 2.3488835 0.53710024 #>  [5,] 0.37293535 0.3729353 1.18603495 #>  [6,] 0.05613014 1.0569323 1.05693228 #>  [7,] 1.45981871 0.7180965 1.94918599 #>  [8,] 0.25116916 0.1084164 0.05423552 #>  [9,] 2.04163377 1.8835688 0.06859072 #> [10,] 0.75895378 1.8640239 0.22487811 ## independence rexmo(     10, 3,     c(3, 0, 0) ) #>            [,1]       [,2]      [,3] #>  [1,] 0.8008922 0.66170690 4.3722239 #>  [2,] 1.6343091 0.38077200 1.0882514 #>  [3,] 2.3565694 1.28385620 0.5455765 #>  [4,] 4.4324292 0.26236732 0.8678752 #>  [5,] 1.4654421 0.02204145 0.1251700 #>  [6,] 0.3003466 1.30426794 0.6383970 #>  [7,] 1.6839657 0.51431552 1.5345917 #>  [8,] 1.0092190 1.04751368 0.4096108 #>  [9,] 1.1715560 1.45752664 1.0205629 #> [10,] 2.0386997 0.72930421 2.8678189 ## comonotone rexmo(     10, 3,     c(0, 0, 1) ) #>            [,1]      [,2]      [,3] #>  [1,] 1.8010010 1.8010010 1.8010010 #>  [2,] 1.1420193 1.1420193 1.1420193 #>  [3,] 0.7962134 0.7962134 0.7962134 #>  [4,] 1.6543221 1.6543221 1.6543221 #>  [5,] 0.7666708 0.7666708 0.7666708 #>  [6,] 0.8172957 0.8172957 0.8172957 #>  [7,] 1.7995371 1.7995371 1.7995371 #>  [8,] 1.4092542 1.4092542 1.4092542 #>  [9,] 0.2051142 0.2051142 0.2051142 #> [10,] 1.3056977 1.3056977 1.3056977  rexmo(     10, 3,     c(1.2, 0.3, 0.4),     method = \"MDCM\" ) #>            [,1]      [,2]       [,3] #>  [1,] 0.3327893 1.8463960 2.03739999 #>  [2,] 2.0387610 2.6941905 1.60751608 #>  [3,] 4.4728975 4.3247456 6.36618576 #>  [4,] 1.4457256 0.4035308 1.70644443 #>  [5,] 0.3935227 0.7327385 0.89011398 #>  [6,] 0.7587094 0.7587094 0.75870941 #>  [7,] 0.2282501 0.8864157 1.08976315 #>  [8,] 1.1374494 0.5458898 0.44105995 #>  [9,] 4.7789319 2.6298921 0.02503268 #> [10,] 0.2453469 0.2453469 0.24534688 ## independence rexmo(     10, 3,     c(3, 0, 0),     method = \"MDCM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 1.09791133 0.15343944 0.03049748 #>  [2,] 0.09949029 0.57353214 2.38079879 #>  [3,] 0.01172541 0.08587196 1.89844401 #>  [4,] 0.96635425 0.18760874 0.43994173 #>  [5,] 1.27961420 0.53176667 1.09265209 #>  [6,] 3.43076266 0.04852240 0.48006303 #>  [7,] 0.31090320 0.13701916 0.14486861 #>  [8,] 2.68751548 0.03317181 0.15266962 #>  [9,] 1.55928538 0.72775721 0.42948540 #> [10,] 0.37594608 0.34852078 0.05872754 ## comonotone rexmo(     10, 3,     c(0, 0, 1),     method = \"MDCM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 1.20510555 1.20510555 1.20510555 #>  [2,] 1.02483234 1.02483234 1.02483234 #>  [3,] 1.77212364 1.77212364 1.77212364 #>  [4,] 1.09698349 1.09698349 1.09698349 #>  [5,] 3.80357822 3.80357822 3.80357822 #>  [6,] 0.05365136 0.05365136 0.05365136 #>  [7,] 0.16769803 0.16769803 0.16769803 #>  [8,] 0.48135053 0.48135053 0.48135053 #>  [9,] 0.70475136 0.70475136 0.70475136 #> [10,] 1.03597174 1.03597174 1.03597174  rexmo(     10, 3,     c(1.2, 0.3, 0.4),     method = \"AM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.00381420 0.36592866 0.97162866 #>  [2,] 1.06985284 0.11907340 1.40742657 #>  [3,] 2.94869755 0.03276066 2.94869755 #>  [4,] 2.49544406 0.19094059 2.38622262 #>  [5,] 0.21286164 0.21286164 0.21286164 #>  [6,] 0.69315327 0.69315327 0.69315327 #>  [7,] 3.81024245 0.41318315 0.41318315 #>  [8,] 0.04108176 0.04108176 0.04108176 #>  [9,] 0.58382505 0.58382505 0.58382505 #> [10,] 0.45075344 5.30142055 1.98569401 ## independence rexmo(     10, 3,     c(3, 0, 0),     method = \"AM\" ) #>             [,1]        [,2]       [,3] #>  [1,] 1.46214062 0.008105964 0.08081834 #>  [2,] 3.98267476 0.183257910 1.65794280 #>  [3,] 0.45538391 1.354754424 0.20113519 #>  [4,] 0.08761483 2.391346662 0.03409392 #>  [5,] 0.59531697 3.964295250 2.58230709 #>  [6,] 1.59794195 0.098203301 1.64987751 #>  [7,] 1.68341424 1.843050741 0.12115358 #>  [8,] 1.98666311 0.622432039 1.65799028 #>  [9,] 0.09291632 0.614727829 0.41817654 #> [10,] 1.03029097 0.244143756 1.38121421 ## comonotone rexmo(     10, 3,     c(0, 0, 1),     method = \"AM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 3.2301963 3.2301963 3.2301963 #>  [2,] 1.7779116 1.7779116 1.7779116 #>  [3,] 0.5877495 0.5877495 0.5877495 #>  [4,] 0.1600403 0.1600403 0.1600403 #>  [5,] 1.2080304 1.2080304 1.2080304 #>  [6,] 3.5541174 3.5541174 3.5541174 #>  [7,] 1.6128778 1.6128778 1.6128778 #>  [8,] 0.0718742 0.0718742 0.0718742 #>  [9,] 0.7908461 0.7908461 0.7908461 #> [10,] 0.7902583 0.7902583 0.7902583  rexmo(     10, 3,     c(1.2, 0.3, 0.4),     method = \"ESM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 1.5662509 0.3408078 0.5390147 #>  [2,] 0.7344016 0.5140222 0.7344016 #>  [3,] 0.1887906 0.4211000 0.4211000 #>  [4,] 4.7817334 1.7634427 0.1408955 #>  [5,] 0.6025414 1.7129319 0.2857823 #>  [6,] 0.8852973 0.8852973 0.8358194 #>  [7,] 0.5367237 0.4862974 0.2656157 #>  [8,] 0.7378198 1.4431252 1.7019196 #>  [9,] 1.4835564 1.3594465 0.2988343 #> [10,] 0.9701228 1.4885276 0.9701228 ## independence rexmo(     10, 3,     c(3, 0, 0),     method = \"ESM\" ) #>            [,1]       [,2]      [,3] #>  [1,] 0.7730945 0.05547609 0.2703245 #>  [2,] 1.1060958 0.63150267 2.2907373 #>  [3,] 2.5665189 0.50173918 0.9632740 #>  [4,] 0.7823600 1.12694827 2.2649882 #>  [5,] 0.8067667 3.28727608 1.2445191 #>  [6,] 0.8971160 0.06153586 0.2102764 #>  [7,] 1.2711529 1.40200703 1.0159973 #>  [8,] 1.9787080 0.95072984 0.8044869 #>  [9,] 0.3622451 0.35666643 0.8077635 #> [10,] 0.5694748 0.15032386 0.2333111 ## comonotone rexmo(     10, 3,     c(0, 0, 1),     method = \"ESM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.86521892 0.86521892 0.86521892 #>  [2,] 1.07462874 1.07462874 1.07462874 #>  [3,] 2.56294570 2.56294570 2.56294570 #>  [4,] 2.14600700 2.14600700 2.14600700 #>  [5,] 0.18165171 0.18165171 0.18165171 #>  [6,] 0.65716015 0.65716015 0.65716015 #>  [7,] 1.96309441 1.96309441 1.96309441 #>  [8,] 0.05160971 0.05160971 0.05160971 #>  [9,] 0.07495551 0.07495551 0.07495551 #> [10,] 0.59172160 0.59172160 0.59172160"},{"path":"/reference/rextmo.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from extendible Marshall–Olkin distributions — rextmo","title":"Sample from extendible Marshall–Olkin distributions — rextmo","text":"Draws n iid samples d-variate extendible Marshall–Olkin distribution parametrized Bernstein functions bf, essentially wrapping rexmo() generating suitable exchangeable shock-size-arrival intensities.","code":""},{"path":"/reference/rextmo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from extendible Marshall–Olkin distributions — rextmo","text":"","code":"rextmo(n, d, bf, method = c(\"MDCM\", \"AM\", \"ESM\"))"},{"path":"/reference/rextmo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from extendible Marshall–Olkin distributions — rextmo","text":"n integer number samples. d integer dimension. bf BernsteinFunction Bernstein function extendible Marshall–Olkin distribution. method string indicating sampling algorithm used. Use \"MDCM\" Markovian death-counting model, \"\" Arnold model, \"ESM\" exogenous shock model. recommend using ESM small dimensions; can used dimension \\(30\\).","code":""},{"path":"/reference/rextmo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from extendible Marshall–Olkin distributions — rextmo","text":"rextmo returns numeric matrix n rows d columns rows corresponding iid distributed samples d-variate extendible Marshall–Olkin distribution Bernstein function  bf.","code":""},{"path":"/reference/rextmo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample from extendible Marshall–Olkin distributions — rextmo","text":"extendible Marshall–Olkin distribution survival function $$     \\bar{F}{(t)}         = \\exp{\\left\\{ - \\sum_{=1}^{d}{ {[ \\psi{()} - \\psi{(-1)} ]} t_{[]} } \\right\\}} ,             \\quad t = {(t_{1}, \\ldots, t_{d})} > 0 , $$ Bernstein functions \\(\\psi\\), see BernsteinFunction, \\(t_{[1]} \\geq \\cdots \\geq t_{[d]}\\), see (Mai Scherer 2017) . relationship Bernstein functions exchangeable shock-size-arrival intensities exchangeable Marshall–Olkin distribution, see rexmo(), follows: $$     \\eta_{}         = \\binom{d}{} {(-1)}^{-1} \\Delta{ \\psi{(d-)} } ,             \\quad \\{\\{ 1 , \\ldots , d \\}} . $$","code":""},{"path":"/reference/rextmo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample from extendible Marshall–Olkin distributions — rextmo","text":"Mai J, Scherer M (2017). Simulating copulas: stochastic models, sampling algorithms applications,  Series Quantitative Finance, 2 edition. World Scientific. doi:10.1142/10265 .","code":""},{"path":[]},{"path":"/reference/rextmo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from extendible Marshall–Olkin distributions — rextmo","text":"","code":"rextmo(     10, 3,     AlphaStableBernsteinFunction(alpha = log2(2 - 0.5)) ) #>            [,1]       [,2]      [,3] #>  [1,] 1.8006275 2.02603625 0.2330134 #>  [2,] 0.4476923 0.48017283 0.4801728 #>  [3,] 1.0033278 0.49434739 0.1332174 #>  [4,] 0.5428004 0.38098816 0.5428004 #>  [5,] 0.1878339 0.56442015 0.6510687 #>  [6,] 0.2946568 0.69170012 0.2946568 #>  [7,] 0.9015612 1.53043042 1.5304304 #>  [8,] 2.7577939 2.46371443 1.0359932 #>  [9,] 0.8768334 0.08302871 1.3132333 #> [10,] 0.2094394 1.65121566 1.6512157 # independence rextmo(     10, 3,     LinearBernsteinFunction(scale = 1) ) #>             [,1]       [,2]       [,3] #>  [1,] 1.11487789 0.20008763 1.24663129 #>  [2,] 1.91918689 2.81746934 1.70586363 #>  [3,] 0.01779804 5.58021262 0.28793068 #>  [4,] 1.48894795 1.51043345 0.54314661 #>  [5,] 0.16239161 1.08956049 2.06899246 #>  [6,] 0.77349868 3.05814691 0.21801311 #>  [7,] 2.12716572 0.01770344 0.06386404 #>  [8,] 0.71479829 1.01787587 0.07835613 #>  [9,] 0.92811108 0.50273675 0.28034397 #> [10,] 0.93229424 1.13973642 0.67075059 # comonotone rextmo(     10, 3,     ConstantBernsteinFunction(constant = 1) ) #>             [,1]       [,2]       [,3] #>  [1,] 1.09696289 1.09696289 1.09696289 #>  [2,] 0.01080994 0.01080994 0.01080994 #>  [3,] 1.68793060 1.68793060 1.68793060 #>  [4,] 4.06749891 4.06749891 4.06749891 #>  [5,] 0.29008221 0.29008221 0.29008221 #>  [6,] 0.52000387 0.52000387 0.52000387 #>  [7,] 0.67083965 0.67083965 0.67083965 #>  [8,] 0.08314637 0.08314637 0.08314637 #>  [9,] 1.08778338 1.08778338 1.08778338 #> [10,] 1.73429384 1.73429384 1.73429384  rextmo(     10, 3,     AlphaStableBernsteinFunction(alpha = log2(2 - 0.5)),     method = \"AM\" ) #>             [,1]      [,2]      [,3] #>  [1,] 0.95283481 0.4711868 3.1585004 #>  [2,] 0.01422628 0.3767208 0.2912219 #>  [3,] 0.36892061 0.3478707 0.1835459 #>  [4,] 0.92537196 3.8170987 2.1737336 #>  [5,] 0.80750952 0.8075095 1.2327438 #>  [6,] 0.79396558 0.7939656 0.7939656 #>  [7,] 0.14569955 0.1456996 0.1456996 #>  [8,] 1.46146404 0.4034090 1.4614640 #>  [9,] 0.03904438 1.5204038 0.9226741 #> [10,] 0.83613509 0.8361351 0.8361351 # independence rextmo(     10, 3,     LinearBernsteinFunction(scale = 1),     method = \"AM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 2.57876495 0.93069326 0.41729411 #>  [2,] 0.07070152 1.22345129 0.02718375 #>  [3,] 0.70221536 0.55371926 0.55264817 #>  [4,] 1.48006493 2.36709523 0.40472785 #>  [5,] 1.89418239 1.41118738 0.51646870 #>  [6,] 2.42853155 1.11797853 0.16658437 #>  [7,] 0.67688009 0.08662434 3.88453696 #>  [8,] 4.20418899 1.31105787 0.07123370 #>  [9,] 1.01740087 1.23775494 0.28445928 #> [10,] 0.41328271 0.46287602 0.43008569 # comonotone rextmo(     10, 3,     ConstantBernsteinFunction(constant = 1),     method = \"AM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.09020151 0.09020151 0.09020151 #>  [2,] 0.84545545 0.84545545 0.84545545 #>  [3,] 0.33488334 0.33488334 0.33488334 #>  [4,] 0.06860975 0.06860975 0.06860975 #>  [5,] 0.07838095 0.07838095 0.07838095 #>  [6,] 0.03421787 0.03421787 0.03421787 #>  [7,] 0.92499732 0.92499732 0.92499732 #>  [8,] 1.19169290 1.19169290 1.19169290 #>  [9,] 0.95912681 0.95912681 0.95912681 #> [10,] 0.40158515 0.40158515 0.40158515  rextmo(     10, 3,     AlphaStableBernsteinFunction(alpha = log2(2 - 0.5)),     method = \"ESM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 3.22718167 0.44525181 0.44525181 #>  [2,] 1.68073794 0.71594030 0.21582117 #>  [3,] 0.93165424 0.93165424 0.93165424 #>  [4,] 1.15604325 1.15604325 1.15604325 #>  [5,] 0.29729630 0.29729630 0.29729630 #>  [6,] 1.52810367 1.52810367 1.52810367 #>  [7,] 0.56150215 1.00665514 1.87260082 #>  [8,] 0.02751885 0.02751885 0.02751885 #>  [9,] 1.61750357 0.69973013 0.68825673 #> [10,] 0.78993252 0.78993252 0.78993252 # independence rextmo(     10, 3,     LinearBernsteinFunction(scale = 1),     method = \"ESM\" ) #>            [,1]      [,2]       [,3] #>  [1,] 2.6886118 0.0425595 3.19246913 #>  [2,] 0.2468871 1.4386837 0.54191522 #>  [3,] 0.6848429 0.3063247 0.85573032 #>  [4,] 1.4328375 2.9919598 0.97799285 #>  [5,] 0.6648623 1.3046987 0.04418445 #>  [6,] 0.2016367 2.3158024 0.03275788 #>  [7,] 2.4495765 0.5989868 4.68002503 #>  [8,] 0.3219650 0.0609751 0.14963699 #>  [9,] 0.2110932 1.6121359 0.22315132 #> [10,] 1.0665893 0.4414501 0.41484299 # comonotone rextmo(     10, 3,     ConstantBernsteinFunction(constant = 1),     method = \"ESM\" ) #>              [,1]        [,2]        [,3] #>  [1,] 0.005334848 0.005334848 0.005334848 #>  [2,] 2.131928133 2.131928133 2.131928133 #>  [3,] 0.693259042 0.693259042 0.693259042 #>  [4,] 0.736132775 0.736132775 0.736132775 #>  [5,] 1.262141852 1.262141852 1.262141852 #>  [6,] 1.327315440 1.327315440 1.327315440 #>  [7,] 0.063889788 0.063889788 0.063889788 #>  [8,] 0.168690098 0.168690098 0.168690098 #>  [9,] 0.520691216 0.520691216 0.520691216 #> [10,] 0.082897230 0.082897230 0.082897230"},{"path":"/reference/rmo-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rmo: A package for the Marshall–Olkin distribution. — rmo-package","title":"rmo: A package for the Marshall–Olkin distribution. — rmo-package","text":"package contains fast implementations sampling algorithms related Marshall–Olkin distribution. also contains S4-class system Bernstein functions can used create large variety Marshall–Olkin parametrizations.","code":""},{"path":"/reference/rmo-package.html","id":"bernstein-functions","dir":"Reference","previous_headings":"","what":"Bernstein functions","title":"rmo: A package for the Marshall–Olkin distribution. — rmo-package","text":"Bernstein function non-negative function non-negative alternating iterative differences. functions can used generated parametrizations extendible Marshall–Olkin distributions. object derives BernsteinFunction can used generate Marshall–Olkin shock arrival intensities intensities(). can used generate (scaled) exchangeable shock-size arrival intensities exIntensities(). Many families Bernstein functions available, e.g. ParetoBernsteinFunction, ExponentialBernsteinFunction, AlphaStableBernsteinFunction. Bernstein functions can recombined scaling, summation composition, can used create new Bernstein functions ScaledBernsteinFunction SumOfBernsteinFunctions.","code":""},{"path":"/reference/rmo-package.html","id":"sampling","dir":"Reference","previous_headings":"","what":"Sampling","title":"rmo: A package for the Marshall–Olkin distribution. — rmo-package","text":"Multiple sampling algorithms provided. semantic naming scheme r*mo used, e.g., rmo() allows simulation Marshall–Olkin distributions. shock arrival intensities input uses Arnold model exogenous shock model sampling; former can used dimension \\(30\\), latter used small dimensions. rexmo() allows simulation exchangeable Marshall–Olkin distributions. exchangeable shock-size arrival intensities input uses Markovian death-set model, Arnold model, exogenous shock model sampling; latter two models, corresponding shock arrival intensities calculated passed rmo(). rextmo() allows simulation extendible Marshall–Olkin distributions. Bernstein function input calculates corresponding exchangeable shock-size arrival intensities passes rexmo(). rpextmo() allows simulation parametric families extendible Marshall–Olkin distributions. killing-rate, drift, scaling factor, parameter vector, family name input. previous models can used corresponding inputs calculated Bernstein function. special families, correspond Lévy exponents compound Poisson subordinators, Lévy frailty model can used simulations.","code":""},{"path":[]},{"path":"/reference/rmo-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rmo: A package for the Marshall–Olkin distribution. — rmo-package","text":"Maintainer: Henrik Sloot henrik.sloot@gmail.com (ORCID)","code":""},{"path":"/reference/rmo.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from Marshall–Olkin distributions — rmo","title":"Sample from Marshall–Olkin distributions — rmo","text":"Draws n iid samples d-variate Marshall–Olkin distribution parametrized shock-arrival intensities.","code":""},{"path":"/reference/rmo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from Marshall–Olkin distributions — rmo","text":"","code":"rmo(n, d, intensities, method = c(\"AM\", \"ESM\"))"},{"path":"/reference/rmo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from Marshall–Olkin distributions — rmo","text":"n integer number samples. d integer dimension. intensities numeric vector shock-arrival intensities. method string indicating sampling algorithm used. Use \"\" Arnold model \"ESM\" exogenous shock model. recommend using ESM small dimensions; can used dimension \\(30\\).","code":""},{"path":"/reference/rmo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from Marshall–Olkin distributions — rmo","text":"rmo returns numeric matrix n rows d columns rows corresponding iid distributed samples d-variate Marshall–Olkin distribution shock-arrival intensities  intensities.","code":""},{"path":"/reference/rmo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample from Marshall–Olkin distributions — rmo","text":"Marshall–Olkin distribution introduced (Marshall Olkin 1967)  survival function $$     \\bar{F}{(t)}         = \\exp{\\left\\{ - \\sum_{} \\lambda_I \\max_{\\} t_i \\right\\}} ,             \\quad t = {(t_{1}, \\ldots, t_{d})} > 0 , $$ shock-arrival intensities \\(\\lambda_I \\geq 0\\), \\(\\emptyset \\neq \\subseteq {\\{ 1 , \\ldots, d \\}}\\). called shock-arrival intensities correspond rates independent exponential random variables exogenous shock model (ESM), shock-arrival intensity \\(\\lambda_{}\\) shock \\(\\) equal zero implies shock \\(\\) never arrives. use following binary representation map subsets \\(\\{ 1, \\ldots, d\\}\\) integers \\(0, \\ldots, 2^d-1\\): $$   \\equiv \\sum_{k \\}{ 2^{k-1} } $$","code":""},{"path":[]},{"path":"/reference/rmo.html","id":"exogenous-shock-model","dir":"Reference","previous_headings":"","what":"Exogenous shock model","title":"Sample from Marshall–Olkin distributions — rmo","text":"exogenous shock model (ESM) simulates Marshall–Olkin distributed random vector via independent exponentially distributed shock times non-empty subsets components defines component minimum shock times corresponding subset containing component, see (see pp. 104 psqq. Mai Scherer 2017)  (Marshall Olkin 1967) .","code":""},{"path":"/reference/rmo.html","id":"arnold-model","dir":"Reference","previous_headings":"","what":"Arnold model","title":"Sample from Marshall–Olkin distributions — rmo","text":"Arnold model () simulates Marshall–Olkin distributed random vector simulating marked homogeneous Poisson process set-valued marks. process stopped components hit shock, see (see Sec. 3.1.2 Mai Scherer 2017)  (Arnold 1975) .","code":""},{"path":"/reference/rmo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample from Marshall–Olkin distributions — rmo","text":"Arnold BC (1975). “characterization exponential distribution multivariate geometric compounding.” Sankhy\\=: Indian Journal Statistics, Series , 37(1), 164--173. Mai J, Scherer M (2017). Simulating copulas: stochastic models, sampling algorithms applications,  Series Quantitative Finance, 2 edition. World Scientific. doi:10.1142/10265 . Marshall AW, Olkin (1967). “multivariate exponential distribution.” Journal American Statistical Association, 62(317), 30--44. doi:10.2307/2282907 .","code":""},{"path":[]},{"path":"/reference/rmo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from Marshall–Olkin distributions — rmo","text":"","code":"rmo(     10, 3,     c(0.4, 0.4, 0.1, 0.4, 0.1, 0.1, 0.4) ) #>            [,1]      [,2]      [,3] #>  [1,] 1.7570584 0.4607102 0.4607102 #>  [2,] 0.6583441 2.2633275 1.9254033 #>  [3,] 0.8000522 0.4477182 0.8000522 #>  [4,] 1.4347096 1.5369480 1.8541204 #>  [5,] 1.6225604 1.6225604 1.0611143 #>  [6,] 0.4468450 0.4468450 1.4497485 #>  [7,] 0.3647019 0.7421941 0.3400279 #>  [8,] 0.2446535 0.3885835 0.3885835 #>  [9,] 0.2869271 0.2869271 0.2869271 #> [10,] 0.7593272 0.6646905 0.6646905 ## independence rmo(     10, 3,     c(1, 1, 0, 1, 0, 0, 0) ) #>             [,1]      [,2]       [,3] #>  [1,] 0.73314992 0.5934742 0.28388329 #>  [2,] 1.17140475 0.3852223 0.32852126 #>  [3,] 1.88523636 1.2368773 0.08638464 #>  [4,] 0.80897532 0.4659788 0.26311047 #>  [5,] 0.04583994 1.4606745 2.11176227 #>  [6,] 2.73570170 0.9741193 1.14083772 #>  [7,] 1.74483771 0.1961893 1.67802917 #>  [8,] 0.25246829 0.2294651 0.14455781 #>  [9,] 0.04876110 0.9461374 3.67979823 #> [10,] 0.76125179 2.7608619 1.57069490 ## comonotone rmo(     10, 3,     c(0, 0, 0, 0, 0, 0, 1) ) #>             [,1]       [,2]       [,3] #>  [1,] 0.02372456 0.02372456 0.02372456 #>  [2,] 1.70837114 1.70837114 1.70837114 #>  [3,] 0.19996609 0.19996609 0.19996609 #>  [4,] 1.89300097 1.89300097 1.89300097 #>  [5,] 0.77348107 0.77348107 0.77348107 #>  [6,] 0.86267590 0.86267590 0.86267590 #>  [7,] 0.40513295 0.40513295 0.40513295 #>  [8,] 0.49816732 0.49816732 0.49816732 #>  [9,] 0.05583675 0.05583675 0.05583675 #> [10,] 0.85065157 0.85065157 0.85065157  rmo(     10, 3,     c(0.4, 0.4, 0.1, 0.4, 0.1, 0.1, 0.4),     method = \"ESM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.93979041 1.47654430 1.83249203 #>  [2,] 0.29156356 2.89073713 4.88190345 #>  [3,] 1.88179230 0.55120945 1.16482147 #>  [4,] 0.07696705 0.07696705 0.07696705 #>  [5,] 0.78326419 2.66364250 2.66364250 #>  [6,] 0.25322625 0.25322625 0.25322625 #>  [7,] 2.40503297 0.58945879 2.40503297 #>  [8,] 0.34476287 2.87839795 2.87839795 #>  [9,] 0.59594282 0.59594282 0.59594282 #> [10,] 1.21571201 1.48374700 1.48374700 ## independence rmo(     10, 3,     c(1, 1, 0, 1, 0, 0, 0),     method = \"ESM\" ) #>            [,1]        [,2]       [,3] #>  [1,] 0.3946361 0.944203987 0.06926981 #>  [2,] 0.4921712 1.495523077 1.51207222 #>  [3,] 1.0942658 2.255257530 0.43626562 #>  [4,] 0.7043374 1.736352182 0.38126085 #>  [5,] 0.6051175 0.860486435 3.24298392 #>  [6,] 0.7881268 0.336547168 0.93447799 #>  [7,] 1.1435302 1.575419074 0.59539730 #>  [8,] 0.3998422 1.002556984 0.73563862 #>  [9,] 3.3470445 0.007101348 0.46140575 #> [10,] 0.8614209 2.406859515 1.01320402 ## comonotone rmo(     10, 3,     c(0, 0, 0, 0, 0, 0, 1),     method = \"ESM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 0.5526360 0.5526360 0.5526360 #>  [2,] 0.1873734 0.1873734 0.1873734 #>  [3,] 2.0342621 2.0342621 2.0342621 #>  [4,] 0.9785232 0.9785232 0.9785232 #>  [5,] 0.6819525 0.6819525 0.6819525 #>  [6,] 0.7036793 0.7036793 0.7036793 #>  [7,] 1.6864082 1.6864082 1.6864082 #>  [8,] 1.8690029 1.8690029 1.8690029 #>  [9,] 0.9482212 0.9482212 0.9482212 #> [10,] 1.1516062 1.1516062 1.1516062  rmo(     10, 3,     c(0.4, 0.4, 0.1, 0.4, 0.1, 0.1, 0.4),     method = \"AM\" ) #>             [,1]      [,2]      [,3] #>  [1,] 0.29757599 0.6592146 2.2870028 #>  [2,] 0.65295291 0.6529529 0.3679259 #>  [3,] 0.01044761 2.1189271 0.5176081 #>  [4,] 0.09063207 0.4243896 0.4243896 #>  [5,] 0.43300846 0.5332480 2.8526034 #>  [6,] 5.38916311 2.6144080 6.0501042 #>  [7,] 0.10112937 0.1011294 0.1011294 #>  [8,] 2.37484354 4.5484454 2.3748435 #>  [9,] 0.27055437 0.7211833 0.7211833 #> [10,] 1.27599787 1.2759979 1.2759979 ## independence rmo(     10, 3,     c(1, 1, 0, 1, 0, 0, 0),     method = \"AM\" ) #>               [,1]       [,2]      [,3] #>  [1,] 0.2713897751 0.21698901 2.3986578 #>  [2,] 2.0853357686 0.30474165 0.9445736 #>  [3,] 0.9475544020 0.65362858 1.1220975 #>  [4,] 0.9367693630 0.87415785 1.9159261 #>  [5,] 0.0139758133 0.34088548 0.3150828 #>  [6,] 0.6702401978 0.08914259 1.8055032 #>  [7,] 0.1826944822 2.53524629 0.4435867 #>  [8,] 0.0009955576 0.11117384 2.7512407 #>  [9,] 0.5105280586 1.31828682 0.5802264 #> [10,] 0.1303157826 0.08076415 0.2209822 ## comonotone rmo(     10, 3,     c(0, 0, 0, 0, 0, 0, 1),     method = \"AM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 0.4740063 0.4740063 0.4740063 #>  [2,] 0.3031253 0.3031253 0.3031253 #>  [3,] 0.6693183 0.6693183 0.6693183 #>  [4,] 3.3998689 3.3998689 3.3998689 #>  [5,] 1.0263654 1.0263654 1.0263654 #>  [6,] 1.4420080 1.4420080 1.4420080 #>  [7,] 0.2215211 0.2215211 0.2215211 #>  [8,] 0.5817400 0.5817400 0.5817400 #>  [9,] 0.4392750 0.4392750 0.4392750 #> [10,] 0.1750266 0.1750266 0.1750266"},{"path":"/reference/rpextmo.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from parametrized extendible MO distributions — rpextmo","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"Draws n iid samples d-variate paramatrized extendible MO distribution.","code":""},{"path":"/reference/rpextmo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"","code":"rpextmo(   n,   d,   a = 0,   b = 0,   gamma = 1,   eta = NULL,   family = c(\"Armageddon\", \"Poisson\", \"Pareto\", \"Exponential\", \"AlphaStable\",     \"InverseGaussian\", \"Gamma\"),   method = c(\"MDCM\", \"LFM\", \"AM\", \"ESM\") )"},{"path":"/reference/rpextmo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"n integer number samples. d integer dimension. non-negative double killing-rate \\(\\) Bernstein function. b non-negative double drift \\(b\\) Bernstein function. gamma position double scaling integral part Bernstein function. eta numeric vector family's parameters, see Details. family string indicating parametrized family. Use \"Armageddon\" Armageddon family, \"Poisson\" Poisson family, \"Pareto\" Pareto family, \"Exponential\" Exponential family, \"AlphaStable\" \\(\\alpha\\)-stable family, \"InverseGaussian\" Inverse-Gaussian family, \"Gamma\" Gamma family. method string indicating sampling algorithm used. Use \"MDCM\" Markovian death-set model, \"LFM\" Lévy–frailty model,  \"\" Arnold model, \"ESM\" exogenous shock model (case Armageddon family, algorithm optimized consider finite shocks). recommend using ESM small dimensions; can used dimension \\(30\\).","code":""},{"path":"/reference/rpextmo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"rpextmo returns numeric matrix n rows d columns rows corresponding iid distributed samples d-variate parametrized extendible Marshall–Olkin distribution corresponding parameters.","code":""},{"path":"/reference/rpextmo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"parametrized ext. MO distribution family ext. MO distributions, see rextmo(), corresponding Bernstein functions form $$     \\psi{(x)}         = 1_{\\{ x > 0 \\}} + b x + \\gamma \\cdot             \\int_{0}^{\\infty}{ {[1 - e^{-ux}]} \\nu{(\\mathrm{d}u)} },                 \\quad x \\geq 0 , $$ $$    \\psi{(x)}        = 1_{\\{ x > 0 \\}} + b x + \\gamma \\cdot            \\int_{0}^{\\infty}{ \\frac{x}{x + u} \\sigma{(\\mathrm{d}u)} },                \\quad x \\geq 0 , $$ \\(, b \\geq 0\\) \\(\\nu\\), resp. \\(\\sigma\\), Lévy measure, resp. Stieltjes measure, \\(> 0\\), \\(b > 0\\), \\(\\nu \\\\equiv 0\\), resp. \\(\\sigma \\\\equiv 0\\).","code":""},{"path":"/reference/rpextmo.html","id":"families","dir":"Reference","previous_headings":"","what":"Families","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"implemented families listed following; re-combinations possible, see ScaledBernsteinFunction, SumOfBernsteinFunctions, CompositeScaledBernsteinFunction.","code":""},{"path":"/reference/rpextmo.html","id":"armageddon-family","dir":"Reference","previous_headings":"","what":"Armageddon family","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"\\(\\nu = \\sigma \\equiv 0\\) Bernstein function $$     \\psi{(x)}         = 1_{\\{ x > 0\\}} + b x ,             \\quad x \\geq 0 , $$ see ConstantBernsteinFunction LinearBernsteinFunction.","code":""},{"path":"/reference/rpextmo.html","id":"poisson-family","dir":"Reference","previous_headings":"","what":"Poisson family","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"\\(\\eta > 0\\), Bernstein function $$     \\psi{(x)}         = 1_{\\{ x > 0\\}} + b x + \\gamma \\cdot {[1 - e^{-\\eta x}]},             \\quad x \\geq 0 , $$ Lévy measure $$     \\nu{(\\mathrm{d}u)}         = \\delta_{\\{ \\eta \\}}{(\\mathrm{d}u)} , $$ see PoissonBernsteinFunction.","code":""},{"path":"/reference/rpextmo.html","id":"pareto-family","dir":"Reference","previous_headings":"","what":"Pareto family","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"\\(\\eta \\\\mathbb{R}^2\\) \\(\\eta_1 \\{(0, 1)}, \\eta_2 > 0\\) Lévy measure $$     \\nu{(\\mathrm{d}u)}         = \\eta_{1} \\eta_{2}^{\\eta_{1}} \\cdot u^{-\\eta_{1}-1}  1_{\\{ u > \\eta_{2}\\}} \\mathrm{d}u , $$ see ParetoBernsteinFunction.","code":""},{"path":"/reference/rpextmo.html","id":"exponential-family","dir":"Reference","previous_headings":"","what":"Exponential family","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"\\(\\eta > 0\\), Bernstein function $$     \\psi{(x)}         = 1_{\\{ x > 0\\}} + b x + \\gamma \\cdot \\frac{x}{x + \\eta} ,             \\quad x \\geq 0 , $$ Lévy measure $$     \\nu{(\\mathrm{d}u)}         = \\eta e^{-\\eta u} \\mathrm{d}u , $$ Stieltjes measure $$     \\sigma{(\\mathrm{d}u)}         = \\delta_{\\{ \\eta \\}}{(\\mathrm{d}u)} , $$ see ExponentialBernsteinFunction.","code":""},{"path":"/reference/rpextmo.html","id":"-alpha-stable-family","dir":"Reference","previous_headings":"","what":"\\(\\alpha\\)-stable family","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"\\(\\eta \\{(0, 1)}\\), Bernstein function $$     \\psi{(x)}         = 1_{\\{ x > 0\\}} + b x + \\gamma \\cdot x^{\\eta} ,             \\quad x \\geq 0 , $$ Lévy measure, $$     \\nu{(\\mathrm{d}u)}         = \\frac{\\eta}{\\Gamma{(1 - \\eta)}} \\cdot u^{-\\eta-1} \\mathrm{d}u , $$ Stieljtes measure $$     \\sigma{(\\mathrm{d}u)}         = \\frac{\\sin{(\\eta \\pi)}}{\\pi} \\cdot u^{\\eta - 1} \\mathrm{d}u , $$ see AlphaStableBernsteinFunction.","code":""},{"path":"/reference/rpextmo.html","id":"inverse-gaussian-family","dir":"Reference","previous_headings":"","what":"Inverse-Gaussian family","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"\\(\\eta > 0\\), Bernstein function $$     \\psi{(x)}         = 1_{\\{ x > 0\\}} + b x + \\gamma \\cdot {\\left[ \\sqrt{2 x + \\eta^2} - \\eta \\right]},             \\quad x \\geq 0 , $$ Lévy measure $$     \\nu{(\\mathrm{d}u)}         = \\frac{1}{ \\sqrt{2 \\pi} } \\cdot             \\frac{ e^{-\\frac{1}{2} \\eta^2 u} }{ \\sqrt{u^3} } \\mathrm{d}u , $$ Stieltjes measure $$     \\sigma{(\\mathrm{d}u)}         = \\frac{\\sin{(\\pi / 2)}}{\\pi} \\cdot             \\frac{\\sqrt{2 u - \\eta^2}}{u} 1_{\\{ u > \\eta^2 / 2 \\}} \\mathrm{d}u , $$ see InverseGaussianBernsteinFunction.","code":""},{"path":"/reference/rpextmo.html","id":"gamma-family","dir":"Reference","previous_headings":"","what":"Gamma family","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"\\(\\eta > 0\\), Bernstein function $$     \\psi{(x)}         = 1_{\\{ x > 0\\}} + b x + \\gamma \\cdot \\log{\\left( 1 +  \\frac{x}{\\eta} \\right)} ,             \\quad x \\geq 0 , $$ Lévy measure $$     \\nu{(\\mathrm{d}u)}         = e^{-\\eta u} u^{-1} \\mathrm{d}u , $$ Stieljtes measure $$     \\sigma{(\\mathrm{d}u)}         = u^{-1} 1_{\\{ u > \\eta \\}} \\mathrm{d}u , $$ see GammaBernsteinFunction.","code":""},{"path":[]},{"path":"/reference/rpextmo.html","id":"exchangeable-marshall-olkin-simulation-algorithms","dir":"Reference","previous_headings":"","what":"Exchangeable Marshall–Olkin simulation algorithms","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"MDCM, , ESM simulation algorithms exchangeable Marshall–Olkin distribution can used. , corresponding Bernstein function passed rextmo(). exception ESM Armageddon family uses optimized version considering finite shock-times.","code":""},{"path":"/reference/rpextmo.html","id":"l-vy-frailty-simulation-algorithms","dir":"Reference","previous_headings":"","what":"Lévy-frailty simulation algorithms","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"Lévy-frailty model simulates elements random vector first-hitting times compound Poisson subordinator \\(\\Lambda\\) sets \\((E_i, \\infty)\\) iid unit exponential random variables. , subordinator linear combination pure-drift subordinator, pure-killing subordinator, pure-jump compound Poisson subordinator, .e. $$    \\Lambda_{t}        = \\infty \\cdot 1_{\\{ \\epsilon > t \\}} + b t + \\sum_{j=1}^{N_{\\gamma t}} X_{j} ,            \\quad t \\geq 0, $$ \\(\\epsilon\\) unit exponential rv, n Poisson process, \\(X_{1}, X_{2}, \\ldots\\) iid jumps corresponding jump distribution, see (see pp. 140 psqq. Mai Scherer 2017) .","code":""},{"path":"/reference/rpextmo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"Mai J, Scherer M (2017). Simulating copulas: stochastic models, sampling algorithms applications,  Series Quantitative Finance, 2 edition. World Scientific. doi:10.1142/10265 .","code":""},{"path":[]},{"path":"/reference/rpextmo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from parametrized extendible MO distributions — rpextmo","text":"","code":"## Armageddon rpextmo(10, 3, a = 0.2, b = 0.5) #>            [,1]       [,2]      [,3] #>  [1,] 0.9387302 2.57176905 1.8507609 #>  [2,] 0.4970415 0.49704147 0.4970415 #>  [3,] 4.8187065 1.54165284 1.1057476 #>  [4,] 0.2367109 0.06832267 1.0284184 #>  [5,] 1.0337250 6.12880120 3.4935591 #>  [6,] 1.4501241 5.05414061 1.6419297 #>  [7,] 0.2879831 3.54186130 2.3309389 #>  [8,] 4.2264552 5.84806080 0.9852624 #>  [9,] 0.9863754 0.75603783 1.1002419 #> [10,] 0.8579073 2.25792673 0.1442562 ## comonotone rpextmo(10, 3, a = 1) #>             [,1]       [,2]       [,3] #>  [1,] 4.50612121 4.50612121 4.50612121 #>  [2,] 1.93352277 1.93352277 1.93352277 #>  [3,] 2.42425812 2.42425812 2.42425812 #>  [4,] 0.09541686 0.09541686 0.09541686 #>  [5,] 0.94802249 0.94802249 0.94802249 #>  [6,] 0.45901359 0.45901359 0.45901359 #>  [7,] 1.19224084 1.19224084 1.19224084 #>  [8,] 1.53621527 1.53621527 1.53621527 #>  [9,] 0.23956826 0.23956826 0.23956826 #> [10,] 1.11208536 1.11208536 1.11208536 ## independence rpextmo(10, 3, b = 1) #>             [,1]       [,2]      [,3] #>  [1,] 0.18863155 0.03615898 0.2237412 #>  [2,] 0.55558971 0.47571315 1.4669308 #>  [3,] 0.01910137 0.06931077 1.0490142 #>  [4,] 0.15593392 0.25170913 0.4956804 #>  [5,] 1.94357654 4.39896728 0.6802749 #>  [6,] 1.35312717 0.62122770 1.9162499 #>  [7,] 0.49235817 1.19030782 2.7489923 #>  [8,] 2.60468999 0.74902607 0.2576092 #>  [9,] 0.53799220 0.37950259 1.2924421 #> [10,] 0.25455231 0.93246184 0.4463176  rpextmo(10, 3, a = 0.2, b = 0.5, method = \"ESM\") #>             [,1]       [,2]      [,3] #>  [1,] 1.01150934 4.18653715 2.8454737 #>  [2,] 1.66275422 2.28670391 0.1664680 #>  [3,] 0.44895226 1.34064826 5.6594023 #>  [4,] 0.66863493 0.45134481 0.6686349 #>  [5,] 0.30191644 0.27774080 4.2453506 #>  [6,] 1.02662171 0.07773814 0.9221033 #>  [7,] 3.05408037 0.82816663 0.6068075 #>  [8,] 0.03623071 2.55101392 0.3418486 #>  [9,] 0.36202571 2.97526778 2.9752678 #> [10,] 0.80035762 1.91475104 0.8278428 ## comonotone rpextmo(10, 3, a = 1, method = \"ESM\") #>            [,1]      [,2]      [,3] #>  [1,] 0.2921870 0.2921870 0.2921870 #>  [2,] 0.2756261 0.2756261 0.2756261 #>  [3,] 1.8896550 1.8896550 1.8896550 #>  [4,] 0.6327416 0.6327416 0.6327416 #>  [5,] 2.0692155 2.0692155 2.0692155 #>  [6,] 0.3262571 0.3262571 0.3262571 #>  [7,] 0.6347321 0.6347321 0.6347321 #>  [8,] 1.4727558 1.4727558 1.4727558 #>  [9,] 0.7801704 0.7801704 0.7801704 #> [10,] 0.9266221 0.9266221 0.9266221 ## independence rpextmo(10, 3, b = 1, method = \"ESM\") #>             [,1]      [,2]      [,3] #>  [1,] 4.15759595 2.1840381 0.2640941 #>  [2,] 0.15871330 0.7021799 0.7956672 #>  [3,] 0.75994654 0.2878108 1.3497126 #>  [4,] 0.52027151 1.0394646 0.5737331 #>  [5,] 1.04813608 0.7750283 1.4219898 #>  [6,] 0.35554708 0.7543779 1.7240723 #>  [7,] 1.24615605 1.0037212 0.3597527 #>  [8,] 0.67898817 0.3534365 0.1590034 #>  [9,] 0.02039482 0.1826208 0.5099151 #> [10,] 1.19758795 0.6501104 0.4289677  rpextmo(10, 3, a = 0.2, b = 0.5, method = \"LFM\") #>            [,1]       [,2]      [,3] #>  [1,] 0.7014144 1.13420359 1.1342036 #>  [2,] 4.2986142 0.36077498 1.2006161 #>  [3,] 1.7024292 1.37543446 1.7024292 #>  [4,] 2.1002042 0.28951869 0.5254545 #>  [5,] 0.4944705 0.20553491 0.6984827 #>  [6,] 2.0115537 1.49008957 0.3097904 #>  [7,] 0.5353819 0.05700866 0.8425456 #>  [8,] 0.3370524 0.10350657 1.7154394 #>  [9,] 1.8033688 2.59182340 3.4013633 #> [10,] 0.5711427 0.31665802 0.5366644 ## comonotone rpextmo(10, 3, a = 1, method = \"LFM\") #>             [,1]       [,2]       [,3] #>  [1,] 0.34659237 0.34659237 0.34659237 #>  [2,] 0.01190017 0.01190017 0.01190017 #>  [3,] 0.84628370 0.84628370 0.84628370 #>  [4,] 0.91307697 0.91307697 0.91307697 #>  [5,] 0.95091934 0.95091934 0.95091934 #>  [6,] 2.59460836 2.59460836 2.59460836 #>  [7,] 0.30104212 0.30104212 0.30104212 #>  [8,] 0.77408975 0.77408975 0.77408975 #>  [9,] 1.29796424 1.29796424 1.29796424 #> [10,] 1.00756307 1.00756307 1.00756307 ## independence rpextmo(10, 3, b = 1, method = \"LFM\") #>            [,1]       [,2]       [,3] #>  [1,] 1.0714249 2.16124929 0.06245639 #>  [2,] 1.1743722 1.41806395 0.47385178 #>  [3,] 0.6777618 0.42520862 2.78224402 #>  [4,] 0.3477036 2.52843727 0.15300394 #>  [5,] 2.0017847 0.78645377 1.42997357 #>  [6,] 0.1304996 0.21722126 0.28744116 #>  [7,] 1.0512698 0.39139502 0.85469516 #>  [8,] 0.2638505 1.61623963 0.91122819 #>  [9,] 0.4117026 0.14591273 1.65593503 #> [10,] 0.2227447 0.02859994 1.48497543  rpextmo(10, 3, a = 0.2, b = 0.5, method = \"MDCM\") #>             [,1]       [,2]       [,3] #>  [1,] 0.44142517 0.12975936 0.44142517 #>  [2,] 7.86703054 1.52660488 2.32517362 #>  [3,] 0.05111554 0.04604049 1.96836449 #>  [4,] 1.35084121 0.99107807 1.35084121 #>  [5,] 0.04485732 2.56958371 0.81127310 #>  [6,] 0.19105456 0.32502432 2.26293087 #>  [7,] 4.99323168 0.54315786 1.36785943 #>  [8,] 4.08582831 0.95258466 3.77573973 #>  [9,] 0.00191538 0.00191538 0.00191538 #> [10,] 0.09009717 0.49711686 0.42142473 ## comonotone rpextmo(10, 3, a = 1, method = \"MDCM\") #>             [,1]       [,2]       [,3] #>  [1,] 0.08480294 0.08480294 0.08480294 #>  [2,] 4.08410737 4.08410737 4.08410737 #>  [3,] 0.57369494 0.57369494 0.57369494 #>  [4,] 2.46475054 2.46475054 2.46475054 #>  [5,] 0.46151525 0.46151525 0.46151525 #>  [6,] 0.07381092 0.07381092 0.07381092 #>  [7,] 0.84999860 0.84999860 0.84999860 #>  [8,] 0.70570388 0.70570388 0.70570388 #>  [9,] 0.50111500 0.50111500 0.50111500 #> [10,] 0.15569163 0.15569163 0.15569163 ## independence rpextmo(10, 3, b = 1, method = \"MDCM\") #>            [,1]      [,2]       [,3] #>  [1,] 4.0903985 1.7746166 0.28842721 #>  [2,] 0.2318448 0.9626988 0.11254017 #>  [3,] 0.5955988 0.5096592 2.38006749 #>  [4,] 0.8232776 2.2667041 0.22222859 #>  [5,] 0.5359287 1.3220249 1.61512831 #>  [6,] 0.7956634 0.1551256 1.10506270 #>  [7,] 0.1240952 1.3328285 3.55063440 #>  [8,] 1.6154421 2.6976921 0.75728618 #>  [9,] 1.4874954 1.5078029 0.70356501 #> [10,] 0.7137028 1.1319874 0.02193812  rpextmo(10, 3, a = 0.2, b = 0.5, method = \"AM\") #>            [,1]      [,2]      [,3] #>  [1,] 1.8908777 0.9037603 2.4094709 #>  [2,] 1.2838753 1.8057043 0.5067451 #>  [3,] 0.6732719 2.6733685 0.4102813 #>  [4,] 0.4212726 1.0294178 0.5464502 #>  [5,] 4.7839104 0.3387259 4.7839104 #>  [6,] 0.9066169 2.1117348 0.5050414 #>  [7,] 0.6983780 7.0443212 3.3891895 #>  [8,] 2.0664991 0.9751298 3.3854565 #>  [9,] 0.4916294 0.4916294 0.4916294 #> [10,] 0.7563439 0.6959187 1.4456366 ## comonotone rpextmo(10, 3, a = 1, method = \"AM\") #>             [,1]       [,2]       [,3] #>  [1,] 3.88637803 3.88637803 3.88637803 #>  [2,] 0.85558752 0.85558752 0.85558752 #>  [3,] 0.11400864 0.11400864 0.11400864 #>  [4,] 0.04721669 0.04721669 0.04721669 #>  [5,] 0.20321540 0.20321540 0.20321540 #>  [6,] 0.96243207 0.96243207 0.96243207 #>  [7,] 0.53041850 0.53041850 0.53041850 #>  [8,] 1.63996172 1.63996172 1.63996172 #>  [9,] 0.93846487 0.93846487 0.93846487 #> [10,] 0.23624701 0.23624701 0.23624701 ## independence rpextmo(10, 3, b = 1, method = \"AM\") #>              [,1]        [,2]      [,3] #>  [1,] 4.178693392 0.239755166 0.7881172 #>  [2,] 0.008487075 0.944684474 0.1101266 #>  [3,] 0.065292579 0.075850802 2.3456796 #>  [4,] 0.411777194 0.040444640 0.9154839 #>  [5,] 1.655087435 0.609656062 0.9199193 #>  [6,] 1.937063301 0.003258475 0.9606196 #>  [7,] 0.456398542 0.348352248 1.8847903 #>  [8,] 0.301398922 2.829639327 1.2564102 #>  [9,] 0.510379705 0.348945639 0.9095684 #> [10,] 1.093342915 0.354145045 3.8922550  rpextmo(10, 3, a = 0.2, b = 0.5, family = \"Armageddon\") #>             [,1]       [,2]       [,3] #>  [1,] 0.93106503 0.87587972 0.93106503 #>  [2,] 1.95722224 1.00035069 0.51236050 #>  [3,] 2.31224346 1.77243953 0.84244035 #>  [4,] 2.07314216 1.65358587 0.29529819 #>  [5,] 0.50881597 0.40407364 1.11580892 #>  [6,] 0.14415053 0.14415053 0.14415053 #>  [7,] 0.03014978 0.03014978 0.03014978 #>  [8,] 2.95375930 8.17210979 1.10715747 #>  [9,] 0.85783950 0.88832443 0.95190288 #> [10,] 0.08890594 5.16287761 1.94081963 ## comonotone rpextmo(10, 3, a = 1, family = \"Armageddon\") #>            [,1]      [,2]      [,3] #>  [1,] 0.5976265 0.5976265 0.5976265 #>  [2,] 0.8563056 0.8563056 0.8563056 #>  [3,] 0.6497184 0.6497184 0.6497184 #>  [4,] 0.9068048 0.9068048 0.9068048 #>  [5,] 1.6822739 1.6822739 1.6822739 #>  [6,] 4.0919218 4.0919218 4.0919218 #>  [7,] 0.7952500 0.7952500 0.7952500 #>  [8,] 2.5270249 2.5270249 2.5270249 #>  [9,] 0.2000703 0.2000703 0.2000703 #> [10,] 0.1500828 0.1500828 0.1500828 ## independence rpextmo(10, 3, b = 1, family = \"Armageddon\") #>            [,1]        [,2]       [,3] #>  [1,] 0.2630273 0.196275313 0.23530050 #>  [2,] 1.5317777 1.689706983 0.28928202 #>  [3,] 1.5324238 2.248748893 0.66594211 #>  [4,] 0.1235717 0.043351731 0.66587020 #>  [5,] 0.1592813 1.922657261 1.00155160 #>  [6,] 0.9825633 0.905007526 2.47826513 #>  [7,] 0.3940454 0.260103367 2.56610011 #>  [8,] 0.4561724 0.375000057 2.32806449 #>  [9,] 1.4491474 0.344895941 0.10114377 #> [10,] 0.6132083 0.002268274 0.01185685  rpextmo(     10, 3,     a = 0.2, b = 0.5,     family = \"Armageddon\",     method = \"ESM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 0.9401966 0.7148115 0.9401966 #>  [2,] 2.8980760 1.3825871 2.5394666 #>  [3,] 4.7992262 0.1111968 1.6199174 #>  [4,] 2.9941331 1.6245411 0.2384354 #>  [5,] 3.3234908 0.3944563 4.4665410 #>  [6,] 1.6758341 1.6758341 1.1978162 #>  [7,] 0.4756780 0.4756780 0.4756780 #>  [8,] 1.4207541 1.4777511 2.9197583 #>  [9,] 0.7326715 0.5292544 4.3262478 #> [10,] 3.6035337 1.3023472 0.2153714 ## comonotone rpextmo(     10, 3,     a = 1,     family = \"Armageddon\",     method = \"ESM\" ) #>               [,1]         [,2]         [,3] #>  [1,] 0.0008280394 0.0008280394 0.0008280394 #>  [2,] 0.4125790303 0.4125790303 0.4125790303 #>  [3,] 2.5937403607 2.5937403607 2.5937403607 #>  [4,] 0.2377665434 0.2377665434 0.2377665434 #>  [5,] 0.6021442846 0.6021442846 0.6021442846 #>  [6,] 0.1492228612 0.1492228612 0.1492228612 #>  [7,] 0.4943139376 0.4943139376 0.4943139376 #>  [8,] 0.1500877765 0.1500877765 0.1500877765 #>  [9,] 0.4382753870 0.4382753870 0.4382753870 #> [10,] 0.7400305084 0.7400305084 0.7400305084 ## independence rpextmo(     10, 3,     b = 1,     family = \"Armageddon\",     method = \"ESM\" ) #>             [,1]      [,2]      [,3] #>  [1,] 0.99032185 0.7027152 1.0211805 #>  [2,] 1.08110815 1.5247945 3.0315402 #>  [3,] 0.01072056 1.1405908 2.7109947 #>  [4,] 2.52450052 1.0646155 0.9453594 #>  [5,] 1.59775426 2.8903608 0.1237210 #>  [6,] 1.03050871 0.3599957 0.4195047 #>  [7,] 0.43093590 1.8708427 1.5726718 #>  [8,] 0.28898572 1.9749357 1.1856840 #>  [9,] 2.25355670 0.6930438 7.8176636 #> [10,] 1.92784855 1.1425821 0.9503838  rpextmo(     10, 3,     a = 0.2, b = 0.5,     family = \"Armageddon\",     method = \"LFM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 1.4212584 1.1597065 0.2209875 #>  [2,] 0.6294976 1.4982526 0.6098567 #>  [3,] 0.7464464 1.7002670 1.4311225 #>  [4,] 1.3394013 0.2202860 2.7074685 #>  [5,] 2.4967068 1.1401622 0.4288468 #>  [6,] 2.2899630 1.4561915 2.2899630 #>  [7,] 3.4089937 0.1307988 0.8765990 #>  [8,] 0.9291411 0.9291411 0.2907726 #>  [9,] 2.1241549 1.3745911 1.7607411 #> [10,] 1.5044824 2.2606187 2.0903361 ## comonotone rpextmo(     10, 3,     a = 1,     family = \"Armageddon\",     method = \"LFM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 0.3642267 0.3642267 0.3642267 #>  [2,] 1.8284538 1.8284538 1.8284538 #>  [3,] 2.0065692 2.0065692 2.0065692 #>  [4,] 1.9430641 1.9430641 1.9430641 #>  [5,] 2.2484413 2.2484413 2.2484413 #>  [6,] 1.5166018 1.5166018 1.5166018 #>  [7,] 2.4277599 2.4277599 2.4277599 #>  [8,] 0.4181192 0.4181192 0.4181192 #>  [9,] 1.3044519 1.3044519 1.3044519 #> [10,] 1.4085973 1.4085973 1.4085973 ## independence rpextmo(     10, 3,     b = 1,     family = \"Armageddon\",     method = \"LFM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 0.8427077 0.8486622 0.3200242 #>  [2,] 1.2618036 0.7336840 0.3144376 #>  [3,] 0.1404810 0.9746551 1.3523196 #>  [4,] 0.5080712 0.6535140 0.4285994 #>  [5,] 0.9828397 1.2911084 1.2400992 #>  [6,] 1.3666574 0.2646425 5.0925437 #>  [7,] 2.2895803 0.3106342 0.9428243 #>  [8,] 0.9143969 2.6514594 0.6323722 #>  [9,] 0.3425485 0.1133844 3.6359353 #> [10,] 1.5700428 1.8627147 1.2317471  rpextmo(     10, 3,     a = 0.2, b = 0.5,     family = \"Armageddon\",     method = \"MDCM\" ) #>             [,1]       [,2]      [,3] #>  [1,] 3.09731498 1.92952118 3.0973150 #>  [2,] 1.15790203 0.13290376 1.9960095 #>  [3,] 0.63018103 0.06305931 0.3383326 #>  [4,] 1.11638310 0.45479280 0.4967439 #>  [5,] 0.26924836 4.84530521 1.7420737 #>  [6,] 0.08605508 2.89050194 4.3965360 #>  [7,] 0.90544220 0.74801323 0.5909158 #>  [8,] 1.31425030 1.26819981 1.3142503 #>  [9,] 0.76041297 0.24298033 0.9506319 #> [10,] 1.17897447 0.31564933 2.7984148 ## comonotone rpextmo(     10, 3,     a = 1,     family = \"Armageddon\",     method = \"MDCM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.57624600 0.57624600 0.57624600 #>  [2,] 2.46662679 2.46662679 2.46662679 #>  [3,] 1.06962405 1.06962405 1.06962405 #>  [4,] 0.09698185 0.09698185 0.09698185 #>  [5,] 0.73648798 0.73648798 0.73648798 #>  [6,] 0.09242687 0.09242687 0.09242687 #>  [7,] 1.14441689 1.14441689 1.14441689 #>  [8,] 1.02589623 1.02589623 1.02589623 #>  [9,] 3.30237507 3.30237507 3.30237507 #> [10,] 0.30000450 0.30000450 0.30000450 ## independence rpextmo(     10, 3,     b = 1,     family = \"Armageddon\",     method = \"MDCM\" ) #>             [,1]      [,2]       [,3] #>  [1,] 0.16389822 0.5855730 0.03958048 #>  [2,] 0.11120857 0.3263699 0.12411323 #>  [3,] 3.99643423 0.9671963 1.50741853 #>  [4,] 1.72775463 0.3089088 0.33244346 #>  [5,] 0.09575745 0.4223514 1.30986508 #>  [6,] 0.49581687 2.1474846 1.53286548 #>  [7,] 0.18870379 0.5948257 0.24375015 #>  [8,] 0.48119963 2.1255151 2.40478935 #>  [9,] 3.30821077 0.5511228 0.15271091 #> [10,] 1.32785730 0.2799659 1.25609952  rpextmo(     10, 3,     a = 0.2, b = 0.5,     family = \"Armageddon\",     method = \"AM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 1.25645457 1.17117857 3.35544528 #>  [2,] 1.06794697 1.06794697 1.06794697 #>  [3,] 0.89374463 1.40322163 1.40322163 #>  [4,] 0.26103580 0.26103580 0.26103580 #>  [5,] 0.71859197 0.62165150 3.89423901 #>  [6,] 0.08649624 0.08649624 0.08649624 #>  [7,] 0.35168902 0.35168902 0.35168902 #>  [8,] 0.29890240 0.29890240 0.29890240 #>  [9,] 0.16430712 1.93675275 0.23022627 #> [10,] 0.13924895 0.20357050 2.45915245 ## comonotone rpextmo(     10, 3,     a = 1,     family = \"Armageddon\",     method = \"AM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 0.7028032 0.7028032 0.7028032 #>  [2,] 1.4240266 1.4240266 1.4240266 #>  [3,] 3.4946978 3.4946978 3.4946978 #>  [4,] 2.2557155 2.2557155 2.2557155 #>  [5,] 0.9000986 0.9000986 0.9000986 #>  [6,] 0.0111608 0.0111608 0.0111608 #>  [7,] 0.6503234 0.6503234 0.6503234 #>  [8,] 0.2365831 0.2365831 0.2365831 #>  [9,] 0.3503832 0.3503832 0.3503832 #> [10,] 0.6175198 0.6175198 0.6175198 ## independence rpextmo(     10, 3,     b = 1,     family = \"Armageddon\",     method = \"AM\" ) #>             [,1]      [,2]       [,3] #>  [1,] 0.19813862 0.2343487 0.83035015 #>  [2,] 0.83935345 0.6011946 0.93092538 #>  [3,] 2.36507061 0.2327009 0.25756946 #>  [4,] 0.86218876 0.5101125 1.49342769 #>  [5,] 0.42025469 0.1434152 0.06911597 #>  [6,] 0.10566201 0.2510737 1.87955682 #>  [7,] 0.01548297 1.1438603 0.45977081 #>  [8,] 1.17390255 0.3524189 0.37580066 #>  [9,] 1.29925780 0.9228249 1.21704532 #> [10,] 1.09070810 0.1844003 0.11391844  ## Poisson rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Poisson\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.03790535 0.03790535 0.18290395 #>  [2,] 0.10871372 0.32829956 0.10871372 #>  [3,] 1.14118382 0.15435840 0.06358779 #>  [4,] 0.20596735 0.20596735 1.68217846 #>  [5,] 0.03151825 0.56487840 0.03151825 #>  [6,] 0.32251956 0.16378921 0.66913740 #>  [7,] 0.04375132 0.27428345 0.23786479 #>  [8,] 0.13072123 0.00758630 0.13072123 #>  [9,] 0.49997419 0.59435143 0.85484896 #> [10,] 0.19006911 1.01923283 0.19006911 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Poisson\",     method = \"ESM\" ) #>             [,1]      [,2]      [,3] #>  [1,] 0.77875811 0.3022610 0.7787581 #>  [2,] 0.51397131 0.2652324 0.2268991 #>  [3,] 0.88836829 1.2167707 0.3174749 #>  [4,] 0.94389713 0.3947427 3.9163856 #>  [5,] 0.33635783 0.1758587 0.4592758 #>  [6,] 0.32888374 0.3288837 0.0225250 #>  [7,] 0.50885157 0.1126562 0.4401287 #>  [8,] 0.30100763 0.6426618 0.9357586 #>  [9,] 0.55795371 0.6068626 0.6068626 #> [10,] 0.04232404 0.2533435 0.8331086 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Poisson\",     method = \"LFM\" ) #>            [,1]      [,2]      [,3] #>  [1,] 0.2006806 0.5581613 0.1325488 #>  [2,] 0.2681347 0.2681347 0.3771432 #>  [3,] 0.2915479 0.9293930 2.1320527 #>  [4,] 0.2166793 0.5155152 0.5155152 #>  [5,] 0.1824681 0.2835562 1.1920650 #>  [6,] 0.1567817 0.1567817 0.1146660 #>  [7,] 0.4104546 1.2253513 0.4104546 #>  [8,] 1.4463546 0.1011086 1.4463546 #>  [9,] 1.4453152 0.6214032 1.4453152 #> [10,] 1.5014303 0.4820175 0.5452508 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Poisson\",     method = \"MDCM\" ) #>            [,1]      [,2]       [,3] #>  [1,] 0.8241565 0.8241565 1.67405051 #>  [2,] 0.6574123 0.6574123 0.01319648 #>  [3,] 1.1323618 0.2234734 0.14457240 #>  [4,] 1.3641614 0.9567463 0.95674632 #>  [5,] 0.6493197 0.6493197 0.29458704 #>  [6,] 0.1166990 0.1166990 0.11669898 #>  [7,] 1.1979489 2.0384491 0.27761611 #>  [8,] 0.9676728 0.3846498 0.31478860 #>  [9,] 0.4285371 0.5497061 0.11379670 #> [10,] 0.6142190 1.0878721 0.07142166 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Poisson\",     method = \"AM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.31896874 1.69219301 0.31896874 #>  [2,] 0.36108063 0.36108063 0.36108063 #>  [3,] 0.48132187 0.72682966 0.65574090 #>  [4,] 0.05136044 0.05136044 0.05136044 #>  [5,] 0.69557451 0.27652618 0.18083528 #>  [6,] 0.02939202 0.48760545 0.90657942 #>  [7,] 0.38724253 0.38724253 1.85666581 #>  [8,] 0.26077729 0.09607896 0.46599857 #>  [9,] 1.08790138 0.39641371 1.23299105 #> [10,] 0.27290046 1.35954147 0.27290046  ## Pareto rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = c(0.5, 1e-4), family = \"Pareto\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.36856601 2.31127580 2.29017955 #>  [2,] 0.61862979 2.23169644 0.41765532 #>  [3,] 1.27814082 0.62313975 0.57054430 #>  [4,] 1.21900395 0.22271796 1.21900395 #>  [5,] 1.63224487 0.21278474 0.04934768 #>  [6,] 0.26907103 0.06872791 0.26907103 #>  [7,] 0.01752469 0.01752469 0.01752469 #>  [8,] 3.34082472 0.45995322 8.09705830 #>  [9,] 0.32554947 1.83208535 0.19610180 #> [10,] 0.33252241 0.33252241 0.33252241 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = c(0.5, 1e-4), family = \"Pareto\",     method = \"ESM\" ) #>            [,1]       [,2]      [,3] #>  [1,] 0.5190542 0.09501491 0.5620184 #>  [2,] 0.3814760 1.20454766 3.0895533 #>  [3,] 0.3275692 3.36888275 1.7277676 #>  [4,] 0.6319023 2.67704324 2.4253218 #>  [5,] 3.7361049 0.59100303 1.5213607 #>  [6,] 1.6947933 1.36929673 3.6837139 #>  [7,] 1.9491616 1.92097338 1.9491616 #>  [8,] 3.5954857 0.71773260 1.1367363 #>  [9,] 1.1470398 1.14703984 0.4169526 #> [10,] 0.2455533 0.26376563 0.2637656 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = c(0.5, 1e-4), family = \"Pareto\",     method = \"LFM\" ) #>              [,1]      [,2]      [,3] #>  [1,] 2.499399118 3.6169877 2.1072190 #>  [2,] 2.168706798 2.1687068 0.6637132 #>  [3,] 0.424566413 0.4245664 0.4245664 #>  [4,] 0.422381424 0.6538975 1.1571357 #>  [5,] 0.555550982 0.1153531 1.3654705 #>  [6,] 1.361647415 3.2294118 0.5281224 #>  [7,] 0.004229348 0.5909959 0.5909959 #>  [8,] 0.111270333 2.7602024 0.8561224 #>  [9,] 0.877275337 1.2151526 0.4773795 #> [10,] 0.364156607 1.5366971 3.5475359 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = c(0.5, 1e-4), family = \"Pareto\",     method = \"MDCM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.27359029 0.45275946 1.72758736 #>  [2,] 2.05820150 2.05820150 0.43894918 #>  [3,] 0.01681341 0.01681341 0.01681341 #>  [4,] 1.18172217 1.91624715 4.91947635 #>  [5,] 0.85670253 0.93927767 2.90204577 #>  [6,] 1.17849119 0.04759181 1.17849119 #>  [7,] 0.99977912 0.99977912 0.09969975 #>  [8,] 0.45843532 0.27731971 2.30828284 #>  [9,] 3.41465436 3.95951155 0.75030146 #> [10,] 3.05612110 1.74656457 0.82909268 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = c(0.5, 1e-4), family = \"Pareto\",     method = \"AM\" ) #>            [,1]       [,2]       [,3] #>  [1,] 1.6432507 0.20709483 2.66487959 #>  [2,] 3.1010247 0.33374326 0.77582309 #>  [3,] 2.1525387 0.50415665 2.54897053 #>  [4,] 2.5785608 1.46132561 2.28886560 #>  [5,] 1.0116086 0.04974407 1.90457322 #>  [6,] 0.8635255 4.06473762 0.84452088 #>  [7,] 1.7819580 1.39120543 0.06199704 #>  [8,] 2.2503659 7.37299317 1.52146918 #>  [9,] 0.8338128 0.79746618 2.00534608 #> [10,] 0.2881505 2.08883919 1.42172376  ## Exponential rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Exponential\" ) #>             [,1]        [,2]        [,3] #>  [1,] 1.91156783 1.364972254 4.091722385 #>  [2,] 0.05842473 0.306180375 0.306180375 #>  [3,] 0.19790041 0.074659131 0.074659131 #>  [4,] 0.39943217 0.021084873 0.021084873 #>  [5,] 0.17284736 0.069269389 0.356031458 #>  [6,] 1.31800449 0.930142607 0.353142628 #>  [7,] 0.98173650 0.981736498 0.285650152 #>  [8,] 1.79975141 1.440327675 1.440327675 #>  [9,] 3.06412172 0.007590366 0.006456905 #> [10,] 0.44044410 0.440444105 0.440444105 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Exponential\",     method = \"ESM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.13620193 0.13620193 0.11671709 #>  [2,] 1.06095859 1.06095859 1.06095859 #>  [3,] 0.89615671 0.29278103 0.29278103 #>  [4,] 0.17473655 0.17473655 0.17473655 #>  [5,] 0.06015478 0.06015478 0.06015478 #>  [6,] 0.04941305 0.04941305 0.04941305 #>  [7,] 0.23526622 0.23526622 0.23526622 #>  [8,] 0.62144121 0.61923767 0.61923767 #>  [9,] 1.08110985 1.08110985 1.08110985 #> [10,] 0.19496112 0.64581301 0.64581301 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Exponential\",     method = \"LFM\" ) #>            [,1]      [,2]        [,3] #>  [1,] 0.3920371 1.6756126 0.001248105 #>  [2,] 0.5958927 0.5958927 0.595892676 #>  [3,] 1.1742475 0.3212596 0.321259606 #>  [4,] 0.2551419 2.1379690 0.255141943 #>  [5,] 0.4077472 0.4077472 0.675785025 #>  [6,] 0.2445223 0.2445223 0.244522258 #>  [7,] 0.2800700 0.2800700 0.018276384 #>  [8,] 0.2322473 0.4116558 0.516009443 #>  [9,] 0.3531967 0.3531967 0.353196660 #> [10,] 0.0382379 0.1101226 0.437472919 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Exponential\",     method = \"MDCM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 1.12612873 0.01403341 1.12612873 #>  [2,] 1.09437447 0.96122787 1.09437447 #>  [3,] 0.05942810 0.17711557 0.17711557 #>  [4,] 0.27494034 0.27494034 0.19292631 #>  [5,] 0.57490032 0.57490032 0.57490032 #>  [6,] 0.05103869 0.05103869 0.05103869 #>  [7,] 1.43732342 1.37104903 1.43732342 #>  [8,] 0.28944985 0.47611755 1.65241262 #>  [9,] 0.32701941 0.32701941 0.32701941 #> [10,] 0.94673133 2.37384542 1.30493590 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Exponential\",     method = \"AM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.03032097 0.03032097 0.03032097 #>  [2,] 0.55920570 0.50041860 0.50041860 #>  [3,] 0.98527002 0.98527002 0.41911028 #>  [4,] 0.32581965 0.32581965 0.32581965 #>  [5,] 0.29839737 0.10321021 0.29839737 #>  [6,] 0.15084936 0.15084936 0.15084936 #>  [7,] 0.63366044 1.12979989 1.12979989 #>  [8,] 0.04602624 0.26409291 0.02251379 #>  [9,] 0.06798271 0.06798271 0.06798271 #> [10,] 0.58794456 0.66673407 0.66673407  ## Alpha-Stable rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"AlphaStable\" ) #>              [,1]        [,2]        [,3] #>  [1,] 0.265792619 0.265792619 1.351581422 #>  [2,] 1.348045675 0.418651724 0.136619968 #>  [3,] 1.188650862 0.036727479 0.876816345 #>  [4,] 0.019912010 0.019912010 0.019912010 #>  [5,] 0.803139033 0.407101204 0.422796778 #>  [6,] 0.009088993 0.009088993 0.009088993 #>  [7,] 0.530083654 0.072176599 0.030079779 #>  [8,] 0.332049678 0.332049678 0.332049678 #>  [9,] 0.171034887 0.171034887 0.171034887 #> [10,] 0.436381159 0.836601841 0.836601841 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"AlphaStable\",     method = \"ESM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.27475862 0.27475862 1.34071816 #>  [2,] 0.24535719 0.24535719 0.24535719 #>  [3,] 0.28932401 0.90524130 1.25069713 #>  [4,] 0.06584131 0.06584131 0.06584131 #>  [5,] 0.06595952 0.22165691 0.13452045 #>  [6,] 0.53144004 0.28723000 0.28723000 #>  [7,] 0.95056217 0.08387134 0.12607452 #>  [8,] 1.68628715 1.64324369 1.68628715 #>  [9,] 0.40354529 0.37855363 0.40354529 #> [10,] 0.66272980 0.08894683 0.34627086 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"AlphaStable\",     method = \"MDCM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.06937172 0.28126061 0.17934031 #>  [2,] 0.35796759 0.35796759 0.25837202 #>  [3,] 0.04133449 0.44686638 0.49236698 #>  [4,] 1.03838297 0.56255924 1.03838297 #>  [5,] 0.29304305 0.29304305 1.35322299 #>  [6,] 0.44009733 0.67707128 1.38150360 #>  [7,] 0.86038491 1.85922585 0.64185890 #>  [8,] 0.41839629 0.31359310 0.15093032 #>  [9,] 0.39803963 2.09382218 0.48991762 #> [10,] 0.01842769 0.03953839 0.01842769 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"AlphaStable\",     method = \"AM\" ) #>             [,1]       [,2]        [,3] #>  [1,] 0.24039881 1.09795491 0.126985363 #>  [2,] 0.69533697 0.28479205 0.002850727 #>  [3,] 0.01187807 0.01187807 0.765389873 #>  [4,] 0.60869318 0.04652949 0.121720840 #>  [5,] 0.08460993 0.34894994 0.012036672 #>  [6,] 0.15587809 0.27679413 0.276794128 #>  [7,] 0.31282894 0.51349479 0.513494793 #>  [8,] 0.54773058 0.54773058 0.040756893 #>  [9,] 0.27878725 0.27878725 0.278787247 #> [10,] 0.16375497 0.92602438 0.388403920  ## Inverse Gaussian rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"InverseGaussian\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.25813708 0.25813708 0.02149860 #>  [2,] 0.79072409 0.51592255 0.94843486 #>  [3,] 0.93074986 0.88758797 1.00348203 #>  [4,] 1.29718977 0.28614303 1.29718977 #>  [5,] 0.46774500 0.02499206 0.36446936 #>  [6,] 0.12873068 0.12873068 0.12873068 #>  [7,] 0.50913592 0.50913592 0.50913592 #>  [8,] 0.57634547 0.03707534 0.57634547 #>  [9,] 0.60017353 0.45631576 1.68605699 #> [10,] 0.07747135 0.03897418 0.07747135 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"InverseGaussian\",     method = \"ESM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.08008936 0.90855706 0.18450218 #>  [2,] 0.51090973 0.51090973 0.44899186 #>  [3,] 0.29034832 0.36979601 0.36979601 #>  [4,] 1.22683631 0.35409125 0.35409125 #>  [5,] 0.49045143 0.11283256 0.42967079 #>  [6,] 0.12052690 0.01894284 0.12052690 #>  [7,] 0.44701027 0.58048620 0.40665384 #>  [8,] 0.41492441 0.64225961 0.17344886 #>  [9,] 0.03217132 0.03217132 0.03217132 #> [10,] 0.11702252 0.11702252 0.11483417 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"InverseGaussian\",     method = \"MDCM\" ) #>             [,1]       [,2]      [,3] #>  [1,] 0.26919869 0.32071101 0.3154921 #>  [2,] 0.25146080 0.22545580 0.2943336 #>  [3,] 0.13151968 0.33284309 0.3328431 #>  [4,] 0.27438929 0.26473898 0.3620829 #>  [5,] 0.56997135 0.51053000 0.9301541 #>  [6,] 0.21329309 0.21329309 0.1457580 #>  [7,] 1.16907722 0.02389626 0.1431273 #>  [8,] 0.04664882 0.04664882 1.0532560 #>  [9,] 0.65542994 0.66317117 0.6554299 #> [10,] 0.53123469 0.17020274 0.5312347 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"InverseGaussian\",     method = \"AM\" ) #>              [,1]       [,2]       [,3] #>  [1,] 0.829619531 0.07743634 0.62166882 #>  [2,] 0.400503809 0.15750826 0.40050381 #>  [3,] 1.856589924 0.59019045 0.13573879 #>  [4,] 0.408242346 0.40824235 0.01190570 #>  [5,] 0.680509067 0.69341307 1.00149674 #>  [6,] 0.344762580 0.10588599 0.34476258 #>  [7,] 0.002180543 0.06777949 0.26972662 #>  [8,] 0.503118320 0.50311832 0.50311832 #>  [9,] 0.096171862 0.45895202 0.03149253 #> [10,] 0.490215547 0.20089518 0.47128181  ## Gamma rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Gamma\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.03039095 0.03039095 0.34837888 #>  [2,] 0.56353549 0.67199317 0.12472683 #>  [3,] 0.20089575 0.02812678 0.02812678 #>  [4,] 0.39817247 0.48688907 0.39817247 #>  [5,] 1.21890663 0.50260294 0.50260294 #>  [6,] 0.43158634 0.77045785 0.10162315 #>  [7,] 0.53236423 0.53236423 0.53236423 #>  [8,] 0.21397726 0.24509917 0.24509917 #>  [9,] 0.15685562 0.04507333 1.23862867 #> [10,] 0.25834928 0.55049357 0.25834928 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Gamma\",     method = \"ESM\" ) #>             [,1]      [,2]      [,3] #>  [1,] 1.62169291 0.9503756 0.3635764 #>  [2,] 0.34897275 0.4678790 0.4678790 #>  [3,] 0.69270892 0.7664173 0.3607099 #>  [4,] 0.22611400 0.3490195 0.3490195 #>  [5,] 0.36057846 0.6965301 1.2177893 #>  [6,] 0.02044016 0.5505587 0.5505587 #>  [7,] 0.39327520 0.4027406 0.7140072 #>  [8,] 0.03434657 0.1131959 0.1131959 #>  [9,] 0.82492716 0.6985204 0.5552797 #> [10,] 0.30650569 0.3065057 0.3065057 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Gamma\",     method = \"MDCM\" ) #>             [,1]        [,2]        [,3] #>  [1,] 0.21719436 0.007726223 0.007726223 #>  [2,] 0.04012457 0.040124568 0.040124568 #>  [3,] 0.08433673 0.275641180 2.234965413 #>  [4,] 0.68401182 0.908069633 0.542326118 #>  [5,] 0.19481647 0.194816469 0.173135540 #>  [6,] 0.06970305 0.069703052 0.301907371 #>  [7,] 0.11613911 0.024295385 0.226144244 #>  [8,] 0.31177293 1.124362830 0.359679946 #>  [9,] 0.60183873 0.601838732 0.601838732 #> [10,] 0.14162478 0.141624778 0.061764479 rpextmo(     10, 3,     a = 0.2, b = 0.5, gamma = 2,     eta = 0.5, family = \"Gamma\",     method = \"AM\" ) #>             [,1]       [,2]       [,3] #>  [1,] 0.03144116 0.05566957 0.05566957 #>  [2,] 0.03263889 0.14236387 0.85689295 #>  [3,] 0.07855835 0.85506522 0.11675326 #>  [4,] 0.27418868 0.27418868 0.31139605 #>  [5,] 0.05698188 0.05698188 0.01990472 #>  [6,] 0.38907933 0.38907933 0.38907933 #>  [7,] 0.02716187 0.72248584 0.26395161 #>  [8,] 0.11476529 0.11476529 0.03329045 #>  [9,] 0.60397461 0.60397461 0.60397461 #> [10,] 0.18150352 0.58383504 0.79250095"},{"path":"/news/index.html","id":"rmo-083","dir":"Changelog","previous_headings":"","what":"rmo 0.8.3","title":"rmo 0.8.3","text":"Add ConvexCombinationOfBernsteinFunctions represent convex combinations Bernstein functions compactly.","code":""},{"path":"/news/index.html","id":"rmo-082","dir":"Changelog","previous_headings":"","what":"rmo 0.8.2","title":"rmo 0.8.2","text":"bump version","code":""},{"path":"/news/index.html","id":"rmo-081","dir":"Changelog","previous_headings":"","what":"rmo 0.8.1","title":"rmo 0.8.1","text":"Small changes documentation Improvement exIntensities Allow n = 0 sampling algorithms (e.g. measure setup time) Consistent use STL headers attribute [[maybe_unused]] C++ code","code":""},{"path":"/news/index.html","id":"rmo-08","dir":"Changelog","previous_headings":"","what":"rmo 0.8","title":"rmo 0.8","text":"Create single entry point method general MO sampling distributions, exchangeable MO sampling routines, extendible MO sampling routines, parametrized extendible MO sampling routines. Improve documentation add snaphot test sampling routines.","code":""},{"path":"/news/index.html","id":"rmo-071","dir":"Changelog","previous_headings":"","what":"rmo 0.7.1","title":"rmo 0.7.1","text":"Rename sampling method *_markovian *_arnold *_mdcm *_am, respectively. Rename internal CPP classes arnold_mo_distribution, markovian_exmo_distribution, armageddon_extmo_distribution am_mo_distribution, mdcm_exmo_distribution, esm_armextmo_distribution, respectively.","code":""},{"path":"/news/index.html","id":"rmo-07","dir":"Changelog","previous_headings":"","what":"rmo 0.7","title":"rmo 0.7","text":"Breaking change: remove lambda parameter PoissonBernsteinFunction.","code":""},{"path":"/news/index.html","id":"rmo-06","dir":"Changelog","previous_headings":"","what":"rmo 0.6","title":"rmo 0.6","text":"Rename Cuadras-Augé armageddon ESM better reflect nature distribution.","code":""},{"path":"/news/index.html","id":"rmo-055","dir":"Changelog","previous_headings":"","what":"rmo 0.5.5","title":"rmo 0.5.5","text":"Explicitly handle integration error possible adjustment small values.","code":""},{"path":"/news/index.html","id":"rmo-054","dir":"Changelog","previous_headings":"","what":"rmo 0.5.4","title":"rmo 0.5.4","text":"Use explicit first-order iterated difference difference_order == 1L valueOf avoid endpoint-singularity problems numerical integration.","code":""},{"path":"/news/index.html","id":"rmo-053","dir":"Changelog","previous_headings":"","what":"rmo 0.5.3","title":"rmo 0.5.3","text":"Fix implementation initializers validity methods. particular, validObject can now called argument test = TRUE without causing error. Add show method BernsteinFunction-classes.","code":""},{"path":"/news/index.html","id":"rmo-052","dir":"Changelog","previous_headings":"","what":"rmo 0.5.2","title":"rmo 0.5.2","text":"Allow pass-though arguments integrate functions valueOf, uexIntensities, exIntensities, exQMatrix.","code":""},{"path":"/news/index.html","id":"rmo-051","dir":"Changelog","previous_headings":"","what":"rmo 0.5.1","title":"rmo 0.5.1","text":"Add composite-scaled Bernstein function class.","code":""},{"path":"/news/index.html","id":"rmo-050","dir":"Changelog","previous_headings":"","what":"rmo 0.5.0","title":"rmo 0.5.0","text":"Rename Cuadras-Augé Lévy-frailty model algorithms. Now sampling algorithm follows format r*mo_* first * indicates input-parameter second algorithm, e.g. rexmo_markovian ex_intensities input parameters uses Markovian model default counting process.","code":""},{"path":"/news/index.html","id":"rmo-041","dir":"Changelog","previous_headings":"","what":"rmo 0.4.1","title":"rmo 0.4.1","text":"Rearrange order arguments valueOf: instead cscale, n, k n, k, cscale. Add methods generate parameter BernsteinFunction classes","code":""},{"path":"/news/index.html","id":"rmo-040","dir":"Changelog","previous_headings":"","what":"rmo 0.4.0","title":"rmo 0.4.0","text":"Change input parameter rexmo_markovian (now scaled exchangeable intensity). ex_intensities*-methods similarly adjusted change necessary functions used create input parameter rexmo_markovian. Bernstein function classes refactored new features added.","code":""},{"path":"/news/index.html","id":"rmo-030","dir":"Changelog","previous_headings":"","what":"rmo 0.3.0","title":"rmo 0.3.0","text":"Rename rmo_ex_arnold rexmo_markovian.","code":""},{"path":"/news/index.html","id":"rmo-026","dir":"Changelog","previous_headings":"","what":"rmo 0.2.6","title":"rmo 0.2.6","text":"Complete refactored C++ backend: Distribution classes satisfy multivariate version named requirement RandomNumberDistribution","code":""},{"path":"/news/index.html","id":"rmo-025","dir":"Changelog","previous_headings":"","what":"rmo 0.2.5","title":"rmo 0.2.5","text":"Include tests Include statistical tests integration test Fix problem large binomial coefficients","code":""},{"path":"/news/index.html","id":"rmo-024","dir":"Changelog","previous_headings":"","what":"rmo 0.2.4","title":"rmo 0.2.4","text":"Implementation Inverse Gaussian Bernstein function","code":""},{"path":"/news/index.html","id":"rmo-023","dir":"Changelog","previous_headings":"","what":"rmo 0.2.3","title":"rmo 0.2.3","text":"Implement Pareto jumps Pareto CPP Bernstein function Implement Exponential-jump CPP Bernstein function","code":""},{"path":"/news/index.html","id":"rmo-022","dir":"Changelog","previous_headings":"","what":"rmo 0.2.2","title":"rmo 0.2.2","text":"Improve internal representation Internal support library now entirely written C++ Make LFM extendible","code":""},{"path":"/news/index.html","id":"rmo-021","dir":"Changelog","previous_headings":"","what":"rmo 0.2.1","title":"rmo 0.2.1","text":"Refactoring additional tests Fix problem int32 is_within function Refactor custom assertions Add S4 classes evaluating Bernstein Functions higher-order alternating, iterated forward differences Provide simple functions create meaningful distribution parameters Better test cases increased test coverage Refactor sampling methods increased performance","code":""},{"path":"/news/index.html","id":"rmo-020","dir":"Changelog","previous_headings":"","what":"rmo 0.2.0","title":"rmo 0.2.0","text":"Reimplementation sampling algorithms Rcpp Changed License GPL-3 (Rcpp-package) Extended unit testing original R-based implementations","code":""},{"path":"/news/index.html","id":"rmo-012","dir":"Changelog","previous_headings":"","what":"rmo 0.1.2","title":"rmo 0.1.2","text":"Bugfix rmo:::sample_cpp used rmo_lfm_cpp. former implementation properly account case, CPP drifts several barriers waiting period.","code":""},{"path":"/news/index.html","id":"rmo-011","dir":"Changelog","previous_headings":"","what":"rmo 0.1.1","title":"rmo 0.1.1","text":"Bugfix rmo:::sample_cpp used rmo_lfm_cpp (case rate == 0 properly handled). Implemented test rmo_lfm_cpp independence case","code":""},{"path":"/news/index.html","id":"rmo-010","dir":"Changelog","previous_headings":"","what":"rmo 0.1.0","title":"rmo 0.1.0","text":"Added pure R implementations various sampling algorithms: rmo_esm, rmo_arnold, rmo_ex_arnold, rmo_lfm_cpp, rmo_esm_cuadras_auge.","code":""},{"path":"/news/index.html","id":"rmo-0009000","dir":"Changelog","previous_headings":"","what":"rmo 0.0.0.9000","title":"rmo 0.0.0.9000","text":"Added NEWS.md file track changes package. Sep. 28, 2019: initialized project today. now, code repository. next goal provide necessary background documentation Marshall-Olkin distribution outline project plan. Stay tuned.","code":""}]
